org/eclipse/jgit/transport/UsernamePasswordCredentialsProvider/get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])#java/lang/String/String(char[])
org/eclipse/jgit/transport/UsernamePasswordCredentialsProvider/get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])#org/eclipse/jgit/transport/CredentialItem$Password/setValue(char[])
org/eclipse/jgit/transport/UsernamePasswordCredentialsProvider/get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/UsernamePasswordCredentialsProvider/get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])#org/eclipse/jgit/transport/CredentialItem$StringType/setValue(java.lang.String)
org/eclipse/jgit/transport/UsernamePasswordCredentialsProvider/get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/UsernamePasswordCredentialsProvider/get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])#java/lang/Object/getClass()
org/eclipse/jgit/transport/UsernamePasswordCredentialsProvider/get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])#java/lang/String/equals(java.lang.Object)
org/eclipse/jgit/transport/UsernamePasswordCredentialsProvider/get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])#java/lang/Class/getName()
org/eclipse/jgit/transport/UsernamePasswordCredentialsProvider/get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/UsernamePasswordCredentialsProvider/get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])#org/eclipse/jgit/transport/CredentialItem$Username/setValue(java.lang.String)
org/eclipse/jgit/lib/Config/fromText(java.lang.String)#java/lang/Character/isWhitespace(char)
org/eclipse/jgit/lib/Config/fromText(java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/lib/Config/fromText(java.lang.String)#java/lang/String/length()
org/eclipse/jgit/lib/Config/fromText(java.lang.String)#java/util/concurrent/atomic/AtomicReference/set(java.lang.Object)
org/eclipse/jgit/lib/Config/fromText(java.lang.String)#java/lang/String/substring(int,int)
org/eclipse/jgit/lib/Config/fromText(java.lang.String)#java/lang/String/valueOf(char)
org/eclipse/jgit/lib/Config/fromText(java.lang.String)#java/util/ArrayList/ArrayList()
org/eclipse/jgit/lib/Config/fromText(java.lang.String)#org/eclipse/jgit/lib/Config$StringReader/StringReader(java.lang.String)
org/eclipse/jgit/lib/Config/fromText(java.lang.String)#org/eclipse/jgit/lib/Config$StringReader/read()
org/eclipse/jgit/lib/Config/fromText(java.lang.String)#org/eclipse/jgit/lib/Config$StringReader/reset()
org/eclipse/jgit/lib/Config/fromText(java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/lib/Config/fromText(java.lang.String)#java/util/List/add(java.lang.Object)
org/eclipse/jgit/lib/Config/fromText(java.lang.String)#java/lang/StringBuilder/append(char)
org/eclipse/jgit/lib/Config/fromText(java.lang.String)#java/lang/StringBuilder/toString()
org/eclipse/jgit/lib/Config/fromText(java.lang.String)#java/lang/String/endsWith(java.lang.String)
org/eclipse/jgit/lib/Config/readValue(org.eclipse.jgit.lib.Config$StringReader,boolean,int)#java/lang/Character/isWhitespace(char)
org/eclipse/jgit/lib/Config/readValue(org.eclipse.jgit.lib.Config$StringReader,boolean,int)#org/eclipse/jgit/lib/Config$StringReader/read()
org/eclipse/jgit/lib/Config/readValue(org.eclipse.jgit.lib.Config$StringReader,boolean,int)#org/eclipse/jgit/lib/Config$StringReader/reset()
org/eclipse/jgit/lib/Config/readValue(org.eclipse.jgit.lib.Config$StringReader,boolean,int)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/lib/Config/readValue(org.eclipse.jgit.lib.Config$StringReader,boolean,int)#java/lang/StringBuilder/append(char)
org/eclipse/jgit/lib/Config/readValue(org.eclipse.jgit.lib.Config$StringReader,boolean,int)#java/lang/StringBuilder/length()
org/eclipse/jgit/lib/Config/readValue(org.eclipse.jgit.lib.Config$StringReader,boolean,int)#java/lang/StringBuilder/toString()
org/eclipse/jgit/lib/Config/readValue(org.eclipse.jgit.lib.Config$StringReader,boolean,int)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/lib/Config/readValue(org.eclipse.jgit.lib.Config$StringReader,boolean,int)#java/lang/Character/valueOf(char)
org/eclipse/jgit/lib/Config/toText()#java/util/Iterator/hasNext()
org/eclipse/jgit/lib/Config/toText()#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/lib/Config/toText()#java/util/Iterator/next()
org/eclipse/jgit/lib/Config/toText()#java/lang/String/equals(java.lang.Object)
org/eclipse/jgit/lib/Config/toText()#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/lib/Config/toText()#java/util/List/iterator()
org/eclipse/jgit/lib/Config/toText()#java/lang/StringBuilder/append(char)
org/eclipse/jgit/lib/Config/toText()#java/util/concurrent/atomic/AtomicReference/get()
org/eclipse/jgit/lib/Config/toText()#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/lib/Config/toText()#java/lang/StringBuilder/toString()
org/eclipse/jgit/lib/Config/toText()#java/lang/String/endsWith(java.lang.String)
org/eclipse/jgit/lib/Config/escapeValue(java.lang.String)#java/lang/String/length()
org/eclipse/jgit/lib/Config/escapeValue(java.lang.String)#java/lang/StringBuilder/StringBuilder(int)
org/eclipse/jgit/lib/Config/escapeValue(java.lang.String)#java/lang/StringBuilder/append(char)
org/eclipse/jgit/lib/Config/escapeValue(java.lang.String)#java/lang/StringBuilder/charAt(int)
org/eclipse/jgit/lib/Config/escapeValue(java.lang.String)#java/lang/StringBuilder/toString()
org/eclipse/jgit/lib/Config/escapeValue(java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/lib/Config/escapeValue(java.lang.String)#java/lang/String/charAt(int)
org/eclipse/jgit/lib/Config/escapeValue(java.lang.String)#java/lang/StringBuilder/length()
org/eclipse/jgit/lib/Config/escapeValue(java.lang.String)#java/lang/StringBuilder/insert(int,char)
org/eclipse/jgit/api/RenameBranchCommand/call()#org/eclipse/jgit/lib/StoredConfig/setStringList(java.lang.String,java.lang.String,java.lang.String,java.util.List)
org/eclipse/jgit/api/RenameBranchCommand/call()#org/eclipse/jgit/lib/StoredConfig/getNames(java.lang.String,java.lang.String)
org/eclipse/jgit/api/RenameBranchCommand/call()#java/util/Iterator/hasNext()
org/eclipse/jgit/api/RenameBranchCommand/call()#java/util/Set/iterator()
org/eclipse/jgit/api/RenameBranchCommand/call()#org/eclipse/jgit/api/RenameBranchCommand/setCallable(boolean)
org/eclipse/jgit/api/RenameBranchCommand/call()#java/lang/System/arraycopy(java.lang.Object,int,java.lang.Object,int,int)
org/eclipse/jgit/api/RenameBranchCommand/call()#java/lang/StringBuilder/toString()
org/eclipse/jgit/api/RenameBranchCommand/call()#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/api/RenameBranchCommand/call()#java/lang/String/length()
org/eclipse/jgit/api/RenameBranchCommand/call()#java/util/Arrays/asList(java.lang.Object[])
org/eclipse/jgit/api/RenameBranchCommand/call()#org/eclipse/jgit/api/RenameBranchCommand/checkCallable()
org/eclipse/jgit/api/RenameBranchCommand/call()#java/io/IOException/getMessage()
org/eclipse/jgit/api/RenameBranchCommand/call()#java/util/Iterator/next()
org/eclipse/jgit/api/RenameBranchCommand/call()#org/eclipse/jgit/lib/StoredConfig/getStringList(java.lang.String,java.lang.String,java.lang.String)
org/eclipse/jgit/api/RenameBranchCommand/call()#org/eclipse/jgit/lib/RefUpdate$Result/name()
org/eclipse/jgit/api/RenameBranchCommand/call()#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/api/RenameBranchCommand/call()#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/api/RenameBranchCommand/call()#java/lang/String/substring(int)
org/eclipse/jgit/api/RenameBranchCommand/call()#org/eclipse/jgit/lib/StoredConfig/unsetSection(java.lang.String,java.lang.String)
org/eclipse/jgit/api/RenameBranchCommand/call()#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/api/ListBranchCommand/call()#java/util/ArrayList/ArrayList()
org/eclipse/jgit/api/ListBranchCommand/call()#java/util/ArrayList/ArrayList(java.util.Collection)
org/eclipse/jgit/api/ListBranchCommand/call()#java/util/Collection/addAll(java.util.Collection)
org/eclipse/jgit/api/ListBranchCommand/call()#java/lang/String/equals(java.lang.Object)
org/eclipse/jgit/api/ListBranchCommand/call()#org/eclipse/jgit/api/ListBranchCommand/checkCallable()
org/eclipse/jgit/api/ListBranchCommand/call()#java/io/IOException/getMessage()
org/eclipse/jgit/api/ListBranchCommand/call()#java/util/Collections/sort(java.util.List,java.util.Comparator)
org/eclipse/jgit/api/ListBranchCommand/call()#org/eclipse/jgit/api/ListBranchCommand$1/1(org.eclipse.jgit.api.ListBranchCommand)
org/eclipse/jgit/api/ListBranchCommand/call()#org/eclipse/jgit/api/ListBranchCommand/setCallable(boolean)
org/eclipse/jgit/api/ListBranchCommand/call()#java/util/Collection/add(java.lang.Object)
org/eclipse/jgit/util/RefMap/toString()#java/util/Iterator/hasNext()
org/eclipse/jgit/util/RefMap/toString()#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/util/RefMap/toString()#org/eclipse/jgit/util/RefMap/values()
org/eclipse/jgit/util/RefMap/toString()#java/util/Iterator/next()
org/eclipse/jgit/util/RefMap/toString()#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/util/RefMap/toString()#java/lang/StringBuilder/append(char)
org/eclipse/jgit/util/RefMap/toString()#java/lang/StringBuilder/append(java.lang.Object)
org/eclipse/jgit/util/RefMap/toString()#java/util/Collection/iterator()
org/eclipse/jgit/util/RefMap/toString()#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/ReceivePack/service()#java/lang/Thread/sleep(long)
org/eclipse/jgit/transport/ReceivePack/service()#org/eclipse/jgit/transport/ReceivePack/unlockPack()
org/eclipse/jgit/transport/ReceivePack/service()#java/io/OutputStream/flush()
org/eclipse/jgit/transport/ReceivePack/service()#org/eclipse/jgit/transport/ReceivePack/hasCommands()
org/eclipse/jgit/transport/ReceivePack/service()#org/eclipse/jgit/transport/ReceivePack$1/1(org.eclipse.jgit.transport.ReceivePack)
org/eclipse/jgit/transport/ReceivePack/service()#org/eclipse/jgit/transport/ReceivePack/receivePackAndCheckConnectivity()
org/eclipse/jgit/transport/ReceivePack/service()#org/eclipse/jgit/transport/ReceivePack$2/2(org.eclipse.jgit.transport.ReceivePack)
org/eclipse/jgit/transport/ReceivePack/service()#org/eclipse/jgit/transport/ReceivePack/sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)
org/eclipse/jgit/transport/ReceivePack/service()#org/eclipse/jgit/transport/ReceivePack/validateCommands()
org/eclipse/jgit/transport/ReceivePack/service()#org/eclipse/jgit/transport/ReceivePack/sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)
org/eclipse/jgit/transport/ReceivePack/service()#org/eclipse/jgit/transport/ReceivePack/filterCommands(org.eclipse.jgit.transport.ReceiveCommand$Result)
org/eclipse/jgit/transport/ReceivePack/service()#org/eclipse/jgit/transport/ReceivePack/executeCommands()
org/eclipse/jgit/transport/ReceivePack/service()#org/eclipse/jgit/transport/ReceivePack/isBiDirectionalPipe()
org/eclipse/jgit/transport/ReceivePack/service()#org/eclipse/jgit/transport/ReceivePack$3/3(org.eclipse.jgit.transport.ReceivePack)
org/eclipse/jgit/transport/ReceivePack/service()#org/eclipse/jgit/transport/ReceivePack/getAdvertisedOrDefaultRefs()
org/eclipse/jgit/transport/ReceivePack/service()#org/eclipse/jgit/transport/ReceivePack/hasError()
org/eclipse/jgit/transport/ReceivePack/service()#org/eclipse/jgit/transport/ReceivePack/recvCommands()
org/eclipse/jgit/transport/ReceivePack/service()#org/eclipse/jgit/transport/RefAdvertiser$PacketLineOutRefAdvertiser/PacketLineOutRefAdvertiser(org.eclipse.jgit.transport.PacketLineOut)
org/eclipse/jgit/transport/ReceivePack/service()#org/eclipse/jgit/transport/ReceivePack/needPack()
org/eclipse/jgit/lib/BatchRefUpdate/execute(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.ProgressMonitor)#java/io/IOException/getMessage()
org/eclipse/jgit/lib/BatchRefUpdate/execute(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.ProgressMonitor)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/lib/BatchRefUpdate/execute(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.ProgressMonitor)#org/eclipse/jgit/transport/ReceiveCommand$Type/ordinal()
org/eclipse/jgit/lib/BatchRefUpdate/execute(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.ProgressMonitor)#java/util/Collection/contains(java.lang.Object)
org/eclipse/jgit/lib/BatchRefUpdate/execute(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.ProgressMonitor)#java/util/ArrayList/ArrayList(int)
org/eclipse/jgit/lib/BatchRefUpdate/execute(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.ProgressMonitor)#java/util/Iterator/hasNext()
org/eclipse/jgit/lib/BatchRefUpdate/execute(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.ProgressMonitor)#java/util/List/isEmpty()
org/eclipse/jgit/lib/BatchRefUpdate/execute(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.ProgressMonitor)#java/util/List/size()
org/eclipse/jgit/lib/BatchRefUpdate/execute(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.ProgressMonitor)#java/util/Iterator/next()
org/eclipse/jgit/lib/BatchRefUpdate/execute(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.ProgressMonitor)#java/util/Map/keySet()
org/eclipse/jgit/lib/BatchRefUpdate/execute(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.ProgressMonitor)#java/util/List/add(java.lang.Object)
org/eclipse/jgit/lib/BatchRefUpdate/execute(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.ProgressMonitor)#java/util/Collection/add(java.lang.Object)
org/eclipse/jgit/lib/BatchRefUpdate/execute(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.ProgressMonitor)#java/util/List/iterator()
org/eclipse/jgit/lib/BatchRefUpdate/execute(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.ProgressMonitor)#java/util/Collection/iterator()
org/eclipse/jgit/lib/BatchRefUpdate/execute(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.ProgressMonitor)#java/util/HashSet/HashSet(java.util.Collection)
org/eclipse/jgit/util/QuotedString/BourneUserPathStyle/quote(java.lang.String)#org/eclipse/jgit/util/QuotedString$BourneStyle/quote(java.lang.String)
org/eclipse/jgit/util/QuotedString/BourneUserPathStyle/quote(java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/util/QuotedString/BourneUserPathStyle/quote(java.lang.String)#java/lang/String/length()
org/eclipse/jgit/util/QuotedString/BourneUserPathStyle/quote(java.lang.String)#java/lang/String/substring(int,int)
org/eclipse/jgit/util/QuotedString/BourneUserPathStyle/quote(java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/util/QuotedString/BourneUserPathStyle/quote(java.lang.String)#java/lang/String/substring(int)
org/eclipse/jgit/util/QuotedString/BourneUserPathStyle/quote(java.lang.String)#java/lang/StringBuilder/toString()
org/eclipse/jgit/util/QuotedString/BourneUserPathStyle/quote(java.lang.String)#java/lang/String/matches(java.lang.String)
org/eclipse/jgit/util/QuotedString/BourneUserPathStyle/quote(java.lang.String)#java/lang/String/indexOf(int)
org/eclipse/jgit/api/StashListCommand/call()#java/util/ArrayList/ArrayList(int)
org/eclipse/jgit/api/StashListCommand/call()#java/util/Collection/isEmpty()
org/eclipse/jgit/api/StashListCommand/call()#java/util/Iterator/next()
org/eclipse/jgit/api/StashListCommand/call()#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/api/StashListCommand/call()#java/util/List/add(java.lang.Object)
org/eclipse/jgit/api/StashListCommand/call()#java/util/Collection/iterator()
org/eclipse/jgit/api/StashListCommand/call()#java/util/Iterator/hasNext()
org/eclipse/jgit/api/StashListCommand/call()#java/util/Collections/emptyList()
org/eclipse/jgit/api/StashListCommand/call()#java/util/Collection/size()
org/eclipse/jgit/api/StashListCommand/call()#org/eclipse/jgit/api/StashListCommand/checkCallable()
org/eclipse/jgit/util/GitDateFormatter/formatDate(org.eclipse.jgit.lib.PersonIdent)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/util/GitDateFormatter/formatDate(org.eclipse.jgit.lib.PersonIdent)#java/lang/String/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/util/GitDateFormatter/formatDate(org.eclipse.jgit.lib.PersonIdent)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/util/GitDateFormatter/formatDate(org.eclipse.jgit.lib.PersonIdent)#org/eclipse/jgit/util/GitDateFormatter$Format/ordinal()
org/eclipse/jgit/util/GitDateFormatter/formatDate(org.eclipse.jgit.lib.PersonIdent)#java/text/DateFormat/format(java.util.Date)
org/eclipse/jgit/util/GitDateFormatter/formatDate(org.eclipse.jgit.lib.PersonIdent)#java/util/Date/getTime()
org/eclipse/jgit/util/GitDateFormatter/formatDate(org.eclipse.jgit.lib.PersonIdent)#java/lang/StringBuilder/toString()
org/eclipse/jgit/util/GitDateFormatter/formatDate(org.eclipse.jgit.lib.PersonIdent)#java/lang/Long/valueOf(long)
org/eclipse/jgit/util/GitDateFormatter/formatDate(org.eclipse.jgit.lib.PersonIdent)#java/text/DateFormat/setTimeZone(java.util.TimeZone)
org/eclipse/jgit/util/GitDateFormatter/formatDate(org.eclipse.jgit.lib.PersonIdent)#java/lang/Integer/valueOf(int)
org/eclipse/jgit/transport/BasePackConnection/readAdvertisedRefsImpl()#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/BasePackConnection/readAdvertisedRefsImpl()#java/util/LinkedHashMap/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/transport/BasePackConnection/readAdvertisedRefsImpl()#java/lang/String/length()
org/eclipse/jgit/transport/BasePackConnection/readAdvertisedRefsImpl()#java/lang/String/substring(int)
org/eclipse/jgit/transport/BasePackConnection/readAdvertisedRefsImpl()#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/transport/BasePackConnection/readAdvertisedRefsImpl()#java/util/LinkedHashMap/isEmpty()
org/eclipse/jgit/transport/BasePackConnection/readAdvertisedRefsImpl()#java/lang/String/split(java.lang.String)
org/eclipse/jgit/transport/BasePackConnection/readAdvertisedRefsImpl()#java/util/LinkedHashMap/get(java.lang.Object)
org/eclipse/jgit/transport/BasePackConnection/readAdvertisedRefsImpl()#org/eclipse/jgit/lib/ObjectIdRef$PeeledTag/PeeledTag(org.eclipse.jgit.lib.Ref$Storage,java.lang.String,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.ObjectId)
org/eclipse/jgit/transport/BasePackConnection/readAdvertisedRefsImpl()#java/lang/String/equals(java.lang.Object)
org/eclipse/jgit/transport/BasePackConnection/readAdvertisedRefsImpl()#org/eclipse/jgit/transport/BasePackConnection/available(java.util.Map)
org/eclipse/jgit/transport/BasePackConnection/readAdvertisedRefsImpl()#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/transport/BasePackConnection/readAdvertisedRefsImpl()#java/lang/String/substring(int,int)
org/eclipse/jgit/transport/BasePackConnection/readAdvertisedRefsImpl()#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/BasePackConnection/readAdvertisedRefsImpl()#org/eclipse/jgit/lib/ObjectIdRef$PeeledNonTag/PeeledNonTag(org.eclipse.jgit.lib.Ref$Storage,java.lang.String,org.eclipse.jgit.lib.ObjectId)
org/eclipse/jgit/transport/BasePackConnection/readAdvertisedRefsImpl()#java/util/Set/add(java.lang.Object)
org/eclipse/jgit/transport/BasePackConnection/readAdvertisedRefsImpl()#java/util/LinkedHashMap/LinkedHashMap()
org/eclipse/jgit/transport/BasePackConnection/readAdvertisedRefsImpl()#java/lang/String/indexOf(int)
org/eclipse/jgit/transport/BasePackConnection/readAdvertisedRefsImpl()#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/BasePackConnection/readAdvertisedRefsImpl()#java/lang/String/endsWith(java.lang.String)
org/eclipse/jgit/api/CreateBranchCommand/call()#java/lang/String/length()
org/eclipse/jgit/api/CreateBranchCommand/call()#org/eclipse/jgit/lib/RefUpdate$Result/name()
org/eclipse/jgit/api/CreateBranchCommand/call()#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/api/CreateBranchCommand/call()#org/eclipse/jgit/api/CreateBranchCommand/setCallable(boolean)
org/eclipse/jgit/api/CreateBranchCommand/call()#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/api/CreateBranchCommand/call()#java/lang/StringBuilder/toString()
org/eclipse/jgit/api/CreateBranchCommand/call()#org/eclipse/jgit/lib/RefUpdate$Result/ordinal()
org/eclipse/jgit/api/CreateBranchCommand/call()#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/api/CreateBranchCommand/call()#java/io/IOException/getMessage()
org/eclipse/jgit/api/CreateBranchCommand/call()#org/eclipse/jgit/api/CreateBranchCommand/checkCallable()
org/eclipse/jgit/api/CreateBranchCommand/call()#java/lang/String/equals(java.lang.Object)
org/eclipse/jgit/api/CreateBranchCommand/call()#org/eclipse/jgit/lib/StoredConfig/getString(java.lang.String,java.lang.String,java.lang.String)
org/eclipse/jgit/api/CreateBranchCommand/call()#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/api/CreateBranchCommand/call()#org/eclipse/jgit/lib/StoredConfig/setString(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
org/eclipse/jgit/transport/RemoteConfig/replaceUri(java.lang.String,java.util.Map)#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/RemoteConfig/replaceUri(java.lang.String,java.util.Map)#java/util/Iterator/next()
org/eclipse/jgit/transport/RemoteConfig/replaceUri(java.lang.String,java.util.Map)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/RemoteConfig/replaceUri(java.lang.String,java.util.Map)#java/util/Set/iterator()
org/eclipse/jgit/transport/RemoteConfig/replaceUri(java.lang.String,java.util.Map)#java/lang/String/substring(int)
org/eclipse/jgit/transport/RemoteConfig/replaceUri(java.lang.String,java.util.Map)#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/transport/RemoteConfig/replaceUri(java.lang.String,java.util.Map)#java/util/Map$Entry/getValue()
org/eclipse/jgit/transport/RemoteConfig/replaceUri(java.lang.String,java.util.Map)#java/util/Map/entrySet()
org/eclipse/jgit/transport/RemoteConfig/replaceUri(java.lang.String,java.util.Map)#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/RemoteConfig/replaceUri(java.lang.String,java.util.Map)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/RemoteConfig/replaceUri(java.lang.String,java.util.Map)#java/util/Map$Entry/getKey()
org/eclipse/jgit/transport/RemoteConfig/replaceUri(java.lang.String,java.util.Map)#java/lang/String/length()
org/eclipse/jgit/transport/RemoteConfig/replaceUri(java.lang.String,java.util.Map)#java/util/Map/isEmpty()
org/eclipse/jgit/api/StashCreateCommand/call()#org/eclipse/jgit/api/StashCreateCommand$1/1(org.eclipse.jgit.api.StashCreateCommand,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.dircache.DirCacheEntry)
org/eclipse/jgit/api/StashCreateCommand/call()#java/util/ArrayList/ArrayList()
org/eclipse/jgit/api/StashCreateCommand/call()#org/eclipse/jgit/revwalk/RevCommit/abbreviate(int)
org/eclipse/jgit/api/StashCreateCommand/call()#java/io/File/File(java.io.File,java.lang.String)
org/eclipse/jgit/api/StashCreateCommand/call()#java/util/Iterator/hasNext()
org/eclipse/jgit/api/StashCreateCommand/call()#java/util/List/isEmpty()
org/eclipse/jgit/api/StashCreateCommand/call()#org/eclipse/jgit/dircache/DirCacheEditor$DeletePath/DeletePath(java.lang.String)
org/eclipse/jgit/api/StashCreateCommand/call()#org/eclipse/jgit/treewalk/WorkingTreeIterator/idEqual(org.eclipse.jgit.treewalk.AbstractTreeIterator)
org/eclipse/jgit/api/StashCreateCommand/call()#java/util/Iterator/next()
org/eclipse/jgit/api/StashCreateCommand/call()#org/eclipse/jgit/api/StashCreateCommand/checkCallable()
org/eclipse/jgit/api/StashCreateCommand/call()#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/api/StashCreateCommand/call()#java/io/InputStream/close()
org/eclipse/jgit/api/StashCreateCommand/call()#java/util/List/add(java.lang.Object)
org/eclipse/jgit/api/StashCreateCommand/call()#org/eclipse/jgit/treewalk/WorkingTreeIterator/getEntryFileMode()
org/eclipse/jgit/api/StashCreateCommand/call()#java/util/List/iterator()
org/eclipse/jgit/transport/UploadPack/TipRequestValidator/checkWants(org.eclipse.jgit.transport.UploadPack,java.util.List)#org/eclipse/jgit/transport/UploadPack$ReachableCommitTipRequestValidator/ReachableCommitTipRequestValidator()
org/eclipse/jgit/transport/UploadPack/TipRequestValidator/checkWants(org.eclipse.jgit.transport.UploadPack,java.util.List)#java/util/Map/values()
org/eclipse/jgit/transport/UploadPack/TipRequestValidator/checkWants(org.eclipse.jgit.transport.UploadPack,java.util.List)#java/util/Iterator/next()
org/eclipse/jgit/transport/UploadPack/TipRequestValidator/checkWants(org.eclipse.jgit.transport.UploadPack,java.util.List)#org/eclipse/jgit/lib/ObjectId/name()
org/eclipse/jgit/transport/UploadPack/TipRequestValidator/checkWants(org.eclipse.jgit.transport.UploadPack,java.util.List)#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/UploadPack/TipRequestValidator/checkWants(org.eclipse.jgit.transport.UploadPack,java.util.List)#org/eclipse/jgit/transport/UploadPack$ReachableCommitTipRequestValidator/checkWants(org.eclipse.jgit.transport.UploadPack,java.util.List)
org/eclipse/jgit/transport/UploadPack/TipRequestValidator/checkWants(org.eclipse.jgit.transport.UploadPack,java.util.List)#java/util/List/isEmpty()
org/eclipse/jgit/transport/UploadPack/TipRequestValidator/checkWants(org.eclipse.jgit.transport.UploadPack,java.util.List)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/transport/UploadPack/TipRequestValidator/checkWants(org.eclipse.jgit.transport.UploadPack,java.util.List)#java/util/Set/contains(java.lang.Object)
org/eclipse/jgit/transport/UploadPack/TipRequestValidator/checkWants(org.eclipse.jgit.transport.UploadPack,java.util.List)#java/util/List/iterator()
org/eclipse/jgit/fnmatch/FileNameMatcher/findGroupEnd(int,java.lang.String)#java/util/regex/Matcher/group(int)
org/eclipse/jgit/fnmatch/FileNameMatcher/findGroupEnd(int,java.lang.String)#java/lang/String/length()
org/eclipse/jgit/fnmatch/FileNameMatcher/findGroupEnd(int,java.lang.String)#java/lang/String/indexOf(java.lang.String,int)
org/eclipse/jgit/fnmatch/FileNameMatcher/findGroupEnd(int,java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/fnmatch/FileNameMatcher/findGroupEnd(int,java.lang.String)#java/lang/StringBuilder/append(char)
org/eclipse/jgit/fnmatch/FileNameMatcher/findGroupEnd(int,java.lang.String)#java/util/regex/Matcher/start()
org/eclipse/jgit/fnmatch/FileNameMatcher/findGroupEnd(int,java.lang.String)#java/util/regex/Pattern/matcher(java.lang.CharSequence)
org/eclipse/jgit/fnmatch/FileNameMatcher/findGroupEnd(int,java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/fnmatch/FileNameMatcher/findGroupEnd(int,java.lang.String)#java/lang/String/charAt(int)
org/eclipse/jgit/fnmatch/FileNameMatcher/findGroupEnd(int,java.lang.String)#java/lang/StringBuilder/toString()
org/eclipse/jgit/fnmatch/FileNameMatcher/findGroupEnd(int,java.lang.String)#java/util/regex/Matcher/find(int)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/getPackSize()#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/getPackSize()#java/lang/String/length()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/getPackSize()#java/io/File/File(java.lang.String)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/getPackSize()#java/lang/String/substring(int,int)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/getPackSize()#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/getPackSize()#java/io/File/getAbsolutePath()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/getPackSize()#java/lang/StringBuilder/toString()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/getPackSize()#java/io/File/exists()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/getPackSize()#java/io/File/length()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/getPackSize()#java/io/File/isFile()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/renameAndOpenPack(java.lang.String)#java/security/MessageDigest/digest()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/renameAndOpenPack(java.lang.String)#java/io/File/exists()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/renameAndOpenPack(java.lang.String)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/renameAndOpenPack(java.lang.String)#java/io/File/getAbsolutePath()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/renameAndOpenPack(java.lang.String)#java/io/File/deleteOnExit()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/renameAndOpenPack(java.lang.String)#org/eclipse/jgit/lib/ObjectId/name()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/renameAndOpenPack(java.lang.String)#java/io/File/delete()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/renameAndOpenPack(java.lang.String)#org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/getObjectCount()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/renameAndOpenPack(java.lang.String)#java/io/File/File(java.io.File,java.lang.String)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/renameAndOpenPack(java.lang.String)#java/io/IOException/IOException(java.lang.String)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/renameAndOpenPack(java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/renameAndOpenPack(java.lang.String)#org/eclipse/jgit/transport/PackedObjectInfo/copyRawTo(byte[],int)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/renameAndOpenPack(java.lang.String)#org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/getObject(int)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/renameAndOpenPack(java.lang.String)#java/io/File/mkdir()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/renameAndOpenPack(java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/renameAndOpenPack(java.lang.String)#java/io/File/renameTo(java.io.File)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/renameAndOpenPack(java.lang.String)#java/lang/StringBuilder/toString()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/renameAndOpenPack(java.lang.String)#java/security/MessageDigest/update(byte[])
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)#org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/buffer()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)#java/util/zip/Deflater/finish()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)#java/util/zip/Deflater/reset()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)#java/util/zip/Deflater/setInput(byte[])
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)#java/util/zip/CRC32/update(byte[],int,int)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)#java/util/zip/CRC32/getValue()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)#java/util/zip/Deflater/deflate(byte[])
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)#java/util/zip/CRC32/reset()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)#java/util/zip/Deflater/Deflater(int,boolean)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)#java/util/zip/Deflater/finished()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)#java/io/RandomAccessFile/seek(long)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)#java/io/RandomAccessFile/write(byte[],int,int)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)#java/security/MessageDigest/update(byte[],int,int)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)#java/io/RandomAccessFile/close()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)#org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/getLockMessage()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)#java/nio/channels/FileChannel/isOpen()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)#java/nio/channels/FileChannel/force(boolean)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)#java/io/RandomAccessFile/getChannel()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)#java/util/zip/Deflater/end()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)#java/io/File/File(java.io.File,java.lang.String)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)#java/io/RandomAccessFile/RandomAccessFile(java.io.File,java.lang.String)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)#java/io/File/setReadOnly()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)#java/io/File/createTempFile(java.lang.String,java.lang.String,java.io.File)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)#java/io/RandomAccessFile/seek(long)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)#java/lang/StringBuilder/toString()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)#java/io/RandomAccessFile/write(byte[])
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/onEndThinPack()#java/lang/Math/min(long,long)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/onEndThinPack()#java/security/MessageDigest/digest()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/onEndThinPack()#org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/buffer()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/onEndThinPack()#java/io/RandomAccessFile/seek(long)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/onEndThinPack()#java/util/Arrays/equals(byte[],byte[])
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/onEndThinPack()#java/io/RandomAccessFile/readFully(byte[],int,int)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/onEndThinPack()#java/io/RandomAccessFile/read(byte[])
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/onEndThinPack()#org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/getObjectCount()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/onEndThinPack()#java/io/IOException/IOException(java.lang.String)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/onEndThinPack()#java/io/RandomAccessFile/write(byte[],int,int)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryPackParser/onEndThinPack()#java/security/MessageDigest/update(byte[],int,int)
org/eclipse/jgit/transport/WalkRemoteObjectDatabase/readPackedRefsImpl(java.util.Map,java.io.BufferedReader)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/transport/WalkRemoteObjectDatabase/readPackedRefsImpl(java.util.Map,java.io.BufferedReader)#java/lang/String/charAt(int)
org/eclipse/jgit/transport/WalkRemoteObjectDatabase/readPackedRefsImpl(java.util.Map,java.io.BufferedReader)#java/lang/String/length()
org/eclipse/jgit/transport/WalkRemoteObjectDatabase/readPackedRefsImpl(java.util.Map,java.io.BufferedReader)#java/lang/String/substring(int)
org/eclipse/jgit/transport/WalkRemoteObjectDatabase/readPackedRefsImpl(java.util.Map,java.io.BufferedReader)#java/io/BufferedReader/readLine()
org/eclipse/jgit/transport/WalkRemoteObjectDatabase/readPackedRefsImpl(java.util.Map,java.io.BufferedReader)#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/transport/WalkRemoteObjectDatabase/readPackedRefsImpl(java.util.Map,java.io.BufferedReader)#java/lang/String/contains(java.lang.CharSequence)
org/eclipse/jgit/transport/WalkRemoteObjectDatabase/readPackedRefsImpl(java.util.Map,java.io.BufferedReader)#java/lang/String/indexOf(int)
org/eclipse/jgit/transport/WalkRemoteObjectDatabase/readPackedRefsImpl(java.util.Map,java.io.BufferedReader)#org/eclipse/jgit/lib/ObjectIdRef$PeeledTag/PeeledTag(org.eclipse.jgit.lib.Ref$Storage,java.lang.String,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.ObjectId)
org/eclipse/jgit/transport/WalkRemoteObjectDatabase/readPackedRefsImpl(java.util.Map,java.io.BufferedReader)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/transport/WalkRemoteObjectDatabase/readPackedRefsImpl(java.util.Map,java.io.BufferedReader)#java/lang/String/substring(int,int)
org/eclipse/jgit/transport/WalkRemoteObjectDatabase/readPackedRefsImpl(java.util.Map,java.io.BufferedReader)#org/eclipse/jgit/lib/ObjectIdRef$PeeledNonTag/PeeledNonTag(org.eclipse.jgit.lib.Ref$Storage,java.lang.String,org.eclipse.jgit.lib.ObjectId)
org/eclipse/jgit/transport/WalkRemoteObjectDatabase/readPackedRefsImpl(java.util.Map,java.io.BufferedReader)#org/eclipse/jgit/lib/ObjectIdRef$Unpeeled/Unpeeled(org.eclipse.jgit.lib.Ref$Storage,java.lang.String,org.eclipse.jgit.lib.ObjectId)
org/eclipse/jgit/nls/TranslationBundle/load(java.util.Locale)#java/lang/Class/getFields()
org/eclipse/jgit/nls/TranslationBundle/load(java.util.Locale)#java/lang/reflect/Field/getName()
org/eclipse/jgit/nls/TranslationBundle/load(java.util.Locale)#java/lang/Object/equals(java.lang.Object)
org/eclipse/jgit/nls/TranslationBundle/load(java.util.Locale)#java/util/ResourceBundle/getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)
org/eclipse/jgit/nls/TranslationBundle/load(java.util.Locale)#java/util/ResourceBundle/getLocale()
org/eclipse/jgit/nls/TranslationBundle/load(java.util.Locale)#java/lang/reflect/Field/getType()
org/eclipse/jgit/nls/TranslationBundle/load(java.util.Locale)#java/lang/Class/getName()
org/eclipse/jgit/nls/TranslationBundle/load(java.util.Locale)#java/lang/reflect/Field/set(java.lang.Object,java.lang.Object)
org/eclipse/jgit/nls/TranslationBundle/load(java.util.Locale)#java/lang/Error/Error(java.lang.Throwable)
org/eclipse/jgit/nls/TranslationBundle/load(java.util.Locale)#java/util/ResourceBundle/getString(java.lang.String)
org/eclipse/jgit/nls/TranslationBundle/load(java.util.Locale)#java/lang/Object/getClass()
org/eclipse/jgit/nls/TranslationBundle/load(java.util.Locale)#java/lang/Class/getClassLoader()
org/eclipse/jgit/util/FS/readPipe(java.io.File,java.lang.String[],java.lang.String)#java/lang/Process/getInputStream()
org/eclipse/jgit/util/FS/readPipe(java.io.File,java.lang.String[],java.lang.String)#java/lang/Boolean/parseBoolean(java.lang.String)
org/eclipse/jgit/util/FS/readPipe(java.io.File,java.lang.String[],java.lang.String)#java/lang/Runtime/getRuntime()
org/eclipse/jgit/util/FS/readPipe(java.io.File,java.lang.String[],java.lang.String)#java/lang/Thread/start()
org/eclipse/jgit/util/FS/readPipe(java.io.File,java.lang.String[],java.lang.String)#java/io/InputStreamReader/InputStreamReader(java.io.InputStream,java.lang.String)
org/eclipse/jgit/util/FS/readPipe(java.io.File,java.lang.String[],java.lang.String)#java/io/InputStream/close()
org/eclipse/jgit/util/FS/readPipe(java.io.File,java.lang.String[],java.lang.String)#java/lang/Runtime/exec(java.lang.String[],java.lang.String[],java.io.File)
org/eclipse/jgit/util/FS/readPipe(java.io.File,java.lang.String[],java.lang.String)#org/eclipse/jgit/util/FS$2/2(java.lang.Process,boolean,java.util.concurrent.atomic.AtomicBoolean)
org/eclipse/jgit/util/FS/readPipe(java.io.File,java.lang.String[],java.lang.String)#java/lang/Process/getErrorStream()
org/eclipse/jgit/util/FS/readPipe(java.io.File,java.lang.String[],java.lang.String)#java/io/OutputStream/close()
org/eclipse/jgit/util/FS/readPipe(java.io.File,java.lang.String[],java.lang.String)#java/io/BufferedReader/close()
org/eclipse/jgit/util/FS/readPipe(java.io.File,java.lang.String[],java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/util/FS/readPipe(java.io.File,java.lang.String[],java.lang.String)#java/io/PrintStream/println(java.lang.String)
org/eclipse/jgit/util/FS/readPipe(java.io.File,java.lang.String[],java.lang.String)#java/lang/StringBuilder/append(int)
org/eclipse/jgit/util/FS/readPipe(java.io.File,java.lang.String[],java.lang.String)#java/util/concurrent/atomic/AtomicBoolean/AtomicBoolean(boolean)
org/eclipse/jgit/util/FS/readPipe(java.io.File,java.lang.String[],java.lang.String)#java/lang/String/length()
org/eclipse/jgit/util/FS/readPipe(java.io.File,java.lang.String[],java.lang.String)#java/util/Arrays/asList(java.lang.Object[])
org/eclipse/jgit/util/FS/readPipe(java.io.File,java.lang.String[],java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/util/FS/readPipe(java.io.File,java.lang.String[],java.lang.String)#java/util/concurrent/atomic/AtomicBoolean/get()
org/eclipse/jgit/util/FS/readPipe(java.io.File,java.lang.String[],java.lang.String)#java/io/BufferedReader/BufferedReader(java.io.Reader)
org/eclipse/jgit/util/FS/readPipe(java.io.File,java.lang.String[],java.lang.String)#java/lang/Thread/join()
org/eclipse/jgit/util/FS/readPipe(java.io.File,java.lang.String[],java.lang.String)#java/io/BufferedReader/readLine()
org/eclipse/jgit/util/FS/readPipe(java.io.File,java.lang.String[],java.lang.String)#java/lang/StringBuilder/append(java.lang.Object)
org/eclipse/jgit/util/FS/readPipe(java.io.File,java.lang.String[],java.lang.String)#java/io/PrintStream/println(java.lang.Object)
org/eclipse/jgit/util/FS/readPipe(java.io.File,java.lang.String[],java.lang.String)#java/lang/Process/waitFor()
org/eclipse/jgit/util/FS/readPipe(java.io.File,java.lang.String[],java.lang.String)#java/lang/StringBuilder/toString()
org/eclipse/jgit/util/FS/readPipe(java.io.File,java.lang.String[],java.lang.String)#java/lang/Process/getOutputStream()
org/eclipse/jgit/util/ChangeIdUtil/insertId(java.lang.String,org.eclipse.jgit.lib.ObjectId,boolean)#java/lang/String/split(java.lang.String)
org/eclipse/jgit/util/ChangeIdUtil/insertId(java.lang.String,org.eclipse.jgit.lib.ObjectId,boolean)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/util/ChangeIdUtil/insertId(java.lang.String,org.eclipse.jgit.lib.ObjectId,boolean)#java/util/regex/Matcher/matches()
org/eclipse/jgit/util/ChangeIdUtil/insertId(java.lang.String,org.eclipse.jgit.lib.ObjectId,boolean)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/jgit/util/ChangeIdUtil/insertId(java.lang.String,org.eclipse.jgit.lib.ObjectId,boolean)#java/lang/String/substring(int,int)
org/eclipse/jgit/util/ChangeIdUtil/insertId(java.lang.String,org.eclipse.jgit.lib.ObjectId,boolean)#java/lang/String/substring(int)
org/eclipse/jgit/util/ChangeIdUtil/insertId(java.lang.String,org.eclipse.jgit.lib.ObjectId,boolean)#java/util/regex/Pattern/matcher(java.lang.CharSequence)
org/eclipse/jgit/util/ChangeIdUtil/insertId(java.lang.String,org.eclipse.jgit.lib.ObjectId,boolean)#java/lang/StringBuilder/toString()
org/eclipse/jgit/util/ChangeIdUtil/insertId(java.lang.String,org.eclipse.jgit.lib.ObjectId,boolean)#java/lang/String/indexOf(java.lang.String,int)
org/eclipse/jgit/util/ChangeIdUtil/insertId(java.lang.String,org.eclipse.jgit.lib.ObjectId,boolean)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/lib/RebaseTodoFile/writeRebaseTodoFile(java.lang.String,java.util.List,boolean)#java/io/OutputStream/close()
org/eclipse/jgit/lib/RebaseTodoFile/writeRebaseTodoFile(java.lang.String,java.util.List,boolean)#java/io/FileOutputStream/FileOutputStream(java.io.File,boolean)
org/eclipse/jgit/lib/RebaseTodoFile/writeRebaseTodoFile(java.lang.String,java.util.List,boolean)#java/io/File/File(java.io.File,java.lang.String)
org/eclipse/jgit/lib/RebaseTodoFile/writeRebaseTodoFile(java.lang.String,java.util.List,boolean)#java/util/Iterator/hasNext()
org/eclipse/jgit/lib/RebaseTodoFile/writeRebaseTodoFile(java.lang.String,java.util.List,boolean)#org/eclipse/jgit/lib/RebaseTodoLine$Action/toToken()
org/eclipse/jgit/lib/RebaseTodoFile/writeRebaseTodoFile(java.lang.String,java.util.List,boolean)#java/lang/StringBuilder/setLength(int)
org/eclipse/jgit/lib/RebaseTodoFile/writeRebaseTodoFile(java.lang.String,java.util.List,boolean)#java/util/Iterator/next()
org/eclipse/jgit/lib/RebaseTodoFile/writeRebaseTodoFile(java.lang.String,java.util.List,boolean)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/lib/RebaseTodoFile/writeRebaseTodoFile(java.lang.String,java.util.List,boolean)#java/lang/StringBuilder/append(char)
org/eclipse/jgit/lib/RebaseTodoFile/writeRebaseTodoFile(java.lang.String,java.util.List,boolean)#org/eclipse/jgit/lib/RebaseTodoLine$Action/equals(java.lang.Object)
org/eclipse/jgit/lib/RebaseTodoFile/writeRebaseTodoFile(java.lang.String,java.util.List,boolean)#java/util/List/iterator()
org/eclipse/jgit/lib/RebaseTodoFile/writeRebaseTodoFile(java.lang.String,java.util.List,boolean)#java/io/OutputStream/write(byte[])
org/eclipse/jgit/lib/RebaseTodoFile/writeRebaseTodoFile(java.lang.String,java.util.List,boolean)#java/lang/StringBuilder/toString()
org/eclipse/jgit/lib/RebaseTodoFile/writeRebaseTodoFile(java.lang.String,java.util.List,boolean)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/lib/RebaseTodoFile/writeRebaseTodoFile(java.lang.String,java.util.List,boolean)#java/lang/String/trim()
org/eclipse/jgit/patch/FileHeader/getScriptText(java.nio.charset.Charset[])#java/util/Iterator/hasNext()
org/eclipse/jgit/patch/FileHeader/getScriptText(java.nio.charset.Charset[])#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/patch/FileHeader/getScriptText(java.nio.charset.Charset[])#java/util/List/isEmpty()
org/eclipse/jgit/patch/FileHeader/getScriptText(java.nio.charset.Charset[])#java/util/Iterator/next()
org/eclipse/jgit/patch/FileHeader/getScriptText(java.nio.charset.Charset[])#java/lang/StringBuilder/StringBuilder(int)
org/eclipse/jgit/patch/FileHeader/getScriptText(java.nio.charset.Charset[])#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/patch/FileHeader/getScriptText(java.nio.charset.Charset[])#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/eclipse/jgit/patch/FileHeader/getScriptText(java.nio.charset.Charset[])#java/lang/StringBuilder/toString()
org/eclipse/jgit/patch/FileHeader/getScriptText(java.nio.charset.Charset[])#java/lang/Integer/valueOf(int)
org/eclipse/jgit/patch/FileHeader/getScriptText(java.nio.charset.Charset[])#java/util/List/get(int)
org/eclipse/jgit/patch/FileHeader/getScriptText(java.nio.charset.Charset[])#java/util/List/iterator()
org/eclipse/jgit/patch/FileHeader/getScriptText(java.nio.charset.Charset[])#java/lang/Math/min(int,int)
org/eclipse/jgit/transport/OpenSshConfig/lookup(java.lang.String)#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/OpenSshConfig/lookup(java.lang.String)#java/util/Map$Entry/getKey()
org/eclipse/jgit/transport/OpenSshConfig/lookup(java.lang.String)#java/util/Iterator/next()
org/eclipse/jgit/transport/OpenSshConfig/lookup(java.lang.String)#org/eclipse/jgit/transport/OpenSshConfig$Host/Host()
org/eclipse/jgit/transport/OpenSshConfig/lookup(java.lang.String)#java/util/Set/iterator()
org/eclipse/jgit/transport/OpenSshConfig/lookup(java.lang.String)#java/util/Map$Entry/getValue()
org/eclipse/jgit/transport/OpenSshConfig/lookup(java.lang.String)#java/util/Map/entrySet()
org/eclipse/jgit/transport/OpenSshConfig/lookup(java.lang.String)#org/eclipse/jgit/transport/OpenSshConfig$Host/copyFrom(org.eclipse.jgit.transport.OpenSshConfig$Host)
org/eclipse/jgit/transport/OpenSshConfig/lookup(java.lang.String)#java/util/Map/get(java.lang.Object)
org/eclipse/jgit/transport/OpenSshConfig/parse(java.io.InputStream)#java/util/ArrayList/ArrayList(int)
org/eclipse/jgit/transport/OpenSshConfig/parse(java.io.InputStream)#java/lang/String/split(java.lang.String)
org/eclipse/jgit/transport/OpenSshConfig/parse(java.io.InputStream)#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/OpenSshConfig/parse(java.io.InputStream)#java/lang/String/trim()
org/eclipse/jgit/transport/OpenSshConfig/parse(java.io.InputStream)#java/util/Iterator/next()
org/eclipse/jgit/transport/OpenSshConfig/parse(java.io.InputStream)#org/eclipse/jgit/transport/OpenSshConfig$Host/Host()
org/eclipse/jgit/transport/OpenSshConfig/parse(java.io.InputStream)#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/transport/OpenSshConfig/parse(java.io.InputStream)#java/util/List/iterator()
org/eclipse/jgit/transport/OpenSshConfig/parse(java.io.InputStream)#java/util/LinkedHashMap/LinkedHashMap()
org/eclipse/jgit/transport/OpenSshConfig/parse(java.io.InputStream)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/transport/OpenSshConfig/parse(java.io.InputStream)#java/lang/String/split(java.lang.String,int)
org/eclipse/jgit/transport/OpenSshConfig/parse(java.io.InputStream)#java/util/List/isEmpty()
org/eclipse/jgit/transport/OpenSshConfig/parse(java.io.InputStream)#java/lang/String/length()
org/eclipse/jgit/transport/OpenSshConfig/parse(java.io.InputStream)#java/util/Map/get(java.lang.Object)
org/eclipse/jgit/transport/OpenSshConfig/parse(java.io.InputStream)#java/io/InputStreamReader/InputStreamReader(java.io.InputStream)
org/eclipse/jgit/transport/OpenSshConfig/parse(java.io.InputStream)#java/util/List/clear()
org/eclipse/jgit/transport/OpenSshConfig/parse(java.io.InputStream)#java/lang/Integer/parseInt(java.lang.String)
org/eclipse/jgit/transport/OpenSshConfig/parse(java.io.InputStream)#java/util/List/add(java.lang.Object)
org/eclipse/jgit/transport/OpenSshConfig/parse(java.io.InputStream)#java/io/BufferedReader/BufferedReader(java.io.Reader)
org/eclipse/jgit/transport/OpenSshConfig/parse(java.io.InputStream)#java/io/BufferedReader/readLine()
org/eclipse/jgit/lib/CommitBuilder/build()#org/eclipse/jgit/lib/ObjectId/copyTo(java.io.OutputStream)
org/eclipse/jgit/lib/CommitBuilder/build()#java/lang/RuntimeException/RuntimeException(java.lang.Throwable)
org/eclipse/jgit/lib/CommitBuilder/build()#java/io/OutputStreamWriter/OutputStreamWriter(java.io.OutputStream,java.nio.charset.Charset)
org/eclipse/jgit/lib/CommitBuilder/build()#java/io/ByteArrayOutputStream/write(byte[])
org/eclipse/jgit/lib/CommitBuilder/build()#java/io/ByteArrayOutputStream/ByteArrayOutputStream()
org/eclipse/jgit/lib/CommitBuilder/build()#java/io/OutputStreamWriter/flush()
org/eclipse/jgit/lib/CommitBuilder/build()#java/io/OutputStreamWriter/write(java.lang.String)
org/eclipse/jgit/lib/CommitBuilder/build()#java/nio/charset/Charset/name()
org/eclipse/jgit/lib/CommitBuilder/build()#java/io/ByteArrayOutputStream/write(int)
org/eclipse/jgit/lib/CommitBuilder/build()#java/io/ByteArrayOutputStream/toByteArray()
org/eclipse/jgit/api/ResetCommand/call()#java/util/Collection/isEmpty()
org/eclipse/jgit/api/ResetCommand/call()#org/eclipse/jgit/lib/RepositoryState/equals(java.lang.Object)
org/eclipse/jgit/api/ResetCommand/call()#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/api/ResetCommand/call()#java/lang/StringBuilder/toString()
org/eclipse/jgit/api/ResetCommand/call()#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/api/ResetCommand/call()#org/eclipse/jgit/api/ResetCommand$ResetType/ordinal()
org/eclipse/jgit/api/ResetCommand/call()#org/eclipse/jgit/api/ResetCommand/setCallable(boolean)
org/eclipse/jgit/api/ResetCommand/call()#org/eclipse/jgit/api/ResetCommand/checkCallable()
org/eclipse/jgit/api/ResetCommand/call()#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/api/ResetCommand/call()#java/lang/UnsupportedOperationException/UnsupportedOperationException()
org/eclipse/jgit/transport/TransportProtocol/canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/TransportProtocol/canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)#org/eclipse/jgit/transport/TransportProtocol$URIishField/ordinal()
org/eclipse/jgit/transport/TransportProtocol/canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)#java/util/Set/addAll(java.util.Collection)
org/eclipse/jgit/transport/TransportProtocol/canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)#java/lang/String/length()
org/eclipse/jgit/transport/TransportProtocol/canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)#java/util/Set/isEmpty()
org/eclipse/jgit/transport/TransportProtocol/canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)#java/util/Set/contains(java.lang.Object)
org/eclipse/jgit/transport/TransportProtocol/canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)#java/util/Set/iterator()
org/eclipse/jgit/transport/TransportProtocol/canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)#java/util/EnumSet/copyOf(java.util.Collection)
org/eclipse/jgit/transport/TransportProtocol/canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)#java/util/Iterator/next()
org/eclipse/jgit/api/DeleteTagCommand/call()#java/util/Iterator/hasNext()
org/eclipse/jgit/api/DeleteTagCommand/call()#java/io/IOException/getMessage()
org/eclipse/jgit/api/DeleteTagCommand/call()#java/util/Iterator/next()
org/eclipse/jgit/api/DeleteTagCommand/call()#org/eclipse/jgit/lib/RefUpdate$Result/name()
org/eclipse/jgit/api/DeleteTagCommand/call()#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/api/DeleteTagCommand/call()#java/util/Set/iterator()
org/eclipse/jgit/api/DeleteTagCommand/call()#java/util/List/add(java.lang.Object)
org/eclipse/jgit/api/DeleteTagCommand/call()#org/eclipse/jgit/lib/RefUpdate$Result/ordinal()
org/eclipse/jgit/api/DeleteTagCommand/call()#java/util/ArrayList/ArrayList()
org/eclipse/jgit/api/DeleteTagCommand/call()#org/eclipse/jgit/api/DeleteTagCommand/checkCallable()
org/eclipse/jgit/api/DeleteTagCommand/call()#java/util/Set/isEmpty()
org/eclipse/jgit/api/DeleteTagCommand/call()#org/eclipse/jgit/api/DeleteTagCommand/setCallable(boolean)
org/eclipse/jgit/internal/storage/file/ReflogWriter/log(java.lang.String,byte[])#org/eclipse/jgit/lib/StoredConfig/get(org.eclipse.jgit.lib.Config$SectionParser)
org/eclipse/jgit/internal/storage/file/ReflogWriter/log(java.lang.String,byte[])#java/io/IOException/IOException(java.lang.String)
org/eclipse/jgit/internal/storage/file/ReflogWriter/log(java.lang.String,byte[])#java/io/File/isDirectory()
org/eclipse/jgit/internal/storage/file/ReflogWriter/log(java.lang.String,byte[])#java/io/File/exists()
org/eclipse/jgit/internal/storage/file/ReflogWriter/log(java.lang.String,byte[])#java/nio/channels/FileChannel/force(boolean)
org/eclipse/jgit/internal/storage/file/ReflogWriter/log(java.lang.String,byte[])#java/io/File/mkdirs()
org/eclipse/jgit/internal/storage/file/ReflogWriter/log(java.lang.String,byte[])#java/io/FileOutputStream/FileOutputStream(java.io.File,boolean)
org/eclipse/jgit/internal/storage/file/ReflogWriter/log(java.lang.String,byte[])#java/nio/ByteBuffer/remaining()
org/eclipse/jgit/internal/storage/file/ReflogWriter/log(java.lang.String,byte[])#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/internal/storage/file/ReflogWriter/log(java.lang.String,byte[])#java/io/File/isFile()
org/eclipse/jgit/internal/storage/file/ReflogWriter/log(java.lang.String,byte[])#java/nio/ByteBuffer/wrap(byte[])
org/eclipse/jgit/internal/storage/file/ReflogWriter/log(java.lang.String,byte[])#java/io/FileOutputStream/write(byte[])
org/eclipse/jgit/internal/storage/file/ReflogWriter/log(java.lang.String,byte[])#java/nio/channels/FileChannel/write(java.nio.ByteBuffer)
org/eclipse/jgit/internal/storage/file/ReflogWriter/log(java.lang.String,byte[])#java/io/FileOutputStream/close()
org/eclipse/jgit/internal/storage/file/ReflogWriter/log(java.lang.String,byte[])#java/io/FileOutputStream/getChannel()
org/eclipse/jgit/internal/storage/file/ReflogWriter/log(java.lang.String,byte[])#java/io/File/getParentFile()
org/eclipse/jgit/api/BlameCommand/getRawText(java.io.File)#org/eclipse/jgit/lib/StoredConfig/get(org.eclipse.jgit.lib.Config$SectionParser)
org/eclipse/jgit/api/BlameCommand/getRawText(java.io.File)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/api/BlameCommand/getRawText(java.io.File)#org/eclipse/jgit/api/BlameCommand/getRepository()
org/eclipse/jgit/api/BlameCommand/getRawText(java.io.File)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/api/BlameCommand/getRawText(java.io.File)#java/lang/StringBuilder/append(java.lang.Object)
org/eclipse/jgit/api/BlameCommand/getRawText(java.io.File)#java/lang/StringBuilder/toString()
org/eclipse/jgit/api/BlameCommand/getRawText(java.io.File)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/eclipse/jgit/api/BlameCommand/getRawText(java.io.File)#java/io/File/length()
org/eclipse/jgit/api/BlameCommand/getRawText(java.io.File)#org/eclipse/jgit/lib/CoreConfig$AutoCRLF/ordinal()
org/eclipse/jgit/api/BlameCommand/getRawText(java.io.File)#java/io/FileInputStream/FileInputStream(java.io.File)
org/eclipse/jgit/api/PushCommand/call()#java/util/ArrayList/ArrayList(int)
org/eclipse/jgit/api/PushCommand/call()#org/eclipse/jgit/api/PushCommand/configure(org.eclipse.jgit.transport.Transport)
org/eclipse/jgit/api/PushCommand/call()#java/util/List/isEmpty()
org/eclipse/jgit/api/PushCommand/call()#java/util/List/size()
org/eclipse/jgit/api/PushCommand/call()#java/util/Iterator/next()
org/eclipse/jgit/api/PushCommand/call()#java/util/List/add(java.lang.Object)
org/eclipse/jgit/api/PushCommand/call()#java/util/List/get(int)
org/eclipse/jgit/api/PushCommand/call()#java/util/Iterator/hasNext()
org/eclipse/jgit/api/PushCommand/call()#org/eclipse/jgit/errors/TransportException/getMessage()
org/eclipse/jgit/api/PushCommand/call()#java/util/List/addAll(java.util.Collection)
org/eclipse/jgit/api/PushCommand/call()#java/util/ArrayList/add(java.lang.Object)
org/eclipse/jgit/api/PushCommand/call()#org/eclipse/jgit/api/PushCommand/checkCallable()
org/eclipse/jgit/api/PushCommand/call()#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/api/PushCommand/call()#java/util/List/iterator()
org/eclipse/jgit/api/PushCommand/call()#java/util/List/set(int,java.lang.Object)
org/eclipse/jgit/lib/RefWriter/writeInfoRefs()#org/eclipse/jgit/lib/ObjectId/copyTo(char[],java.io.Writer)
org/eclipse/jgit/lib/RefWriter/writeInfoRefs()#java/io/StringWriter/write(java.lang.String)
org/eclipse/jgit/lib/RefWriter/writeInfoRefs()#java/util/Iterator/hasNext()
org/eclipse/jgit/lib/RefWriter/writeInfoRefs()#java/io/StringWriter/write(int)
org/eclipse/jgit/lib/RefWriter/writeInfoRefs()#java/lang/String/equals(java.lang.Object)
org/eclipse/jgit/lib/RefWriter/writeInfoRefs()#java/io/StringWriter/StringWriter()
org/eclipse/jgit/lib/RefWriter/writeInfoRefs()#java/io/StringWriter/toString()
org/eclipse/jgit/lib/RefWriter/writeInfoRefs()#java/util/Collection/iterator()
org/eclipse/jgit/lib/RefWriter/writeInfoRefs()#java/util/Iterator/next()
org/eclipse/jgit/lib/RefWriter/writePackedRefs()#org/eclipse/jgit/lib/ObjectId/copyTo(char[],java.io.Writer)
org/eclipse/jgit/lib/RefWriter/writePackedRefs()#java/io/StringWriter/write(java.lang.String)
org/eclipse/jgit/lib/RefWriter/writePackedRefs()#java/util/Iterator/hasNext()
org/eclipse/jgit/lib/RefWriter/writePackedRefs()#java/io/StringWriter/write(int)
org/eclipse/jgit/lib/RefWriter/writePackedRefs()#java/io/StringWriter/StringWriter()
org/eclipse/jgit/lib/RefWriter/writePackedRefs()#java/io/StringWriter/toString()
org/eclipse/jgit/lib/RefWriter/writePackedRefs()#org/eclipse/jgit/lib/Ref$Storage/isPacked()
org/eclipse/jgit/lib/RefWriter/writePackedRefs()#java/util/Iterator/next()
org/eclipse/jgit/lib/RefWriter/writePackedRefs()#java/util/Collection/iterator()
org/eclipse/jgit/util/GitDateParser/parse_relative(java.lang.String,java.util.Calendar)#java/util/Calendar/setTimeInMillis(long)
org/eclipse/jgit/util/GitDateParser/parse_relative(java.lang.String,java.util.Calendar)#java/util/Calendar/set(int,int)
org/eclipse/jgit/util/GitDateParser/parse_relative(java.lang.String,java.util.Calendar)#java/util/Calendar/add(int,int)
org/eclipse/jgit/util/GitDateParser/parse_relative(java.lang.String,java.util.Calendar)#java/util/GregorianCalendar/GregorianCalendar(java.util.TimeZone,java.util.Locale)
org/eclipse/jgit/util/GitDateParser/parse_relative(java.lang.String,java.util.Calendar)#java/util/Calendar/getTime()
org/eclipse/jgit/util/GitDateParser/parse_relative(java.lang.String,java.util.Calendar)#java/lang/String/equals(java.lang.Object)
org/eclipse/jgit/util/GitDateParser/parse_relative(java.lang.String,java.util.Calendar)#java/lang/String/split(java.lang.String)
org/eclipse/jgit/util/GitDateParser/parse_relative(java.lang.String,java.util.Calendar)#java/util/Calendar/clone()
org/eclipse/jgit/util/GitDateParser/parse_relative(java.lang.String,java.util.Calendar)#java/util/Date/Date(long)
org/eclipse/jgit/util/GitDateParser/parse_relative(java.lang.String,java.util.Calendar)#java/lang/Integer/parseInt(java.lang.String)
org/eclipse/jgit/transport/HttpAuthMethod/Digest/uri(java.net.URL)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/HttpAuthMethod/Digest/uri(java.net.URL)#java/net/URL/getProtocol()
org/eclipse/jgit/transport/HttpAuthMethod/Digest/uri(java.net.URL)#java/lang/StringBuilder/append(int)
org/eclipse/jgit/transport/HttpAuthMethod/Digest/uri(java.net.URL)#java/net/URL/getQuery()
org/eclipse/jgit/transport/HttpAuthMethod/Digest/uri(java.net.URL)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/HttpAuthMethod/Digest/uri(java.net.URL)#java/net/URL/getPath()
org/eclipse/jgit/transport/HttpAuthMethod/Digest/uri(java.net.URL)#java/lang/StringBuilder/append(char)
org/eclipse/jgit/transport/HttpAuthMethod/Digest/uri(java.net.URL)#java/net/URL/getHost()
org/eclipse/jgit/transport/HttpAuthMethod/Digest/uri(java.net.URL)#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/HttpAuthMethod/Digest/uri(java.net.URL)#java/lang/String/equals(java.lang.Object)
org/eclipse/jgit/transport/HttpAuthMethod/Digest/uri(java.net.URL)#java/net/URL/getPort()
org/eclipse/jgit/transport/HttpAuthMethod/Digest/parse(java.lang.String)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/transport/HttpAuthMethod/Digest/parse(java.lang.String)#java/util/Collections/emptyMap()
org/eclipse/jgit/transport/HttpAuthMethod/Digest/parse(java.lang.String)#java/lang/Character/isWhitespace(char)
org/eclipse/jgit/transport/HttpAuthMethod/Digest/parse(java.lang.String)#java/lang/String/charAt(int)
org/eclipse/jgit/transport/HttpAuthMethod/Digest/parse(java.lang.String)#java/lang/String/length()
org/eclipse/jgit/transport/HttpAuthMethod/Digest/parse(java.lang.String)#java/util/HashMap/HashMap()
org/eclipse/jgit/transport/HttpAuthMethod/Digest/parse(java.lang.String)#java/lang/String/substring(int,int)
org/eclipse/jgit/transport/HttpAuthMethod/Digest/parse(java.lang.String)#java/lang/String/indexOf(int,int)
org/eclipse/jgit/transport/HttpAuthMethod/Digest/parse(java.lang.String)#java/lang/Math/min(int,int)
org/eclipse/jgit/transport/HttpAuthMethod/Digest/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#org/eclipse/jgit/transport/HttpAuthMethod$Type/getSchemeName()
org/eclipse/jgit/transport/HttpAuthMethod/Digest/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/HttpAuthMethod/Digest/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#org/eclipse/jgit/transport/HttpAuthMethod$Digest/H(java.lang.String)
org/eclipse/jgit/transport/HttpAuthMethod/Digest/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#java/util/Map/get(java.lang.Object)
org/eclipse/jgit/transport/HttpAuthMethod/Digest/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#java/lang/String/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/transport/HttpAuthMethod/Digest/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#java/util/Iterator/next()
org/eclipse/jgit/transport/HttpAuthMethod/Digest/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#org/eclipse/jgit/transport/HttpAuthMethod$Digest/KD(java.lang.String,java.lang.String)
org/eclipse/jgit/transport/HttpAuthMethod/Digest/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/HttpAuthMethod/Digest/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#java/util/Set/iterator()
org/eclipse/jgit/transport/HttpAuthMethod/Digest/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#java/util/Map/containsKey(java.lang.Object)
org/eclipse/jgit/transport/HttpAuthMethod/Digest/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#java/lang/StringBuilder/append(char)
org/eclipse/jgit/transport/HttpAuthMethod/Digest/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#java/lang/Integer/valueOf(int)
org/eclipse/jgit/transport/HttpAuthMethod/Digest/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#java/lang/StringBuilder/length()
org/eclipse/jgit/transport/HttpAuthMethod/Digest/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#java/util/Map/entrySet()
org/eclipse/jgit/transport/HttpAuthMethod/Digest/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#java/util/LinkedHashMap/LinkedHashMap()
org/eclipse/jgit/transport/HttpAuthMethod/Digest/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/HttpAuthMethod/Digest/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#org/eclipse/jgit/transport/HttpAuthMethod$Digest/uri(java.net.URL)
org/eclipse/jgit/transport/HttpAuthMethod/Digest/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/transport/HttpAuthMethod/Digest/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/HttpAuthMethod/Digest/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#java/util/Map$Entry/getKey()
org/eclipse/jgit/transport/HttpAuthMethod/Digest/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#java/lang/String/equals(java.lang.Object)
org/eclipse/jgit/transport/HttpAuthMethod/Digest/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#java/lang/StringBuilder/append(java.lang.Object)
org/eclipse/jgit/transport/HttpAuthMethod/Digest/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#java/util/Map$Entry/getValue()
org/eclipse/jgit/api/ApplyCommand/call()#java/util/List/isEmpty()
org/eclipse/jgit/api/ApplyCommand/call()#java/util/Iterator/next()
org/eclipse/jgit/api/ApplyCommand/call()#java/io/FileOutputStream/close()
org/eclipse/jgit/api/ApplyCommand/call()#java/util/Iterator/hasNext()
org/eclipse/jgit/api/ApplyCommand/call()#java/io/IOException/getMessage()
org/eclipse/jgit/api/ApplyCommand/call()#org/eclipse/jgit/api/ApplyCommand/setCallable(boolean)
org/eclipse/jgit/api/ApplyCommand/call()#org/eclipse/jgit/patch/FileHeader/getChangeType()
org/eclipse/jgit/api/ApplyCommand/call()#org/eclipse/jgit/diff/DiffEntry$ChangeType/ordinal()
org/eclipse/jgit/api/ApplyCommand/call()#org/eclipse/jgit/api/ApplyCommand/checkCallable()
org/eclipse/jgit/api/ApplyCommand/call()#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/api/ApplyCommand/call()#java/io/InputStream/close()
org/eclipse/jgit/api/ApplyCommand/call()#java/io/File/renameTo(java.io.File)
org/eclipse/jgit/api/ApplyCommand/call()#org/eclipse/jgit/patch/FileHeader/getNewPath()
org/eclipse/jgit/api/ApplyCommand/call()#java/io/FileOutputStream/write(byte[])
org/eclipse/jgit/api/ApplyCommand/call()#java/util/List/iterator()
org/eclipse/jgit/api/ApplyCommand/call()#org/eclipse/jgit/patch/FileHeader/getOldPath()
org/eclipse/jgit/api/ApplyCommand/call()#java/io/File/delete()
org/eclipse/jgit/api/ApplyCommand/call()#java/io/FileOutputStream/FileOutputStream(java.io.File)
org/eclipse/jgit/api/ApplyCommand/apply(java.io.File,org.eclipse.jgit.patch.FileHeader)#java/util/ArrayList/ArrayList(int)
org/eclipse/jgit/api/ApplyCommand/apply(java.io.File,org.eclipse.jgit.patch.FileHeader)#java/lang/String/equals(java.lang.Object)
org/eclipse/jgit/api/ApplyCommand/apply(java.io.File,org.eclipse.jgit.patch.FileHeader)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/api/ApplyCommand/apply(java.io.File,org.eclipse.jgit.patch.FileHeader)#java/lang/StringBuilder/length()
org/eclipse/jgit/api/ApplyCommand/apply(java.io.File,org.eclipse.jgit.patch.FileHeader)#java/util/List/add(int,java.lang.Object)
org/eclipse/jgit/api/ApplyCommand/apply(java.io.File,org.eclipse.jgit.patch.FileHeader)#java/lang/StringBuilder/toString()
org/eclipse/jgit/api/ApplyCommand/apply(java.io.File,org.eclipse.jgit.patch.FileHeader)#java/util/ArrayList/ArrayList(java.util.Collection)
org/eclipse/jgit/api/ApplyCommand/apply(java.io.File,org.eclipse.jgit.patch.FileHeader)#java/util/Iterator/hasNext()
org/eclipse/jgit/api/ApplyCommand/apply(java.io.File,org.eclipse.jgit.patch.FileHeader)#java/util/List/remove(int)
org/eclipse/jgit/api/ApplyCommand/apply(java.io.File,org.eclipse.jgit.patch.FileHeader)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/api/ApplyCommand/apply(java.io.File,org.eclipse.jgit.patch.FileHeader)#java/lang/String/charAt(int)
org/eclipse/jgit/api/ApplyCommand/apply(java.io.File,org.eclipse.jgit.patch.FileHeader)#java/util/List/size()
org/eclipse/jgit/api/ApplyCommand/apply(java.io.File,org.eclipse.jgit.patch.FileHeader)#java/io/FileWriter/close()
org/eclipse/jgit/api/ApplyCommand/apply(java.io.File,org.eclipse.jgit.patch.FileHeader)#java/util/Iterator/next()
org/eclipse/jgit/api/ApplyCommand/apply(java.io.File,org.eclipse.jgit.patch.FileHeader)#java/io/FileWriter/write(java.lang.String)
org/eclipse/jgit/api/ApplyCommand/apply(java.io.File,org.eclipse.jgit.patch.FileHeader)#java/lang/StringBuilder/deleteCharAt(int)
org/eclipse/jgit/api/ApplyCommand/apply(java.io.File,org.eclipse.jgit.patch.FileHeader)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/api/ApplyCommand/apply(java.io.File,org.eclipse.jgit.patch.FileHeader)#java/lang/String/substring(int)
org/eclipse/jgit/api/ApplyCommand/apply(java.io.File,org.eclipse.jgit.patch.FileHeader)#java/util/List/add(java.lang.Object)
org/eclipse/jgit/api/ApplyCommand/apply(java.io.File,org.eclipse.jgit.patch.FileHeader)#java/lang/StringBuilder/append(char)
org/eclipse/jgit/api/ApplyCommand/apply(java.io.File,org.eclipse.jgit.patch.FileHeader)#java/util/List/get(int)
org/eclipse/jgit/api/ApplyCommand/apply(java.io.File,org.eclipse.jgit.patch.FileHeader)#java/util/List/iterator()
org/eclipse/jgit/api/ApplyCommand/apply(java.io.File,org.eclipse.jgit.patch.FileHeader)#java/lang/String/getBytes()
org/eclipse/jgit/api/ApplyCommand/apply(java.io.File,org.eclipse.jgit.patch.FileHeader)#java/io/FileWriter/FileWriter(java.io.File)
org/eclipse/jgit/api/CherryPickCommand/call()#java/util/Iterator/hasNext()
org/eclipse/jgit/api/CherryPickCommand/call()#org/eclipse/jgit/revwalk/RevTree/getId()
org/eclipse/jgit/api/CherryPickCommand/call()#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/api/CherryPickCommand/call()#java/util/Iterator/next()
org/eclipse/jgit/api/CherryPickCommand/call()#org/eclipse/jgit/merge/ResolveMerger/setBase(org.eclipse.jgit.lib.AnyObjectId)
org/eclipse/jgit/api/CherryPickCommand/call()#java/util/LinkedList/LinkedList()
org/eclipse/jgit/api/CherryPickCommand/call()#org/eclipse/jgit/api/CherryPickCommand/checkCallable()
org/eclipse/jgit/api/CherryPickCommand/call()#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/api/CherryPickCommand/call()#org/eclipse/jgit/api/CherryPickCommand/getRepository()
org/eclipse/jgit/api/CherryPickCommand/call()#org/eclipse/jgit/merge/ResolveMerger/merge(org.eclipse.jgit.lib.AnyObjectId[])
org/eclipse/jgit/api/CherryPickCommand/call()#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/api/CherryPickCommand/call()#java/util/List/add(java.lang.Object)
org/eclipse/jgit/api/CherryPickCommand/call()#java/util/List/iterator()
org/eclipse/jgit/api/CherryPickCommand/call()#org/eclipse/jgit/lib/ObjectId/abbreviate(int)
org/eclipse/jgit/api/CherryPickCommand/call()#java/lang/StringBuilder/toString()
org/eclipse/jgit/api/CherryPickCommand/call()#org/eclipse/jgit/revwalk/RevCommit/getId()
org/eclipse/jgit/dircache/DirCacheEditor/applyEdits()#java/util/Iterator/hasNext()
org/eclipse/jgit/dircache/DirCacheEditor/applyEdits()#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/dircache/DirCacheEditor/applyEdits()#org/eclipse/jgit/dircache/DirCacheEditor$PathEdit/apply(org.eclipse.jgit.dircache.DirCacheEntry)
org/eclipse/jgit/dircache/DirCacheEditor/applyEdits()#java/util/Iterator/next()
org/eclipse/jgit/dircache/DirCacheEditor/applyEdits()#java/util/Collections/sort(java.util.List,java.util.Comparator)
org/eclipse/jgit/dircache/DirCacheEditor/applyEdits()#org/eclipse/jgit/dircache/DirCacheEditor/fastKeep(int,int)
org/eclipse/jgit/dircache/DirCacheEditor/applyEdits()#org/eclipse/jgit/dircache/DirCacheEditor/fastAdd(org.eclipse.jgit.dircache.DirCacheEntry)
org/eclipse/jgit/dircache/DirCacheEditor/applyEdits()#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/eclipse/jgit/dircache/DirCacheEditor/applyEdits()#java/util/List/iterator()
org/eclipse/jgit/dircache/DirCacheEditor/applyEdits()#java/lang/Math/min(int,int)
org/eclipse/jgit/gitrepo/RepoCommand/CopyFile/copy()#java/io/FileInputStream/getChannel()
org/eclipse/jgit/gitrepo/RepoCommand/CopyFile/copy()#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/gitrepo/RepoCommand/CopyFile/copy()#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/gitrepo/RepoCommand/CopyFile/copy()#java/io/FileInputStream/close()
org/eclipse/jgit/gitrepo/RepoCommand/CopyFile/copy()#java/io/FileOutputStream/FileOutputStream(java.io.File)
org/eclipse/jgit/gitrepo/RepoCommand/CopyFile/copy()#java/io/File/File(java.io.File,java.lang.String)
org/eclipse/jgit/gitrepo/RepoCommand/CopyFile/copy()#java/nio/channels/FileChannel/transferFrom(java.nio.channels.ReadableByteChannel,long,long)
org/eclipse/jgit/gitrepo/RepoCommand/CopyFile/copy()#java/nio/channels/FileChannel/size()
org/eclipse/jgit/gitrepo/RepoCommand/CopyFile/copy()#java/io/FileInputStream/FileInputStream(java.io.File)
org/eclipse/jgit/gitrepo/RepoCommand/CopyFile/copy()#java/io/FileOutputStream/close()
org/eclipse/jgit/gitrepo/RepoCommand/CopyFile/copy()#java/lang/StringBuilder/toString()
org/eclipse/jgit/gitrepo/RepoCommand/CopyFile/copy()#java/io/FileOutputStream/getChannel()
org/eclipse/jgit/internal/storage/file/FileRepository/create(boolean)#java/lang/IllegalStateException/IllegalStateException(java.lang.String)
org/eclipse/jgit/internal/storage/file/FileRepository/create(boolean)#java/io/File/File(java.io.File,java.lang.String)
org/eclipse/jgit/internal/storage/file/FileRepository/create(boolean)#java/lang/String/toLowerCase()
org/eclipse/jgit/internal/storage/file/FileRepository/create(boolean)#java/io/File/createTempFile(java.lang.String,java.lang.String,java.io.File)
org/eclipse/jgit/internal/storage/file/FileRepository/create(boolean)#java/io/File/exists()
org/eclipse/jgit/internal/storage/file/FileRepository/create(boolean)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/internal/storage/file/FileRepository/create(boolean)#org/eclipse/jgit/internal/storage/file/FileRepository/isBare()
org/eclipse/jgit/internal/storage/file/FileRepository/create(boolean)#org/eclipse/jgit/storage/file/FileBasedConfig/setBoolean(java.lang.String,java.lang.String,java.lang.String,boolean)
org/eclipse/jgit/internal/storage/file/FileRepository/create(boolean)#org/eclipse/jgit/storage/file/FileBasedConfig/setInt(java.lang.String,java.lang.String,java.lang.String,int)
org/eclipse/jgit/internal/storage/file/FileRepository/create(boolean)#org/eclipse/jgit/storage/file/FileBasedConfig/setString(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
org/eclipse/jgit/internal/storage/file/FileRepository/create(boolean)#org/eclipse/jgit/internal/storage/file/FileRepository/getFS()
org/eclipse/jgit/internal/storage/file/FileRepository/create(boolean)#org/eclipse/jgit/storage/file/FileBasedConfig/getEnum(java.lang.String,java.lang.String,java.lang.String,java.lang.Enum)
org/eclipse/jgit/internal/storage/file/FileRepository/create(boolean)#org/eclipse/jgit/internal/storage/file/FileRepository/updateRef(java.lang.String)
org/eclipse/jgit/internal/storage/file/FileRepository/create(boolean)#org/eclipse/jgit/internal/storage/file/FileRepository/getDirectory()
org/eclipse/jgit/internal/storage/file/FileRepository/create(boolean)#org/eclipse/jgit/lib/CoreConfig$SymLinks/name()
org/eclipse/jgit/internal/storage/dfs/DfsInserter/insert(int,long,java.io.InputStream)#java/security/MessageDigest/digest()
org/eclipse/jgit/internal/storage/dfs/DfsInserter/insert(int,long,java.io.InputStream)#org/eclipse/jgit/internal/storage/dfs/DfsInserter/digest()
org/eclipse/jgit/internal/storage/dfs/DfsInserter/insert(int,long,java.io.InputStream)#java/util/zip/DeflaterOutputStream/finish()
org/eclipse/jgit/internal/storage/dfs/DfsInserter/insert(int,long,java.io.InputStream)#java/io/EOFException/EOFException()
org/eclipse/jgit/internal/storage/dfs/DfsInserter/insert(int,long,java.io.InputStream)#java/io/InputStream/read(byte[],int,int)
org/eclipse/jgit/internal/storage/dfs/DfsInserter/insert(int,long,java.io.InputStream)#java/lang/Math/min(long,long)
org/eclipse/jgit/internal/storage/dfs/DfsInserter/insert(int,long,java.io.InputStream)#java/security/MessageDigest/update(byte)
org/eclipse/jgit/internal/storage/dfs/DfsInserter/insert(int,long,java.io.InputStream)#java/util/zip/DeflaterOutputStream/write(byte[],int,int)
org/eclipse/jgit/internal/storage/dfs/DfsInserter/insert(int,long,java.io.InputStream)#java/security/MessageDigest/update(byte[],int,int)
org/eclipse/jgit/internal/storage/dfs/DfsInserter/insert(int,long,java.io.InputStream)#java/security/MessageDigest/update(byte[])
org/eclipse/jgit/util/FS_Win32_Cygwin/runInShell(java.lang.String,java.lang.String[])#java/util/ArrayList/ArrayList(int)
org/eclipse/jgit/util/FS_Win32_Cygwin/runInShell(java.lang.String,java.lang.String[])#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/util/FS_Win32_Cygwin/runInShell(java.lang.String,java.lang.String[])#java/util/Arrays/asList(java.lang.Object[])
org/eclipse/jgit/util/FS_Win32_Cygwin/runInShell(java.lang.String,java.lang.String[])#java/util/List/addAll(java.util.Collection)
org/eclipse/jgit/util/FS_Win32_Cygwin/runInShell(java.lang.String,java.lang.String[])#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/util/FS_Win32_Cygwin/runInShell(java.lang.String,java.lang.String[])#java/lang/ProcessBuilder/command(java.util.List)
org/eclipse/jgit/util/FS_Win32_Cygwin/runInShell(java.lang.String,java.lang.String[])#java/lang/StringBuilder/toString()
org/eclipse/jgit/util/FS_Win32_Cygwin/runInShell(java.lang.String,java.lang.String[])#java/util/List/add(java.lang.Object)
org/eclipse/jgit/util/FS_Win32_Cygwin/runInShell(java.lang.String,java.lang.String[])#java/lang/ProcessBuilder/ProcessBuilder(java.lang.String[])
org/eclipse/jgit/util/FS_POSIX/runInShell(java.lang.String,java.lang.String[])#java/util/ArrayList/ArrayList(int)
org/eclipse/jgit/util/FS_POSIX/runInShell(java.lang.String,java.lang.String[])#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/util/FS_POSIX/runInShell(java.lang.String,java.lang.String[])#java/util/Arrays/asList(java.lang.Object[])
org/eclipse/jgit/util/FS_POSIX/runInShell(java.lang.String,java.lang.String[])#java/util/List/addAll(java.util.Collection)
org/eclipse/jgit/util/FS_POSIX/runInShell(java.lang.String,java.lang.String[])#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/util/FS_POSIX/runInShell(java.lang.String,java.lang.String[])#java/lang/ProcessBuilder/command(java.util.List)
org/eclipse/jgit/util/FS_POSIX/runInShell(java.lang.String,java.lang.String[])#java/lang/StringBuilder/toString()
org/eclipse/jgit/util/FS_POSIX/runInShell(java.lang.String,java.lang.String[])#java/util/List/add(java.lang.Object)
org/eclipse/jgit/util/FS_POSIX/runInShell(java.lang.String,java.lang.String[])#java/lang/ProcessBuilder/ProcessBuilder(java.lang.String[])
org/eclipse/jgit/lib/Repository/shortenRemoteBranchName(java.lang.String)#java/util/Iterator/hasNext()
org/eclipse/jgit/lib/Repository/shortenRemoteBranchName(java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/lib/Repository/shortenRemoteBranchName(java.lang.String)#java/lang/String/length()
org/eclipse/jgit/lib/Repository/shortenRemoteBranchName(java.lang.String)#java/util/Iterator/next()
org/eclipse/jgit/lib/Repository/shortenRemoteBranchName(java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/lib/Repository/shortenRemoteBranchName(java.lang.String)#java/util/Set/iterator()
org/eclipse/jgit/lib/Repository/shortenRemoteBranchName(java.lang.String)#java/lang/String/substring(int)
org/eclipse/jgit/lib/Repository/shortenRemoteBranchName(java.lang.String)#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/lib/Repository/shortenRemoteBranchName(java.lang.String)#java/lang/StringBuilder/toString()
org/eclipse/jgit/lib/Repository/resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)#java/lang/String/String(char[],int,int)
org/eclipse/jgit/lib/Repository/resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)#java/util/Iterator/hasNext()
org/eclipse/jgit/lib/Repository/resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)#java/lang/String/length()
org/eclipse/jgit/lib/Repository/resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)#java/util/List/iterator()
org/eclipse/jgit/lib/Repository/resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/lib/Repository/resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)#java/lang/Character/isDigit(char)
org/eclipse/jgit/lib/Repository/resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)#java/util/Iterator/next()
org/eclipse/jgit/lib/Repository/resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)#java/lang/String/equals(java.lang.Object)
org/eclipse/jgit/lib/Repository/resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)#org/eclipse/jgit/lib/StoredConfig/getString(java.lang.String,java.lang.String,java.lang.String)
org/eclipse/jgit/lib/Repository/resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/lib/Repository/resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)#org/eclipse/jgit/revwalk/RevObject/copy()
org/eclipse/jgit/lib/Repository/resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)#org/eclipse/jgit/revwalk/RevTree/copy()
org/eclipse/jgit/lib/Repository/resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)#java/lang/String/substring(int)
org/eclipse/jgit/lib/Repository/resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)#java/lang/Integer/parseInt(java.lang.String)
org/eclipse/jgit/lib/Repository/resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)#java/lang/String/toCharArray()
org/eclipse/jgit/lib/Repository/resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)#java/lang/String/matches(java.lang.String)
org/eclipse/jgit/lib/Repository/resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)#java/lang/StringBuilder/toString()
org/eclipse/jgit/lib/Repository/getAllRefsByPeeledObjectId()#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/lib/Repository/getAllRefsByPeeledObjectId()#java/util/Iterator/hasNext()
org/eclipse/jgit/lib/Repository/getAllRefsByPeeledObjectId()#java/util/Map/size()
org/eclipse/jgit/lib/Repository/getAllRefsByPeeledObjectId()#java/util/Map/values()
org/eclipse/jgit/lib/Repository/getAllRefsByPeeledObjectId()#java/util/HashMap/HashMap(int)
org/eclipse/jgit/lib/Repository/getAllRefsByPeeledObjectId()#java/util/Collections/singleton(java.lang.Object)
org/eclipse/jgit/lib/Repository/getAllRefsByPeeledObjectId()#java/util/Collection/iterator()
org/eclipse/jgit/lib/Repository/getAllRefsByPeeledObjectId()#java/util/Set/add(java.lang.Object)
org/eclipse/jgit/lib/Repository/getAllRefsByPeeledObjectId()#java/util/HashSet/HashSet(java.util.Collection)
org/eclipse/jgit/lib/Repository/getAllRefsByPeeledObjectId()#java/util/Set/size()
org/eclipse/jgit/lib/Repository/getAllRefsByPeeledObjectId()#java/util/Iterator/next()
org/eclipse/jgit/internal/storage/dfs/InMemoryRepository/MemRefDatabase/scanAllRefs()#java/util/concurrent/ConcurrentMap/values()
org/eclipse/jgit/internal/storage/dfs/InMemoryRepository/MemRefDatabase/scanAllRefs()#java/util/Iterator/hasNext()
org/eclipse/jgit/internal/storage/dfs/InMemoryRepository/MemRefDatabase/scanAllRefs()#org/eclipse/jgit/util/RefList$Builder/add(org.eclipse.jgit.lib.Ref)
org/eclipse/jgit/internal/storage/dfs/InMemoryRepository/MemRefDatabase/scanAllRefs()#java/util/Iterator/next()
org/eclipse/jgit/internal/storage/dfs/InMemoryRepository/MemRefDatabase/scanAllRefs()#org/eclipse/jgit/internal/storage/dfs/DfsRefDatabase$RefCache/RefCache(org.eclipse.jgit.util.RefList,org.eclipse.jgit.util.RefList)
org/eclipse/jgit/internal/storage/dfs/InMemoryRepository/MemRefDatabase/scanAllRefs()#org/eclipse/jgit/util/RefList$Builder/sort()
org/eclipse/jgit/internal/storage/dfs/InMemoryRepository/MemRefDatabase/scanAllRefs()#java/util/Collection/iterator()
org/eclipse/jgit/internal/storage/dfs/InMemoryRepository/MemRefDatabase/scanAllRefs()#org/eclipse/jgit/util/RefList$Builder/Builder()
org/eclipse/jgit/internal/storage/dfs/InMemoryRepository/MemRefDatabase/scanAllRefs()#org/eclipse/jgit/util/RefList$Builder/toRefList()
org/eclipse/jgit/internal/storage/dfs/DfsInserter/Reader/open(org.eclipse.jgit.lib.AnyObjectId,int)#org/eclipse/jgit/internal/storage/dfs/DfsInserter$Reader/inflate(org.eclipse.jgit.transport.PackedObjectInfo,long,int)
org/eclipse/jgit/internal/storage/dfs/DfsInserter/Reader/open(org.eclipse.jgit.lib.AnyObjectId,int)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/internal/storage/dfs/DfsInserter/Reader/open(org.eclipse.jgit.lib.AnyObjectId,int)#org/eclipse/jgit/internal/storage/dfs/DfsInserter$PackStream/read(long,byte[],int,int)
org/eclipse/jgit/internal/storage/dfs/DfsInserter/Reader/open(org.eclipse.jgit.lib.AnyObjectId,int)#org/eclipse/jgit/transport/PackedObjectInfo/copy()
org/eclipse/jgit/internal/storage/dfs/DfsInserter/Reader/open(org.eclipse.jgit.lib.AnyObjectId,int)#org/eclipse/jgit/lib/ObjectLoader$SmallObject/SmallObject(int,byte[])
org/eclipse/jgit/internal/storage/dfs/DfsInserter/Reader/open(org.eclipse.jgit.lib.AnyObjectId,int)#java/io/IOException/IOException(java.lang.String)
org/eclipse/jgit/internal/storage/dfs/DfsInserter/Reader/open(org.eclipse.jgit.lib.AnyObjectId,int)#org/eclipse/jgit/internal/storage/dfs/DfsInserter$StreamLoader/StreamLoader(org.eclipse.jgit.internal.storage.dfs.DfsInserter,org.eclipse.jgit.lib.ObjectId,int,long,org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)
org/eclipse/jgit/internal/storage/dfs/DfsInserter/Reader/open(org.eclipse.jgit.lib.AnyObjectId,int)#java/lang/Integer/toString(int)
org/eclipse/jgit/internal/storage/dfs/DfsInserter/Reader/open(org.eclipse.jgit.lib.AnyObjectId,int)#java/io/EOFException/EOFException(java.lang.String)
org/eclipse/jgit/api/CommitCommand/createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)#org/eclipse/jgit/treewalk/CanonicalTreeParser/getEntryObjectId()
org/eclipse/jgit/api/CommitCommand/createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)#org/eclipse/jgit/treewalk/CanonicalTreeParser/getEntryFileMode()
org/eclipse/jgit/api/CommitCommand/createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)#org/eclipse/jgit/treewalk/FileTreeIterator/openEntryStream()
org/eclipse/jgit/api/CommitCommand/createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)#org/eclipse/jgit/treewalk/FileTreeIterator/getEntryLength()
org/eclipse/jgit/api/CommitCommand/createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)#org/eclipse/jgit/treewalk/FileTreeIterator/idEqual(org.eclipse.jgit.treewalk.AbstractTreeIterator)
org/eclipse/jgit/api/CommitCommand/createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)#org/eclipse/jgit/treewalk/CanonicalTreeParser/idEqual(org.eclipse.jgit.treewalk.AbstractTreeIterator)
org/eclipse/jgit/api/CommitCommand/createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)#org/eclipse/jgit/treewalk/FileTreeIterator/getIndexFileMode(org.eclipse.jgit.dircache.DirCacheIterator)
org/eclipse/jgit/api/CommitCommand/createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)#java/lang/Object/equals(java.lang.Object)
org/eclipse/jgit/api/CommitCommand/createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)#org/eclipse/jgit/treewalk/FileTreeIterator/getEntryObjectId()
org/eclipse/jgit/api/CommitCommand/createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)#org/eclipse/jgit/treewalk/FileTreeIterator/getEntryContentLength()
org/eclipse/jgit/api/CommitCommand/createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)#org/eclipse/jgit/treewalk/FileTreeIterator/getEntryLastModified()
org/eclipse/jgit/api/CommitCommand/createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)#java/util/List/size()
org/eclipse/jgit/api/CommitCommand/createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)#java/lang/String/equals(java.lang.Object)
org/eclipse/jgit/api/CommitCommand/createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/api/CommitCommand/createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)#java/io/InputStream/close()
org/eclipse/jgit/api/CommitCommand/createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)#org/eclipse/jgit/treewalk/FileTreeIterator/getEntryRawMode()
org/eclipse/jgit/api/CommitCommand/createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)#java/util/List/get(int)
org/eclipse/jgit/api/CommitCommand/createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)#org/eclipse/jgit/treewalk/CanonicalTreeParser/getEntryRawMode()
org/eclipse/jgit/api/CommitCommand/call()#org/eclipse/jgit/lib/RepositoryState/name()
org/eclipse/jgit/api/CommitCommand/call()#org/eclipse/jgit/lib/RefUpdate$Result/ordinal()
org/eclipse/jgit/api/CommitCommand/call()#org/eclipse/jgit/api/errors/NoFilepatternException/getMessage()
org/eclipse/jgit/api/CommitCommand/call()#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/api/CommitCommand/call()#java/util/List/isEmpty()
org/eclipse/jgit/api/CommitCommand/call()#java/util/List/size()
org/eclipse/jgit/api/CommitCommand/call()#org/eclipse/jgit/api/CommitCommand/setCallable(boolean)
org/eclipse/jgit/api/CommitCommand/call()#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/api/CommitCommand/call()#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/api/CommitCommand/call()#java/util/Collections/sort(java.util.List)
org/eclipse/jgit/api/CommitCommand/call()#org/eclipse/jgit/api/CommitCommand/checkCallable()
org/eclipse/jgit/api/CommitCommand/call()#java/util/List/add(java.lang.Object)
org/eclipse/jgit/api/CommitCommand/call()#java/util/List/add(int,java.lang.Object)
org/eclipse/jgit/api/CommitCommand/call()#org/eclipse/jgit/lib/RepositoryState/canCommit()
org/eclipse/jgit/api/CommitCommand/call()#org/eclipse/jgit/lib/ObjectId/toString()
org/eclipse/jgit/api/CommitCommand/call()#java/lang/StringBuilder/toString()
org/eclipse/jgit/api/CommitCommand/call()#org/eclipse/jgit/revwalk/RevCommit/getId()
org/eclipse/jgit/transport/TransferConfig/2/filter(java.util.Map)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/transport/TransferConfig/2/filter(java.util.Map)#org/eclipse/jgit/transport/TransferConfig$2/prefixMatch(java.lang.String,java.lang.String)
org/eclipse/jgit/transport/TransferConfig/2/filter(java.util.Map)#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/TransferConfig/2/filter(java.util.Map)#java/util/Map$Entry/getKey()
org/eclipse/jgit/transport/TransferConfig/2/filter(java.util.Map)#java/lang/String/equals(java.lang.Object)
org/eclipse/jgit/transport/TransferConfig/2/filter(java.util.Map)#java/util/Set/iterator()
org/eclipse/jgit/transport/TransferConfig/2/filter(java.util.Map)#java/util/Map$Entry/getValue()
org/eclipse/jgit/transport/TransferConfig/2/filter(java.util.Map)#java/util/Map/entrySet()
org/eclipse/jgit/transport/TransferConfig/2/filter(java.util.Map)#java/util/Iterator/next()
org/eclipse/jgit/transport/TransferConfig/2/filter(java.util.Map)#java/util/HashMap/HashMap()
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/findPaths(org.eclipse.jgit.revwalk.RevWalk,int)#java/util/ArrayList/ArrayList()
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/findPaths(org.eclipse.jgit.revwalk.RevWalk,int)#java/util/ArrayList/ArrayList(int)
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/findPaths(org.eclipse.jgit.revwalk.RevWalk,int)#org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer$BitmapCommit/BitmapCommit(org.eclipse.jgit.lib.AnyObjectId,boolean,int,org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer$1)
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/findPaths(org.eclipse.jgit.revwalk.RevWalk,int)#java/util/Set/size()
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/findPaths(org.eclipse.jgit.revwalk.RevWalk,int)#java/util/List/isEmpty()
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/findPaths(org.eclipse.jgit.revwalk.RevWalk,int)#java/util/List/get(int)
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/findPaths(org.eclipse.jgit.revwalk.RevWalk,int)#java/util/Set/add(java.lang.Object)
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/findPaths(org.eclipse.jgit.revwalk.RevWalk,int)#org/eclipse/jgit/lib/BitmapIndex$BitmapBuilder/andNot(org.eclipse.jgit.lib.BitmapIndex$Bitmap)
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/findPaths(org.eclipse.jgit.revwalk.RevWalk,int)#java/util/Iterator/hasNext()
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/findPaths(org.eclipse.jgit.revwalk.RevWalk,int)#java/util/List/remove(int)
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/findPaths(org.eclipse.jgit.revwalk.RevWalk,int)#java/util/HashSet/HashSet(int)
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/findPaths(org.eclipse.jgit.revwalk.RevWalk,int)#java/util/List/size()
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/findPaths(org.eclipse.jgit.revwalk.RevWalk,int)#org/eclipse/jgit/lib/BitmapIndex$BitmapBuilder/add(org.eclipse.jgit.lib.AnyObjectId,int)
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/findPaths(org.eclipse.jgit.revwalk.RevWalk,int)#java/util/Iterator/next()
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/findPaths(org.eclipse.jgit.revwalk.RevWalk,int)#java/util/Collections/sort(java.util.List,java.util.Comparator)
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/findPaths(org.eclipse.jgit.revwalk.RevWalk,int)#org/eclipse/jgit/internal/storage/file/PackBitmapIndexRemapper$Entry/getFlags()
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/findPaths(org.eclipse.jgit.revwalk.RevWalk,int)#org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer$WalkResult/WalkResult(java.util.Set,org.eclipse.jgit.revwalk.RevCommit[],int,java.util.List,java.lang.Iterable,org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer$1)
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/findPaths(org.eclipse.jgit.revwalk.RevWalk,int)#org/eclipse/jgit/lib/BitmapIndex$BitmapBuilder/contains(org.eclipse.jgit.lib.AnyObjectId)
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/findPaths(org.eclipse.jgit.revwalk.RevWalk,int)#java/util/Set/iterator()
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/findPaths(org.eclipse.jgit.revwalk.RevWalk,int)#java/util/List/add(java.lang.Object)
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/findPaths(org.eclipse.jgit.revwalk.RevWalk,int)#org/eclipse/jgit/lib/BitmapIndex$BitmapBuilder/or(org.eclipse.jgit.lib.BitmapIndex$Bitmap)
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/findPaths(org.eclipse.jgit.revwalk.RevWalk,int)#java/util/List/iterator()
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/doCommitSelection(int)#org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer$BitmapCommit/BitmapCommit(org.eclipse.jgit.lib.AnyObjectId,boolean,int,org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer$1)
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/doCommitSelection(int)#java/util/List/isEmpty()
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/doCommitSelection(int)#java/util/Iterator/next()
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/doCommitSelection(int)#java/lang/Iterable/iterator()
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/doCommitSelection(int)#org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer$WalkResult/access$000(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer$WalkResult)
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/doCommitSelection(int)#org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer$WalkResult/access$100(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer$WalkResult)
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/doCommitSelection(int)#org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer$WalkResult/access$200(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer$WalkResult)
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/doCommitSelection(int)#org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer$WalkResult/access$300(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer$WalkResult)
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/doCommitSelection(int)#org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer$WalkResult/access$500(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer$WalkResult)
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/doCommitSelection(int)#java/util/ArrayList/ArrayList()
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/doCommitSelection(int)#java/util/Iterator/hasNext()
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/doCommitSelection(int)#org/eclipse/jgit/lib/BitmapIndex$BitmapBuilder/cardinality()
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/doCommitSelection(int)#java/util/List/size()
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/doCommitSelection(int)#org/eclipse/jgit/lib/BitmapIndex$BitmapBuilder/contains(org.eclipse.jgit.lib.AnyObjectId)
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/doCommitSelection(int)#java/util/Set/iterator()
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/doCommitSelection(int)#java/util/List/add(java.lang.Object)
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/doCommitSelection(int)#java/util/Set/remove(java.lang.Object)
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/doCommitSelection(int)#java/util/List/get(int)
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/doCommitSelection(int)#org/eclipse/jgit/util/BlockList/addAll(java.util.Collection)
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/doCommitSelection(int)#org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer$WalkResult/iterator()
org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer/doCommitSelection(int)#java/util/List/iterator()
org/eclipse/jgit/internal/storage/dfs/DfsPackCompactor/toInclude(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,org.eclipse.jgit.internal.storage.dfs.DfsReader)#org/eclipse/jgit/internal/storage/pack/PackWriter$ObjectIdSet/contains(org.eclipse.jgit.lib.AnyObjectId)
org/eclipse/jgit/internal/storage/dfs/DfsPackCompactor/toInclude(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,org.eclipse.jgit.internal.storage.dfs.DfsReader)#org/eclipse/jgit/internal/storage/file/PackIndex$MutableEntry/getOffset()
org/eclipse/jgit/internal/storage/dfs/DfsPackCompactor/toInclude(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,org.eclipse.jgit.internal.storage.dfs.DfsReader)#java/util/List/add(java.lang.Object)
org/eclipse/jgit/internal/storage/dfs/DfsPackCompactor/toInclude(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,org.eclipse.jgit.internal.storage.dfs.DfsReader)#java/util/List/iterator()
org/eclipse/jgit/internal/storage/dfs/DfsPackCompactor/toInclude(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,org.eclipse.jgit.internal.storage.dfs.DfsReader)#org/eclipse/jgit/internal/storage/dfs/DfsPackCompactor$ObjectIdWithOffset/ObjectIdWithOffset(org.eclipse.jgit.lib.AnyObjectId,long)
org/eclipse/jgit/internal/storage/dfs/DfsPackCompactor/toInclude(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,org.eclipse.jgit.internal.storage.dfs.DfsReader)#org/eclipse/jgit/internal/storage/file/PackIndex$MutableEntry/toObjectId()
org/eclipse/jgit/internal/storage/dfs/DfsPackCompactor/toInclude(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,org.eclipse.jgit.internal.storage.dfs.DfsReader)#java/util/Iterator/hasNext()
org/eclipse/jgit/internal/storage/dfs/DfsPackCompactor/toInclude(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,org.eclipse.jgit.internal.storage.dfs.DfsReader)#java/util/Iterator/next()
org/eclipse/jgit/internal/storage/dfs/DfsPackCompactor/toInclude(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,org.eclipse.jgit.internal.storage.dfs.DfsReader)#java/util/Collections/sort(java.util.List,java.util.Comparator)
org/eclipse/jgit/internal/storage/dfs/DfsPackCompactor/toInclude(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,org.eclipse.jgit.internal.storage.dfs.DfsReader)#org/eclipse/jgit/internal/storage/dfs/DfsPackCompactor$3/3(org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor)
org/eclipse/jgit/treewalk/filter/IndexDiffFilter/copyUntrackedFolders(java.lang.String)#java/util/LinkedList/isEmpty()
org/eclipse/jgit/treewalk/filter/IndexDiffFilter/copyUntrackedFolders(java.lang.String)#java/util/LinkedList/addLast(java.lang.Object)
org/eclipse/jgit/treewalk/filter/IndexDiffFilter/copyUntrackedFolders(java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/treewalk/filter/IndexDiffFilter/copyUntrackedFolders(java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/treewalk/filter/IndexDiffFilter/copyUntrackedFolders(java.lang.String)#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/treewalk/filter/IndexDiffFilter/copyUntrackedFolders(java.lang.String)#java/lang/StringBuilder/toString()
org/eclipse/jgit/treewalk/filter/IndexDiffFilter/copyUntrackedFolders(java.lang.String)#java/util/LinkedList/removeFirst()
org/eclipse/jgit/treewalk/filter/IndexDiffFilter/copyUntrackedFolders(java.lang.String)#java/util/LinkedList/removeLast()
org/eclipse/jgit/treewalk/filter/IndexDiffFilter/copyUntrackedFolders(java.lang.String)#java/util/LinkedList/getLast()
org/eclipse/jgit/treewalk/filter/IndexDiffFilter/copyUntrackedFolders(java.lang.String)#java/util/LinkedList/getFirst()
org/eclipse/jgit/api/SubmoduleAddCommand/call()#org/eclipse/jgit/errors/ConfigInvalidException/getMessage()
org/eclipse/jgit/api/SubmoduleAddCommand/call()#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/eclipse/jgit/api/SubmoduleAddCommand/call()#org/eclipse/jgit/api/SubmoduleAddCommand/configure(org.eclipse.jgit.api.TransportCommand)
org/eclipse/jgit/api/SubmoduleAddCommand/call()#java/io/File/File(java.io.File,java.lang.String)
org/eclipse/jgit/api/SubmoduleAddCommand/call()#org/eclipse/jgit/api/errors/NoFilepatternException/getMessage()
org/eclipse/jgit/api/SubmoduleAddCommand/call()#java/lang/String/length()
org/eclipse/jgit/api/SubmoduleAddCommand/call()#org/eclipse/jgit/storage/file/FileBasedConfig/setString(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
org/eclipse/jgit/api/SubmoduleAddCommand/call()#java/io/IOException/getMessage()
org/eclipse/jgit/api/SubmoduleAddCommand/call()#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/api/SubmoduleAddCommand/call()#org/eclipse/jgit/lib/StoredConfig/setString(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
org/eclipse/jgit/api/SubmoduleAddCommand/call()#org/eclipse/jgit/api/SubmoduleAddCommand/checkCallable()
org/eclipse/jgit/internal/storage/file/ObjectDirectory/scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)#java/util/ArrayList/ArrayList(int)
org/eclipse/jgit/internal/storage/file/ObjectDirectory/scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)#java/io/File/File(java.io.File,java.lang.String)
org/eclipse/jgit/internal/storage/file/ObjectDirectory/scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)#java/util/Iterator/hasNext()
org/eclipse/jgit/internal/storage/file/ObjectDirectory/scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)#org/eclipse/jgit/internal/storage/pack/PackExt/values()
org/eclipse/jgit/internal/storage/file/ObjectDirectory/scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)#java/util/Map/values()
org/eclipse/jgit/internal/storage/file/ObjectDirectory/scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)#java/util/List/toArray(java.lang.Object[])
org/eclipse/jgit/internal/storage/file/ObjectDirectory/scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)#java/util/Set/iterator()
org/eclipse/jgit/internal/storage/file/ObjectDirectory/scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)#java/util/List/add(java.lang.Object)
org/eclipse/jgit/internal/storage/file/ObjectDirectory/scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)#java/util/Set/size()
org/eclipse/jgit/internal/storage/file/ObjectDirectory/scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/internal/storage/file/ObjectDirectory/scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)#java/util/Arrays/sort(java.lang.Object[],java.util.Comparator)
org/eclipse/jgit/internal/storage/file/ObjectDirectory/scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)#org/eclipse/jgit/internal/storage/file/ObjectDirectory$PackList/PackList(org.eclipse.jgit.internal.storage.file.FileSnapshot,org.eclipse.jgit.internal.storage.file.PackFile[])
org/eclipse/jgit/internal/storage/file/ObjectDirectory/scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)#java/util/List/isEmpty()
org/eclipse/jgit/internal/storage/file/ObjectDirectory/scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)#java/lang/String/length()
org/eclipse/jgit/internal/storage/file/ObjectDirectory/scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)#java/util/Map/isEmpty()
org/eclipse/jgit/internal/storage/file/ObjectDirectory/scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)#java/util/List/size()
org/eclipse/jgit/internal/storage/file/ObjectDirectory/scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)#java/util/Iterator/next()
org/eclipse/jgit/internal/storage/file/ObjectDirectory/scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)#java/lang/String/substring(int,int)
org/eclipse/jgit/internal/storage/file/ObjectDirectory/scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)#java/util/Set/contains(java.lang.Object)
org/eclipse/jgit/internal/storage/file/ObjectDirectory/scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/internal/storage/file/ObjectDirectory/scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)#java/util/Collection/iterator()
org/eclipse/jgit/internal/storage/file/ObjectDirectory/scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)#java/util/Map/remove(java.lang.Object)
org/eclipse/jgit/internal/storage/file/ObjectDirectory/scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)#java/lang/StringBuilder/toString()
org/eclipse/jgit/internal/storage/file/ObjectDirectory/scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)#java/lang/String/endsWith(java.lang.String)
org/eclipse/jgit/internal/storage/file/ObjectDirectory/resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)#java/lang/String/length()
org/eclipse/jgit/internal/storage/file/ObjectDirectory/resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)#java/io/File/list()
org/eclipse/jgit/internal/storage/file/ObjectDirectory/resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/internal/storage/file/ObjectDirectory/resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)#java/util/concurrent/atomic/AtomicReference/get()
org/eclipse/jgit/internal/storage/file/ObjectDirectory/resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)#java/util/Set/add(java.lang.Object)
org/eclipse/jgit/internal/storage/file/ObjectDirectory/resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)#java/lang/StringBuilder/toString()
org/eclipse/jgit/internal/storage/file/ObjectDirectory/resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)#java/io/File/File(java.io.File,java.lang.String)
org/eclipse/jgit/internal/storage/file/ObjectDirectory/resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)#java/util/Set/size()
org/eclipse/jgit/internal/storage/file/ObjectDirectory/resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/internal/storage/file/ObjectDirectory/resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)#java/lang/String/substring(int,int)
org/eclipse/jgit/internal/storage/file/ObjectDirectory/openPack(java.io.File)#java/io/File/getName()
org/eclipse/jgit/internal/storage/file/ObjectDirectory/openPack(java.io.File)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/internal/storage/file/ObjectDirectory/openPack(java.io.File)#org/eclipse/jgit/internal/storage/pack/PackExt/values()
org/eclipse/jgit/internal/storage/file/ObjectDirectory/openPack(java.io.File)#java/lang/String/length()
org/eclipse/jgit/internal/storage/file/ObjectDirectory/openPack(java.io.File)#java/io/File/exists()
org/eclipse/jgit/internal/storage/file/ObjectDirectory/openPack(java.io.File)#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/internal/storage/file/ObjectDirectory/openPack(java.io.File)#java/io/File/File(java.io.File,java.lang.String)
org/eclipse/jgit/internal/storage/file/ObjectDirectory/openPack(java.io.File)#java/io/IOException/IOException(java.lang.String)
org/eclipse/jgit/internal/storage/file/ObjectDirectory/openPack(java.io.File)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/internal/storage/file/ObjectDirectory/openPack(java.io.File)#java/lang/String/substring(int,int)
org/eclipse/jgit/internal/storage/file/ObjectDirectory/openPack(java.io.File)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/internal/storage/file/ObjectDirectory/openPack(java.io.File)#java/lang/StringBuilder/toString()
org/eclipse/jgit/internal/storage/file/ObjectDirectory/openPack(java.io.File)#java/io/File/getParentFile()
org/eclipse/jgit/internal/storage/file/ObjectDirectory/openPack(java.io.File)#java/lang/String/endsWith(java.lang.String)
org/eclipse/jgit/transport/HttpAuthMethod/scanResponse(org.eclipse.jgit.transport.http.HttpConnection)#org/eclipse/jgit/transport/HttpAuthMethod$Type/valueOf(java.lang.String)
org/eclipse/jgit/transport/HttpAuthMethod/scanResponse(org.eclipse.jgit.transport.http.HttpConnection)#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/HttpAuthMethod/scanResponse(org.eclipse.jgit.transport.http.HttpConnection)#java/lang/String/toUpperCase()
org/eclipse/jgit/transport/HttpAuthMethod/scanResponse(org.eclipse.jgit.transport.http.HttpConnection)#org/eclipse/jgit/transport/HttpAuthMethod$Type/compareTo(java.lang.Enum)
org/eclipse/jgit/transport/HttpAuthMethod/scanResponse(org.eclipse.jgit.transport.http.HttpConnection)#java/lang/String/length()
org/eclipse/jgit/transport/HttpAuthMethod/scanResponse(org.eclipse.jgit.transport.http.HttpConnection)#java/util/Iterator/next()
org/eclipse/jgit/transport/HttpAuthMethod/scanResponse(org.eclipse.jgit.transport.http.HttpConnection)#org/eclipse/jgit/transport/HttpAuthMethod$Type/method(java.lang.String)
org/eclipse/jgit/transport/HttpAuthMethod/scanResponse(org.eclipse.jgit.transport.http.HttpConnection)#java/util/Set/iterator()
org/eclipse/jgit/transport/HttpAuthMethod/scanResponse(org.eclipse.jgit.transport.http.HttpConnection)#java/util/List/iterator()
org/eclipse/jgit/transport/HttpAuthMethod/scanResponse(org.eclipse.jgit.transport.http.HttpConnection)#java/util/Map/entrySet()
org/eclipse/jgit/transport/HttpAuthMethod/scanResponse(org.eclipse.jgit.transport.http.HttpConnection)#java/lang/String/equalsIgnoreCase(java.lang.String)
org/eclipse/jgit/transport/HttpAuthMethod/scanResponse(org.eclipse.jgit.transport.http.HttpConnection)#java/lang/String/split(java.lang.String,int)
org/eclipse/jgit/transport/HttpAuthMethod/scanResponse(org.eclipse.jgit.transport.http.HttpConnection)#java/util/Map$Entry/getKey()
org/eclipse/jgit/transport/HttpAuthMethod/scanResponse(org.eclipse.jgit.transport.http.HttpConnection)#java/util/Map$Entry/getValue()
org/eclipse/jgit/api/CleanCommand/call()#java/io/File/File(java.io.File,java.lang.String)
org/eclipse/jgit/api/CleanCommand/call()#java/util/Iterator/hasNext()
org/eclipse/jgit/api/CleanCommand/call()#java/io/IOException/getMessage()
org/eclipse/jgit/api/CleanCommand/call()#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/api/CleanCommand/call()#java/util/Set/iterator()
org/eclipse/jgit/api/CleanCommand/call()#java/util/TreeSet/TreeSet(java.util.Collection)
org/eclipse/jgit/api/CleanCommand/call()#java/lang/StringBuilder/toString()
org/eclipse/jgit/api/CleanCommand/call()#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/api/CleanCommand/call()#java/util/Iterator/next()
org/eclipse/jgit/api/CleanCommand/call()#java/util/Set/isEmpty()
org/eclipse/jgit/api/CleanCommand/call()#java/util/Set/contains(java.lang.Object)
org/eclipse/jgit/api/CleanCommand/call()#org/eclipse/jgit/api/CleanCommand/getRepository()
org/eclipse/jgit/api/CleanCommand/call()#java/util/TreeSet/TreeSet()
org/eclipse/jgit/api/CleanCommand/call()#java/util/Set/add(java.lang.Object)
org/eclipse/jgit/transport/URIish/escape(java.lang.String,boolean,boolean)#java/util/BitSet/get(int)
org/eclipse/jgit/transport/URIish/escape(java.lang.String,boolean,boolean)#java/io/ByteArrayOutputStream/ByteArrayOutputStream(int)
org/eclipse/jgit/transport/URIish/escape(java.lang.String,boolean,boolean)#java/lang/RuntimeException/RuntimeException(java.lang.Throwable)
org/eclipse/jgit/transport/URIish/escape(java.lang.String,boolean,boolean)#java/lang/String/length()
org/eclipse/jgit/transport/URIish/escape(java.lang.String,boolean,boolean)#java/lang/String/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/transport/URIish/escape(java.lang.String,boolean,boolean)#java/io/ByteArrayOutputStream/write(int)
org/eclipse/jgit/transport/URIish/escape(java.lang.String,boolean,boolean)#java/lang/String/getBytes(java.lang.String)
org/eclipse/jgit/transport/URIish/escape(java.lang.String,boolean,boolean)#java/lang/Integer/valueOf(int)
org/eclipse/jgit/transport/URIish/escape(java.lang.String,boolean,boolean)#java/io/ByteArrayOutputStream/toByteArray()
org/eclipse/jgit/transport/URIish/getHumanishName()#java/lang/String/split(java.lang.String)
org/eclipse/jgit/transport/URIish/getHumanishName()#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/URIish/getHumanishName()#java/util/regex/Matcher/matches()
org/eclipse/jgit/transport/URIish/getHumanishName()#java/lang/String/length()
org/eclipse/jgit/transport/URIish/getHumanishName()#java/lang/String/equals(java.lang.Object)
org/eclipse/jgit/transport/URIish/getHumanishName()#java/lang/String/substring(int,int)
org/eclipse/jgit/transport/URIish/getHumanishName()#java/lang/StringBuilder/append(char)
org/eclipse/jgit/transport/URIish/getHumanishName()#java/util/regex/Pattern/matcher(java.lang.CharSequence)
org/eclipse/jgit/transport/URIish/getHumanishName()#java/lang/IllegalArgumentException/IllegalArgumentException()
org/eclipse/jgit/transport/URIish/getHumanishName()#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/URIish/getHumanishName()#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/URIish/getHumanishName()#java/lang/String/endsWith(java.lang.String)
org/eclipse/jgit/lib/TreeFormatter/toString()#org/eclipse/jgit/treewalk/CanonicalTreeParser/getEntryFileMode()
org/eclipse/jgit/lib/TreeFormatter/toString()#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/lib/TreeFormatter/toString()#org/eclipse/jgit/errors/CorruptObjectException/getMessage()
org/eclipse/jgit/lib/TreeFormatter/toString()#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/lib/TreeFormatter/toString()#java/lang/StringBuilder/append(char)
org/eclipse/jgit/lib/TreeFormatter/toString()#java/lang/StringBuilder/append(java.lang.Object)
org/eclipse/jgit/lib/TreeFormatter/toString()#org/eclipse/jgit/lib/ObjectId/name()
org/eclipse/jgit/lib/TreeFormatter/toString()#org/eclipse/jgit/treewalk/CanonicalTreeParser/getEntryPathString()
org/eclipse/jgit/lib/TreeFormatter/toString()#org/eclipse/jgit/treewalk/CanonicalTreeParser/getEntryObjectId()
org/eclipse/jgit/lib/TreeFormatter/toString()#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/AmazonS3/ListParser/list()#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/transport/AmazonS3/ListParser/list()#java/io/IOException/IOException(java.lang.String)
org/eclipse/jgit/transport/AmazonS3/ListParser/list()#java/io/IOException/initCause(java.lang.Throwable)
org/eclipse/jgit/transport/AmazonS3/ListParser/list()#org/xml/sax/helpers/XMLReaderFactory/createXMLReader()
org/eclipse/jgit/transport/AmazonS3/ListParser/list()#java/util/List/size()
org/eclipse/jgit/transport/AmazonS3/ListParser/list()#java/util/List/get(int)
org/eclipse/jgit/transport/AmazonS3/ListParser/list()#java/net/HttpURLConnection/getInputStream()
org/eclipse/jgit/transport/AmazonS3/ListParser/list()#org/xml/sax/XMLReader/setContentHandler(org.xml.sax.ContentHandler)
org/eclipse/jgit/transport/AmazonS3/ListParser/list()#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/AmazonS3/ListParser/list()#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/AmazonS3/ListParser/list()#java/util/List/isEmpty()
org/eclipse/jgit/transport/AmazonS3/ListParser/list()#java/lang/String/length()
org/eclipse/jgit/transport/AmazonS3/ListParser/list()#java/util/TreeMap/TreeMap()
org/eclipse/jgit/transport/AmazonS3/ListParser/list()#org/xml/sax/InputSource/InputSource(java.io.InputStream)
org/eclipse/jgit/transport/AmazonS3/ListParser/list()#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/transport/AmazonS3/ListParser/list()#java/io/InputStream/close()
org/eclipse/jgit/transport/AmazonS3/ListParser/list()#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/AmazonS3/ListParser/list()#org/xml/sax/XMLReader/parse(org.xml.sax.InputSource)
org/eclipse/jgit/treewalk/WorkingTreeIterator/Entry/encodeName(java.nio.charset.CharsetEncoder)#org/eclipse/jgit/treewalk/WorkingTreeIterator$Entry/getName()
org/eclipse/jgit/treewalk/WorkingTreeIterator/Entry/encodeName(java.nio.charset.CharsetEncoder)#java/nio/charset/CharsetEncoder/encode(java.nio.CharBuffer)
org/eclipse/jgit/treewalk/WorkingTreeIterator/Entry/encodeName(java.nio.charset.CharsetEncoder)#java/nio/CharBuffer/wrap(java.lang.CharSequence)
org/eclipse/jgit/treewalk/WorkingTreeIterator/Entry/encodeName(java.nio.charset.CharsetEncoder)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/treewalk/WorkingTreeIterator/Entry/encodeName(java.nio.charset.CharsetEncoder)#java/nio/ByteBuffer/array()
org/eclipse/jgit/treewalk/WorkingTreeIterator/Entry/encodeName(java.nio.charset.CharsetEncoder)#java/lang/RuntimeException/RuntimeException(java.lang.String)
org/eclipse/jgit/treewalk/WorkingTreeIterator/Entry/encodeName(java.nio.charset.CharsetEncoder)#java/nio/ByteBuffer/arrayOffset()
org/eclipse/jgit/treewalk/WorkingTreeIterator/Entry/encodeName(java.nio.charset.CharsetEncoder)#java/nio/ByteBuffer/get(byte[])
org/eclipse/jgit/treewalk/WorkingTreeIterator/Entry/encodeName(java.nio.charset.CharsetEncoder)#java/nio/ByteBuffer/hasArray()
org/eclipse/jgit/treewalk/WorkingTreeIterator/Entry/encodeName(java.nio.charset.CharsetEncoder)#java/nio/ByteBuffer/limit()
org/eclipse/jgit/transport/Transport/getTransportProtocols()#java/util/ArrayList/ArrayList(int)
org/eclipse/jgit/transport/Transport/getTransportProtocols()#java/util/List/size()
org/eclipse/jgit/transport/Transport/getTransportProtocols()#java/util/Iterator/next()
org/eclipse/jgit/transport/Transport/getTransportProtocols()#java/util/Collections/unmodifiableList(java.util.List)
org/eclipse/jgit/transport/Transport/getTransportProtocols()#java/util/List/add(java.lang.Object)
org/eclipse/jgit/transport/Transport/getTransportProtocols()#java/util/List/iterator()
org/eclipse/jgit/transport/Transport/getTransportProtocols()#java/util/List/remove(java.lang.Object)
org/eclipse/jgit/transport/Transport/getTransportProtocols()#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/Transport/getTransportProtocols()#java/lang/ref/WeakReference/get()
org/eclipse/jgit/transport/Transport/findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/Transport/findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/Transport/findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)#java/lang/String/length()
org/eclipse/jgit/transport/Transport/findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)#java/util/Collections/emptyList()
org/eclipse/jgit/transport/Transport/findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)#java/util/LinkedList/LinkedList()
org/eclipse/jgit/transport/Transport/findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)#java/lang/String/substring(int,int)
org/eclipse/jgit/transport/Transport/findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/Transport/findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)#java/util/List/add(java.lang.Object)
org/eclipse/jgit/transport/Transport/findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/transport/Transport/findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/Transport/findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)#java/util/Iterator/next()
org/eclipse/jgit/transport/Transport/findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)#java/lang/String/indexOf(int,int)
org/eclipse/jgit/transport/Transport/findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)#java/util/Collection/iterator()
org/eclipse/jgit/transport/Transport/scan(java.lang.ClassLoader,java.net.URL)#java/io/BufferedReader/close()
org/eclipse/jgit/transport/Transport/scan(java.lang.ClassLoader,java.net.URL)#java/net/URL/openStream()
org/eclipse/jgit/transport/Transport/scan(java.lang.ClassLoader,java.net.URL)#java/lang/String/length()
org/eclipse/jgit/transport/Transport/scan(java.lang.ClassLoader,java.net.URL)#java/io/InputStreamReader/InputStreamReader(java.io.InputStream,java.lang.String)
org/eclipse/jgit/transport/Transport/scan(java.lang.ClassLoader,java.net.URL)#java/lang/String/substring(int,int)
org/eclipse/jgit/transport/Transport/scan(java.lang.ClassLoader,java.net.URL)#java/lang/String/indexOf(int)
org/eclipse/jgit/transport/Transport/scan(java.lang.ClassLoader,java.net.URL)#java/lang/String/trim()
org/eclipse/jgit/transport/Transport/scan(java.lang.ClassLoader,java.net.URL)#java/io/BufferedReader/BufferedReader(java.io.Reader)
org/eclipse/jgit/transport/Transport/scan(java.lang.ClassLoader,java.net.URL)#java/io/BufferedReader/readLine()
org/eclipse/jgit/transport/Transport/fetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection)#java/util/ArrayList/ArrayList(java.util.Collection)
org/eclipse/jgit/transport/Transport/fetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection)#java/lang/String/equals(java.lang.Object)
org/eclipse/jgit/transport/Transport/fetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection)#java/util/Collection/add(java.lang.Object)
org/eclipse/jgit/transport/Transport/fetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection)#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/Transport/fetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection)#java/util/List/isEmpty()
org/eclipse/jgit/transport/Transport/fetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection)#java/util/Collection/isEmpty()
org/eclipse/jgit/transport/Transport/fetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection)#java/util/Iterator/next()
org/eclipse/jgit/transport/Transport/fetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection)#java/util/List/iterator()
org/eclipse/jgit/transport/Transport/fetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection)#java/util/Collection/iterator()
org/eclipse/jgit/api/SubmoduleSyncCommand/call()#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/api/SubmoduleSyncCommand/call()#java/util/HashMap/HashMap()
org/eclipse/jgit/api/SubmoduleSyncCommand/call()#org/eclipse/jgit/lib/StoredConfig/setString(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
org/eclipse/jgit/api/SubmoduleSyncCommand/call()#java/util/Map/isEmpty()
org/eclipse/jgit/api/SubmoduleSyncCommand/call()#java/util/Collection/isEmpty()
org/eclipse/jgit/api/SubmoduleSyncCommand/call()#java/io/IOException/getMessage()
org/eclipse/jgit/api/SubmoduleSyncCommand/call()#org/eclipse/jgit/lib/StoredConfig/getString(java.lang.String,java.lang.String,java.lang.String)
org/eclipse/jgit/api/SubmoduleSyncCommand/call()#org/eclipse/jgit/errors/ConfigInvalidException/getMessage()
org/eclipse/jgit/api/SubmoduleSyncCommand/call()#org/eclipse/jgit/api/SubmoduleSyncCommand/checkCallable()
org/eclipse/jgit/lib/RefDatabase/getConflictingNames(java.lang.String)#java/util/ArrayList/ArrayList()
org/eclipse/jgit/lib/RefDatabase/getConflictingNames(java.lang.String)#java/util/Iterator/hasNext()
org/eclipse/jgit/lib/RefDatabase/getConflictingNames(java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/lib/RefDatabase/getConflictingNames(java.lang.String)#java/lang/String/lastIndexOf(int,int)
org/eclipse/jgit/lib/RefDatabase/getConflictingNames(java.lang.String)#java/lang/String/substring(int,int)
org/eclipse/jgit/lib/RefDatabase/getConflictingNames(java.lang.String)#java/util/Set/iterator()
org/eclipse/jgit/lib/RefDatabase/getConflictingNames(java.lang.String)#java/util/Map/containsKey(java.lang.Object)
org/eclipse/jgit/lib/RefDatabase/getConflictingNames(java.lang.String)#java/lang/StringBuilder/toString()
org/eclipse/jgit/lib/RefDatabase/getConflictingNames(java.lang.String)#java/util/Iterator/next()
org/eclipse/jgit/lib/RefDatabase/getConflictingNames(java.lang.String)#java/util/Map/keySet()
org/eclipse/jgit/lib/RefDatabase/getConflictingNames(java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/lib/RefDatabase/getConflictingNames(java.lang.String)#java/lang/String/lastIndexOf(int)
org/eclipse/jgit/lib/RefDatabase/getConflictingNames(java.lang.String)#java/util/List/add(java.lang.Object)
org/eclipse/jgit/lib/RefDatabase/getConflictingNames(java.lang.String)#java/lang/StringBuilder/append(char)
org/eclipse/jgit/lib/RefDatabase/getConflictingNames(java.lang.String)#java/util/Collections/singletonList(java.lang.Object)
org/eclipse/jgit/lib/RefDatabase/getConflictingNames(java.lang.String)#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/storage/file/FileBasedConfig/save()#org/eclipse/jgit/storage/file/FileBasedConfig/toText()
org/eclipse/jgit/storage/file/FileBasedConfig/save()#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/storage/file/FileBasedConfig/save()#java/lang/String/getBytes(java.lang.String)
org/eclipse/jgit/storage/file/FileBasedConfig/save()#java/io/ByteArrayOutputStream/ByteArrayOutputStream()
org/eclipse/jgit/storage/file/FileBasedConfig/save()#java/io/IOException/IOException(java.lang.String)
org/eclipse/jgit/storage/file/FileBasedConfig/save()#java/nio/charset/Charset/name()
org/eclipse/jgit/storage/file/FileBasedConfig/save()#java/io/ByteArrayOutputStream/write(int)
org/eclipse/jgit/storage/file/FileBasedConfig/save()#java/io/ByteArrayOutputStream/write(byte[])
org/eclipse/jgit/storage/file/FileBasedConfig/save()#org/eclipse/jgit/storage/file/FileBasedConfig/fireConfigChangedEvent()
org/eclipse/jgit/storage/file/FileBasedConfig/save()#java/io/ByteArrayOutputStream/toByteArray()
org/eclipse/jgit/util/HttpSupport/response(java.net.HttpURLConnection)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/util/HttpSupport/response(java.net.HttpURLConnection)#java/net/ConnectException/ConnectException(java.lang.String)
org/eclipse/jgit/util/HttpSupport/response(java.net.HttpURLConnection)#java/lang/String/equals(java.lang.Object)
org/eclipse/jgit/util/HttpSupport/response(java.net.HttpURLConnection)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/util/HttpSupport/response(java.net.HttpURLConnection)#java/net/HttpURLConnection/getResponseCode()
org/eclipse/jgit/util/HttpSupport/response(java.net.HttpURLConnection)#java/net/ConnectException/getMessage()
org/eclipse/jgit/util/HttpSupport/response(java.net.HttpURLConnection)#java/net/URL/getHost()
org/eclipse/jgit/util/HttpSupport/response(java.net.HttpURLConnection)#java/net/HttpURLConnection/getURL()
org/eclipse/jgit/util/HttpSupport/response(java.net.HttpURLConnection)#java/lang/StringBuilder/toString()
org/eclipse/jgit/util/HttpSupport/response(java.net.HttpURLConnection)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/merge/MergeMessageFormatter/format(java.util.List,org.eclipse.jgit.lib.Ref)#java/util/ArrayList/ArrayList()
org/eclipse/jgit/merge/MergeMessageFormatter/format(java.util.List,org.eclipse.jgit.lib.Ref)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/merge/MergeMessageFormatter/format(java.util.List,org.eclipse.jgit.lib.Ref)#java/util/List/isEmpty()
org/eclipse/jgit/merge/MergeMessageFormatter/format(java.util.List,org.eclipse.jgit.lib.Ref)#java/lang/String/equals(java.lang.Object)
org/eclipse/jgit/merge/MergeMessageFormatter/format(java.util.List,org.eclipse.jgit.lib.Ref)#java/util/List/add(java.lang.Object)
org/eclipse/jgit/merge/MergeMessageFormatter/format(java.util.List,org.eclipse.jgit.lib.Ref)#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/merge/MergeMessageFormatter/format(java.util.List,org.eclipse.jgit.lib.Ref)#java/lang/StringBuilder/toString()
org/eclipse/jgit/merge/MergeMessageFormatter/format(java.util.List,org.eclipse.jgit.lib.Ref)#java/util/Iterator/hasNext()
org/eclipse/jgit/merge/MergeMessageFormatter/format(java.util.List,org.eclipse.jgit.lib.Ref)#org/eclipse/jgit/lib/ObjectId/getName()
org/eclipse/jgit/merge/MergeMessageFormatter/format(java.util.List,org.eclipse.jgit.lib.Ref)#java/util/Iterator/next()
org/eclipse/jgit/merge/MergeMessageFormatter/format(java.util.List,org.eclipse.jgit.lib.Ref)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/merge/MergeMessageFormatter/format(java.util.List,org.eclipse.jgit.lib.Ref)#java/util/List/iterator()
org/eclipse/jgit/transport/BaseReceivePack/recvCommands()#org/eclipse/jgit/transport/BaseReceivePack$FirstLine/FirstLine(java.lang.String)
org/eclipse/jgit/transport/BaseReceivePack/recvCommands()#org/eclipse/jgit/transport/BaseReceivePack$FirstLine/getLine()
org/eclipse/jgit/transport/BaseReceivePack/recvCommands()#org/eclipse/jgit/transport/BaseReceivePack$FirstLine/getCapabilities()
org/eclipse/jgit/transport/BaseReceivePack/recvCommands()#java/lang/String/equals(java.lang.Object)
org/eclipse/jgit/transport/BaseReceivePack/recvCommands()#java/lang/String/substring(int,int)
org/eclipse/jgit/transport/BaseReceivePack/recvCommands()#java/lang/String/substring(int)
org/eclipse/jgit/transport/BaseReceivePack/recvCommands()#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/transport/BaseReceivePack/recvCommands()#java/util/Set/add(java.lang.Object)
org/eclipse/jgit/transport/BaseReceivePack/recvCommands()#java/util/List/isEmpty()
org/eclipse/jgit/transport/BaseReceivePack/recvCommands()#java/lang/String/length()
org/eclipse/jgit/transport/BaseReceivePack/recvCommands()#java/util/Map/get(java.lang.Object)
org/eclipse/jgit/transport/BaseReceivePack/recvCommands()#java/util/List/add(java.lang.Object)
org/eclipse/jgit/transport/BaseReceivePack/sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/BaseReceivePack/sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/BaseReceivePack/sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)#org/eclipse/jgit/transport/BaseReceivePack$Reporter/sendString(java.lang.String)
org/eclipse/jgit/transport/BaseReceivePack/sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)#java/lang/String/length()
org/eclipse/jgit/transport/BaseReceivePack/sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)#java/lang/Throwable/getMessage()
org/eclipse/jgit/transport/BaseReceivePack/sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)#java/util/Iterator/next()
org/eclipse/jgit/transport/BaseReceivePack/sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/BaseReceivePack/sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/BaseReceivePack/sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)#java/util/List/iterator()
org/eclipse/jgit/transport/BaseReceivePack/sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)#org/eclipse/jgit/transport/ReceiveCommand$Result/ordinal()
org/eclipse/jgit/transport/BaseReceivePack/checkConnectivity()#java/util/Set/iterator()
org/eclipse/jgit/transport/BaseReceivePack/checkConnectivity()#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/BaseReceivePack/checkConnectivity()#org/eclipse/jgit/revwalk/ObjectWalk/setRetainBody(boolean)
org/eclipse/jgit/transport/BaseReceivePack/checkConnectivity()#org/eclipse/jgit/revwalk/RevCommit/has(org.eclipse.jgit.revwalk.RevFlag)
org/eclipse/jgit/transport/BaseReceivePack/checkConnectivity()#java/util/Iterator/next()
org/eclipse/jgit/transport/BaseReceivePack/checkConnectivity()#org/eclipse/jgit/revwalk/ObjectWalk/parseAny(org.eclipse.jgit.lib.AnyObjectId)
org/eclipse/jgit/transport/BaseReceivePack/checkConnectivity()#java/util/List/iterator()
org/eclipse/jgit/transport/BaseReceivePack/checkConnectivity()#org/eclipse/jgit/revwalk/ObjectWalk/peel(org.eclipse.jgit.revwalk.RevObject)
org/eclipse/jgit/transport/BaseReceivePack/checkConnectivity()#org/eclipse/jgit/transport/SideBandProgressMonitor/setDelayStart(long,java.util.concurrent.TimeUnit)
org/eclipse/jgit/internal/storage/dfs/DfsObjDatabase/scanPacksImpl(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackList)#java/util/ArrayList/ArrayList(int)
org/eclipse/jgit/internal/storage/dfs/DfsObjDatabase/scanPacksImpl(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackList)#java/util/Iterator/hasNext()
org/eclipse/jgit/internal/storage/dfs/DfsObjDatabase/scanPacksImpl(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackList)#java/util/List/isEmpty()
org/eclipse/jgit/internal/storage/dfs/DfsObjDatabase/scanPacksImpl(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackList)#java/util/Map/values()
org/eclipse/jgit/internal/storage/dfs/DfsObjDatabase/scanPacksImpl(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackList)#java/util/Iterator/next()
org/eclipse/jgit/internal/storage/dfs/DfsObjDatabase/scanPacksImpl(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackList)#java/util/List/toArray(java.lang.Object[])
org/eclipse/jgit/internal/storage/dfs/DfsObjDatabase/scanPacksImpl(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackList)#java/util/Collections/sort(java.util.List)
org/eclipse/jgit/internal/storage/dfs/DfsObjDatabase/scanPacksImpl(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackList)#java/util/List/add(java.lang.Object)
org/eclipse/jgit/internal/storage/dfs/DfsObjDatabase/scanPacksImpl(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackList)#java/util/Map/remove(java.lang.Object)
org/eclipse/jgit/internal/storage/dfs/DfsObjDatabase/scanPacksImpl(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackList)#java/util/List/size()
org/eclipse/jgit/internal/storage/dfs/DfsObjDatabase/scanPacksImpl(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackList)#java/util/List/iterator()
org/eclipse/jgit/internal/storage/dfs/DfsObjDatabase/scanPacksImpl(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackList)#org/eclipse/jgit/internal/storage/dfs/DfsObjDatabase$PackList/PackList(org.eclipse.jgit.internal.storage.dfs.DfsPackFile[])
org/eclipse/jgit/internal/storage/dfs/DfsObjDatabase/scanPacksImpl(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackList)#java/util/Collection/iterator()
org/eclipse/jgit/transport/FetchProcess/reopenConnection()#java/util/ArrayList/ArrayList(java.util.Collection)
org/eclipse/jgit/transport/FetchProcess/reopenConnection()#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/FetchProcess/reopenConnection()#java/util/HashMap/clear()
org/eclipse/jgit/transport/FetchProcess/reopenConnection()#java/util/Collection/iterator()
org/eclipse/jgit/transport/FetchProcess/reopenConnection()#java/util/HashMap/values()
org/eclipse/jgit/transport/FetchProcess/reopenConnection()#java/util/HashMap/get(java.lang.Object)
org/eclipse/jgit/transport/FetchProcess/reopenConnection()#org/eclipse/jgit/transport/FetchConnection/getRefs()
org/eclipse/jgit/transport/FetchProcess/reopenConnection()#java/util/Iterator/next()
org/eclipse/jgit/transport/FetchProcess/reopenConnection()#java/util/HashMap/HashMap()
org/eclipse/jgit/transport/FetchProcess/reopenConnection()#java/util/HashMap/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/transport/FetchProcess/executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)#java/util/ArrayList/iterator()
org/eclipse/jgit/transport/FetchProcess/executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)#java/util/HashMap/clear()
org/eclipse/jgit/transport/FetchProcess/executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)#java/util/Collection/isEmpty()
org/eclipse/jgit/transport/FetchProcess/executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)#java/util/HashSet/addAll(java.util.Collection)
org/eclipse/jgit/transport/FetchProcess/executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)#org/eclipse/jgit/transport/FetchResult/setAdvertisedRefs(org.eclipse.jgit.transport.URIish,java.util.Map)
org/eclipse/jgit/transport/FetchProcess/executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/FetchProcess/executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)#java/util/ArrayList/isEmpty()
org/eclipse/jgit/transport/FetchProcess/executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)#java/util/Collections/emptyList()
org/eclipse/jgit/transport/FetchProcess/executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)#java/io/IOException/getMessage()
org/eclipse/jgit/transport/FetchProcess/executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)#java/util/Iterator/next()
org/eclipse/jgit/transport/FetchProcess/executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/transport/FetchProcess/executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)#org/eclipse/jgit/transport/FetchConnection/getRefsMap()
org/eclipse/jgit/transport/FetchProcess/executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)#java/util/List/iterator()
org/eclipse/jgit/transport/FetchProcess/executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)#java/util/Collection/iterator()
org/eclipse/jgit/transport/FetchProcess/executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)#java/util/HashSet/HashSet()
org/eclipse/jgit/transport/FetchProcess/executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)#org/eclipse/jgit/transport/TrackingRefUpdate$Command/canForceUpdate()
org/eclipse/jgit/transport/FetchProcess/executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)#org/eclipse/jgit/transport/FetchResult/add(org.eclipse.jgit.transport.TrackingRefUpdate)
org/eclipse/jgit/transport/FetchProcess/executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)#java/util/HashMap/keySet()
org/eclipse/jgit/transport/FetchProcess/executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)#java/util/HashMap/isEmpty()
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/endDocument()#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/endDocument()#org/xml/sax/SAXException/SAXException(java.lang.String)
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/endDocument()#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/endDocument()#java/net/URI/toString()
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/endDocument()#java/util/Map/get(java.lang.Object)
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/endDocument()#org/xml/sax/SAXException/SAXException(java.lang.Exception)
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/endDocument()#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/endDocument()#org/eclipse/jgit/gitrepo/RepoCommand$XmlManifest/removeNotInGroup()
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/endDocument()#java/util/List/iterator()
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/endDocument()#java/util/Iterator/hasNext()
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/endDocument()#java/net/URI/URI(java.lang.String)
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/endDocument()#java/util/Iterator/next()
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/endDocument()#java/util/HashMap/HashMap()
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/endDocument()#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/endDocument()#java/lang/StringBuilder/toString()
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/endDocument()#org/eclipse/jgit/gitrepo/RepoCommand$XmlManifest/removeOverlaps()
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/endDocument()#java/lang/String/endsWith(java.lang.String)
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/endDocument()#java/net/URI/resolve(java.lang.String)
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#org/xml/sax/SAXException/SAXException(java.lang.String)
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#java/lang/String/equals(java.lang.Object)
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#org/eclipse/jgit/gitrepo/RepoCommand$Project/Project(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#org/xml/sax/SAXException/SAXException(java.lang.String,java.lang.Exception)
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#org/eclipse/jgit/gitrepo/RepoCommand$IncludedFileReader/readIncludeFile(java.lang.String)
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#org/eclipse/jgit/gitrepo/RepoCommand$CopyFile/CopyFile(org.eclipse.jgit.lib.Repository,java.lang.String,java.lang.String,java.lang.String)
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#org/xml/sax/Attributes/getValue(java.lang.String)
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#java/io/FileInputStream/FileInputStream(java.lang.String)
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#org/xml/sax/SAXException/SAXException(java.lang.Exception)
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#org/eclipse/jgit/gitrepo/RepoCommand$XmlManifest/read(java.io.InputStream)
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#java/lang/String/substring(int,int)
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#java/lang/String/lastIndexOf(int)
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#java/lang/StringBuilder/toString()
org/eclipse/jgit/gitrepo/RepoCommand/XmlManifest/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#org/eclipse/jgit/gitrepo/RepoCommand$Project/addCopyFile(org.eclipse.jgit.gitrepo.RepoCommand$CopyFile)
org/eclipse/jgit/transport/BundleWriter/writeBundle(org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)#java/io/Writer/write(java.lang.String)
org/eclipse/jgit/transport/BundleWriter/writeBundle(org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)#java/util/Set/iterator()
org/eclipse/jgit/transport/BundleWriter/writeBundle(org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)#java/util/HashSet/size()
org/eclipse/jgit/transport/BundleWriter/writeBundle(org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)#java/util/HashSet/HashSet()
org/eclipse/jgit/transport/BundleWriter/writeBundle(org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)#org/eclipse/jgit/revwalk/RevCommit/getId()
org/eclipse/jgit/transport/BundleWriter/writeBundle(org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)#org/eclipse/jgit/lib/ObjectId/copyTo(char[],java.io.Writer)
org/eclipse/jgit/transport/BundleWriter/writeBundle(org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/BundleWriter/writeBundle(org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)#java/util/Map$Entry/getKey()
org/eclipse/jgit/transport/BundleWriter/writeBundle(org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)#java/io/OutputStreamWriter/OutputStreamWriter(java.io.OutputStream,java.nio.charset.Charset)
org/eclipse/jgit/transport/BundleWriter/writeBundle(org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)#org/eclipse/jgit/revwalk/RevCommit/copyTo(char[],java.io.Writer)
org/eclipse/jgit/transport/BundleWriter/writeBundle(org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)#java/util/Map/values()
org/eclipse/jgit/transport/BundleWriter/writeBundle(org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)#java/util/HashSet/add(java.lang.Object)
org/eclipse/jgit/transport/BundleWriter/writeBundle(org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)#java/util/Iterator/next()
org/eclipse/jgit/transport/BundleWriter/writeBundle(org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)#java/util/HashSet/addAll(java.util.Collection)
org/eclipse/jgit/transport/BundleWriter/writeBundle(org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)#java/util/Map$Entry/getValue()
org/eclipse/jgit/transport/BundleWriter/writeBundle(org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)#java/util/Map/entrySet()
org/eclipse/jgit/transport/BundleWriter/writeBundle(org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)#java/io/Writer/write(int)
org/eclipse/jgit/transport/BundleWriter/writeBundle(org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)#java/io/Writer/flush()
org/eclipse/jgit/api/InitCommand/call()#org/eclipse/jgit/lib/RepositoryBuilder/setGitDir(java.io.File)
org/eclipse/jgit/api/InitCommand/call()#org/eclipse/jgit/lib/RepositoryBuilder/build()
org/eclipse/jgit/api/InitCommand/call()#org/eclipse/jgit/lib/RepositoryBuilder/getGitDir()
org/eclipse/jgit/api/InitCommand/call()#java/io/File/File(java.lang.String)
org/eclipse/jgit/api/InitCommand/call()#org/eclipse/jgit/lib/RepositoryBuilder/setBare()
org/eclipse/jgit/api/InitCommand/call()#org/eclipse/jgit/lib/RepositoryBuilder/readEnvironment()
org/eclipse/jgit/api/InitCommand/call()#java/io/File/File(java.io.File,java.lang.String)
org/eclipse/jgit/api/InitCommand/call()#java/io/IOException/getMessage()
org/eclipse/jgit/api/InitCommand/call()#java/io/File/getParentFile()
org/eclipse/jgit/internal/storage/pack/PackWriter/prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)#org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer$BitmapCommit/isReuseWalker()
org/eclipse/jgit/internal/storage/pack/PackWriter/prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)#java/util/List/isEmpty()
org/eclipse/jgit/internal/storage/pack/PackWriter/prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)#java/util/Iterator/next()
org/eclipse/jgit/internal/storage/pack/PackWriter/prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)#org/eclipse/jgit/lib/BitmapIndex$BitmapBuilder/contains(org.eclipse.jgit.lib.AnyObjectId)
org/eclipse/jgit/internal/storage/pack/PackWriter/prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)#java/util/Collection/iterator()
org/eclipse/jgit/internal/storage/pack/PackWriter/prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)#java/lang/IllegalStateException/IllegalStateException(java.lang.String)
org/eclipse/jgit/internal/storage/pack/PackWriter/prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)#java/util/Iterator/hasNext()
org/eclipse/jgit/internal/storage/pack/PackWriter/prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)#org/eclipse/jgit/lib/BitmapIndex$BitmapBuilder/build()
org/eclipse/jgit/internal/storage/pack/PackWriter/prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)#java/util/Collection/size()
org/eclipse/jgit/internal/storage/pack/PackWriter/prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/internal/storage/pack/PackWriter/prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)#org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer$BitmapCommit/name()
org/eclipse/jgit/internal/storage/pack/PackWriter/prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)#java/util/Collections/singleton(java.lang.Object)
org/eclipse/jgit/internal/storage/pack/PackWriter/prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)#org/eclipse/jgit/internal/storage/pack/PackWriterBitmapPreparer$BitmapCommit/getFlags()
org/eclipse/jgit/internal/storage/pack/PackWriter/writeDeltaObjectDeflate(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)#java/util/zip/CRC32/reset()
org/eclipse/jgit/internal/storage/pack/PackWriter/writeDeltaObjectDeflate(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)#org/eclipse/jgit/util/TemporaryBuffer$Heap/writeTo(java.io.OutputStream,org.eclipse.jgit.lib.ProgressMonitor)
org/eclipse/jgit/internal/storage/pack/PackWriter/writeDeltaObjectDeflate(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)#java/util/zip/Deflater/reset()
org/eclipse/jgit/internal/storage/pack/PackWriter/writeDeltaObjectDeflate(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)#org/eclipse/jgit/util/TemporaryBuffer$Heap/length()
org/eclipse/jgit/internal/storage/pack/PackWriter/writeDeltaObjectDeflate(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)#org/eclipse/jgit/internal/storage/pack/PackOutputStream/write(byte[])
org/eclipse/jgit/internal/storage/pack/PackWriter/writeDeltaObjectDeflate(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)#org/eclipse/jgit/internal/storage/pack/DeltaCache$Ref/get()
org/eclipse/jgit/internal/storage/pack/PackWriter/writeDeltaObjectDeflate(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)#java/util/zip/DeflaterOutputStream/finish()
org/eclipse/jgit/internal/storage/pack/PackWriter/writeDeltaObjectDeflate(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)#org/eclipse/jgit/internal/storage/pack/ObjectToPack/getOffset()
org/eclipse/jgit/internal/storage/pack/PackWriter/writeDeltaObjectDeflate(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)#java/util/zip/DeflaterOutputStream/DeflaterOutputStream(java.io.OutputStream,java.util.zip.Deflater)
org/eclipse/jgit/internal/storage/pack/PackWriter/writeDeltaObjectDeflate(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)#org/eclipse/jgit/internal/storage/pack/ObjectToPack/setOffset(long)
org/eclipse/jgit/internal/storage/pack/PackWriter/searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)#java/util/Iterator/hasNext()
org/eclipse/jgit/internal/storage/pack/PackWriter/searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)#org/eclipse/jgit/lib/AsyncObjectSizeQueue/release()
org/eclipse/jgit/internal/storage/pack/PackWriter/searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)#java/util/List/subList(int,int)
org/eclipse/jgit/internal/storage/pack/PackWriter/searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)#java/util/List/size()
org/eclipse/jgit/internal/storage/pack/PackWriter/searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)#java/util/Arrays/asList(java.lang.Object[])
org/eclipse/jgit/internal/storage/pack/PackWriter/searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)#java/util/Iterator/next()
org/eclipse/jgit/internal/storage/pack/PackWriter/searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)#java/util/Arrays/sort(java.lang.Object[],int,int,java.util.Comparator)
org/eclipse/jgit/internal/storage/pack/PackWriter/searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)#java/lang/System/currentTimeMillis()
org/eclipse/jgit/internal/storage/pack/PackWriter/searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)#java/util/List/iterator()
org/eclipse/jgit/internal/storage/pack/PackWriter/searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)#java/lang/Math/min(int,int)
org/eclipse/jgit/internal/storage/pack/PackWriter/searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)#org/eclipse/jgit/internal/storage/pack/PackWriter$3/3(org.eclipse.jgit.internal.storage.pack.PackWriter)
org/eclipse/jgit/internal/storage/pack/PackWriter/parallelDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int,int)#java/util/ArrayList/ArrayList(int)
org/eclipse/jgit/internal/storage/pack/PackWriter/parallelDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int,int)#java/io/IOException/IOException(java.lang.String)
org/eclipse/jgit/internal/storage/pack/PackWriter/parallelDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int,int)#java/util/Iterator/hasNext()
org/eclipse/jgit/internal/storage/pack/PackWriter/parallelDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int,int)#java/io/IOException/initCause(java.lang.Throwable)
org/eclipse/jgit/internal/storage/pack/PackWriter/parallelDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int,int)#java/util/Collections/synchronizedList(java.util.List)
org/eclipse/jgit/internal/storage/pack/PackWriter/parallelDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int,int)#java/util/List/isEmpty()
org/eclipse/jgit/internal/storage/pack/PackWriter/parallelDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int,int)#org/eclipse/jgit/internal/storage/pack/DeltaTask$Block/partitionTasks()
org/eclipse/jgit/internal/storage/pack/PackWriter/parallelDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int,int)#java/util/Iterator/next()
org/eclipse/jgit/internal/storage/pack/PackWriter/parallelDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int,int)#org/eclipse/jgit/internal/storage/pack/DeltaTask$Block/cost()
org/eclipse/jgit/internal/storage/pack/PackWriter/parallelDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int,int)#java/util/List/get(int)
org/eclipse/jgit/internal/storage/pack/PackWriter/parallelDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int,int)#java/util/List/iterator()
org/eclipse/jgit/internal/storage/pack/PackWriter/parallelDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int,int)#java/util/concurrent/Executor/execute(java.lang.Runnable)
org/eclipse/jgit/internal/storage/pack/PackWriter/parallelDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int,int)#java/lang/Throwable/getMessage()
org/eclipse/jgit/internal/storage/pack/PackWriter/parallelDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int,int)#java/util/List/size()
org/eclipse/jgit/internal/storage/pack/PackWriter/parallelDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int,int)#org/eclipse/jgit/internal/storage/pack/PackWriter$4/4(org.eclipse.jgit.internal.storage.pack.PackWriter,org.eclipse.jgit.internal.storage.pack.DeltaTask,java.util.List)
org/eclipse/jgit/internal/storage/pack/PackWriter/parallelDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int,int)#java/util/concurrent/ExecutorService/shutdown()
org/eclipse/jgit/internal/storage/pack/PackWriter/parallelDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int,int)#java/util/concurrent/ExecutorService/awaitTermination(long,java.util.concurrent.TimeUnit)
org/eclipse/jgit/internal/storage/pack/PackWriter/parallelDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int,int)#org/eclipse/jgit/internal/storage/pack/DeltaTask$Block/Block(int,org.eclipse.jgit.storage.pack.PackConfig,org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.internal.storage.pack.DeltaCache,org.eclipse.jgit.lib.ThreadSafeProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int,int)
org/eclipse/jgit/internal/storage/pack/PackWriter/parallelDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int,int)#java/util/concurrent/Executors/newFixedThreadPool(int)
org/eclipse/jgit/internal/storage/pack/PackWriter/runTasks(java.util.concurrent.ExecutorService,org.eclipse.jgit.lib.ThreadSafeProgressMonitor,org.eclipse.jgit.internal.storage.pack.DeltaTask$Block,java.util.List)#java/util/ArrayList/ArrayList(int)
org/eclipse/jgit/internal/storage/pack/PackWriter/runTasks(java.util.concurrent.ExecutorService,org.eclipse.jgit.lib.ThreadSafeProgressMonitor,org.eclipse.jgit.internal.storage.pack.DeltaTask$Block,java.util.List)#java/io/IOException/IOException(java.lang.String)
org/eclipse/jgit/internal/storage/pack/PackWriter/runTasks(java.util.concurrent.ExecutorService,org.eclipse.jgit.lib.ThreadSafeProgressMonitor,org.eclipse.jgit.internal.storage.pack.DeltaTask$Block,java.util.List)#java/util/Iterator/hasNext()
org/eclipse/jgit/internal/storage/pack/PackWriter/runTasks(java.util.concurrent.ExecutorService,org.eclipse.jgit.lib.ThreadSafeProgressMonitor,org.eclipse.jgit.internal.storage.pack.DeltaTask$Block,java.util.List)#java/util/concurrent/ExecutionException/getCause()
org/eclipse/jgit/internal/storage/pack/PackWriter/runTasks(java.util.concurrent.ExecutorService,org.eclipse.jgit.lib.ThreadSafeProgressMonitor,org.eclipse.jgit.internal.storage.pack.DeltaTask$Block,java.util.List)#java/util/List/size()
org/eclipse/jgit/internal/storage/pack/PackWriter/runTasks(java.util.concurrent.ExecutorService,org.eclipse.jgit.lib.ThreadSafeProgressMonitor,org.eclipse.jgit.internal.storage.pack.DeltaTask$Block,java.util.List)#java/util/Iterator/next()
org/eclipse/jgit/internal/storage/pack/PackWriter/runTasks(java.util.concurrent.ExecutorService,org.eclipse.jgit.lib.ThreadSafeProgressMonitor,org.eclipse.jgit.internal.storage.pack.DeltaTask$Block,java.util.List)#java/util/concurrent/Future/cancel(boolean)
org/eclipse/jgit/internal/storage/pack/PackWriter/runTasks(java.util.concurrent.ExecutorService,org.eclipse.jgit.lib.ThreadSafeProgressMonitor,org.eclipse.jgit.internal.storage.pack.DeltaTask$Block,java.util.List)#java/util/List/add(java.lang.Object)
org/eclipse/jgit/internal/storage/pack/PackWriter/runTasks(java.util.concurrent.ExecutorService,org.eclipse.jgit.lib.ThreadSafeProgressMonitor,org.eclipse.jgit.internal.storage.pack.DeltaTask$Block,java.util.List)#java/util/List/iterator()
org/eclipse/jgit/internal/storage/pack/PackWriter/runTasks(java.util.concurrent.ExecutorService,org.eclipse.jgit.lib.ThreadSafeProgressMonitor,org.eclipse.jgit.internal.storage.pack.DeltaTask$Block,java.util.List)#java/util/concurrent/Future/get()
org/eclipse/jgit/internal/storage/pack/PackWriter/runTasks(java.util.concurrent.ExecutorService,org.eclipse.jgit.lib.ThreadSafeProgressMonitor,org.eclipse.jgit.internal.storage.pack.DeltaTask$Block,java.util.List)#java/util/concurrent/ExecutorService/submit(java.util.concurrent.Callable)
org/eclipse/jgit/internal/storage/pack/PackWriter/findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)#org/eclipse/jgit/revwalk/ObjectWalk/parseAny(java.lang.Iterable,boolean)
org/eclipse/jgit/internal/storage/pack/PackWriter/findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)#java/util/ArrayList/ArrayList(int)
org/eclipse/jgit/internal/storage/pack/PackWriter/findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)#java/util/Set/size()
org/eclipse/jgit/internal/storage/pack/PackWriter/findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)#java/util/List/isEmpty()
org/eclipse/jgit/internal/storage/pack/PackWriter/findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)#java/util/List/size()
org/eclipse/jgit/internal/storage/pack/PackWriter/findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)#java/util/Iterator/hasNext()
org/eclipse/jgit/internal/storage/pack/PackWriter/findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)#org/eclipse/jgit/revwalk/AsyncRevObjectQueue/release()
org/eclipse/jgit/internal/storage/pack/PackWriter/findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)#org/eclipse/jgit/revwalk/ObjectWalk/lookupOrNull(org.eclipse.jgit.lib.AnyObjectId)
org/eclipse/jgit/internal/storage/pack/PackWriter/findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)#org/eclipse/jgit/revwalk/DepthWalk$ObjectWalk/markUnshallow(org.eclipse.jgit.revwalk.RevObject)
org/eclipse/jgit/internal/storage/pack/PackWriter/findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)#org/eclipse/jgit/revwalk/ObjectWalk/setRetainBody(boolean)
org/eclipse/jgit/internal/storage/pack/PackWriter/findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)#java/util/Collections/emptySet()
org/eclipse/jgit/internal/storage/pack/PackWriter/findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)#org/eclipse/jgit/revwalk/ObjectWalk/carry(org.eclipse.jgit.revwalk.RevFlag)
org/eclipse/jgit/internal/storage/pack/PackWriter/findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)#java/util/List/addAll(java.util.Collection)
org/eclipse/jgit/internal/storage/pack/PackWriter/findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)#org/eclipse/jgit/revwalk/RevCommit/has(org.eclipse.jgit.revwalk.RevFlag)
org/eclipse/jgit/internal/storage/pack/PackWriter/findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)#java/util/Iterator/next()
org/eclipse/jgit/internal/storage/pack/PackWriter/findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)#java/util/Set/isEmpty()
org/eclipse/jgit/internal/storage/pack/PackWriter/findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)#org/eclipse/jgit/revwalk/ObjectWalk/newFlag(java.lang.String)
org/eclipse/jgit/internal/storage/pack/PackWriter/findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)#java/util/Set/contains(java.lang.Object)
org/eclipse/jgit/internal/storage/pack/PackWriter/findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)#java/util/Set/iterator()
org/eclipse/jgit/internal/storage/pack/PackWriter/findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)#org/eclipse/jgit/revwalk/DepthWalk$ObjectWalk/markRoot(org.eclipse.jgit.revwalk.RevObject)
org/eclipse/jgit/internal/storage/pack/PackWriter/findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)#org/eclipse/jgit/revwalk/RevCommit/add(org.eclipse.jgit.revwalk.RevFlag)
org/eclipse/jgit/internal/storage/pack/PackWriter/findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)#java/util/List/add(java.lang.Object)
org/eclipse/jgit/internal/storage/pack/PackWriter/findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)#java/lang/System/currentTimeMillis()
org/eclipse/jgit/internal/storage/pack/PackWriter/findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)#org/eclipse/jgit/revwalk/ObjectWalk/parseAny(org.eclipse.jgit.lib.AnyObjectId)
org/eclipse/jgit/internal/storage/pack/PackWriter/findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)#java/util/List/iterator()
org/eclipse/jgit/internal/storage/pack/PackWriter/findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)#java/util/Collection/iterator()
org/eclipse/jgit/internal/storage/pack/PackWriter/findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)#java/util/HashSet/HashSet()
org/eclipse/jgit/internal/storage/pack/PackWriter/findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)#java/util/Collections/unmodifiableSet(java.util.Set)
org/eclipse/jgit/internal/storage/pack/PackWriter/findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)#java/util/Set/add(java.lang.Object)
org/eclipse/jgit/internal/storage/pack/PackWriter/findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)#java/util/HashSet/HashSet(java.util.Collection)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryInserter/toTemp(java.security.MessageDigest,int,long,java.io.InputStream)#java/util/zip/DeflaterOutputStream/finish()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryInserter/toTemp(java.security.MessageDigest,int,long,java.io.InputStream)#java/nio/channels/Channels/newOutputStream(java.nio.channels.WritableByteChannel)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryInserter/toTemp(java.security.MessageDigest,int,long,java.io.InputStream)#java/io/FileOutputStream/close()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryInserter/toTemp(java.security.MessageDigest,int,long,java.io.InputStream)#java/io/FileOutputStream/FileOutputStream(java.io.File)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryInserter/toTemp(java.security.MessageDigest,int,long,java.io.InputStream)#java/io/FileOutputStream/getChannel()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryInserter/toTemp(java.security.MessageDigest,int,long,java.io.InputStream)#java/io/InputStream/read(byte[],int,int)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryInserter/toTemp(java.security.MessageDigest,int,long,java.io.InputStream)#java/lang/Math/min(long,long)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryInserter/toTemp(java.security.MessageDigest,int,long,java.io.InputStream)#java/security/DigestOutputStream/write(byte[],int,int)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryInserter/toTemp(java.security.MessageDigest,int,long,java.io.InputStream)#java/nio/channels/FileChannel/force(boolean)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryInserter/toTemp(java.security.MessageDigest,int,long,java.io.InputStream)#java/security/DigestOutputStream/DigestOutputStream(java.io.OutputStream,java.security.MessageDigest)
org/eclipse/jgit/internal/storage/file/ObjectDirectoryInserter/toTemp(java.security.MessageDigest,int,long,java.io.InputStream)#java/security/DigestOutputStream/flush()
org/eclipse/jgit/internal/storage/file/ObjectDirectoryInserter/toTemp(java.security.MessageDigest,int,long,java.io.InputStream)#org/eclipse/jgit/internal/storage/file/ObjectDirectoryInserter/buffer()
org/eclipse/jgit/transport/NetRC/parse()#org/eclipse/jgit/transport/NetRC$NetRCEntry/NetRCEntry()
org/eclipse/jgit/transport/NetRC/parse()#java/io/BufferedReader/close()
org/eclipse/jgit/transport/NetRC/parse()#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/transport/NetRC/parse()#java/lang/String/toLowerCase()
org/eclipse/jgit/transport/NetRC/parse()#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/NetRC/parse()#java/lang/RuntimeException/RuntimeException(java.lang.Throwable)
org/eclipse/jgit/transport/NetRC/parse()#java/lang/String/length()
org/eclipse/jgit/transport/NetRC/parse()#java/io/File/lastModified()
org/eclipse/jgit/transport/NetRC/parse()#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/NetRC/parse()#java/util/regex/Matcher/reset(java.lang.CharSequence)
org/eclipse/jgit/transport/NetRC/parse()#java/util/regex/Pattern/matcher(java.lang.CharSequence)
org/eclipse/jgit/transport/NetRC/parse()#org/eclipse/jgit/transport/NetRC$State/ordinal()
org/eclipse/jgit/transport/NetRC/parse()#java/io/FileReader/FileReader(java.io.File)
org/eclipse/jgit/transport/NetRC/parse()#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/NetRC/parse()#org/eclipse/jgit/transport/NetRC$NetRCEntry/complete()
org/eclipse/jgit/transport/NetRC/parse()#java/util/TreeMap/get(java.lang.Object)
org/eclipse/jgit/transport/NetRC/parse()#java/util/regex/Matcher/group()
org/eclipse/jgit/transport/NetRC/parse()#java/util/Map/clear()
org/eclipse/jgit/transport/NetRC/parse()#java/io/BufferedReader/BufferedReader(java.io.Reader)
org/eclipse/jgit/transport/NetRC/parse()#java/io/BufferedReader/readLine()
org/eclipse/jgit/transport/NetRC/parse()#java/util/regex/Matcher/find()
org/eclipse/jgit/transport/NetRC/parse()#java/lang/String/toCharArray()
org/eclipse/jgit/transport/NetRC/parse()#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/transport/PackParser/readPackFooter()#java/security/MessageDigest/digest()
org/eclipse/jgit/transport/PackParser/readPackFooter()#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/PackParser/readPackFooter()#java/lang/Integer/toHexString(int)
org/eclipse/jgit/transport/PackParser/readPackFooter()#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/transport/PackParser/readPackFooter()#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/PackParser/readPackFooter()#java/io/InputStream/reset()
org/eclipse/jgit/transport/PackParser/readPackFooter()#java/util/Arrays/equals(byte[],byte[])
org/eclipse/jgit/transport/PackParser/readPackFooter()#java/io/InputStream/read()
org/eclipse/jgit/transport/PackParser/readPackFooter()#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/PackParser/readPackFooter()#java/lang/System/arraycopy(java.lang.Object,int,java.lang.Object,int,int)
org/eclipse/jgit/transport/PackParser/doDeferredCheckBlobs()#org/eclipse/jgit/transport/PackParser$ObjectTypeAndSize/ObjectTypeAndSize()
org/eclipse/jgit/transport/PackParser/doDeferredCheckBlobs()#org/eclipse/jgit/lib/ObjectStream/close()
org/eclipse/jgit/transport/PackParser/doDeferredCheckBlobs()#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/PackParser/doDeferredCheckBlobs()#org/eclipse/jgit/transport/PackedObjectInfo/name()
org/eclipse/jgit/transport/PackParser/doDeferredCheckBlobs()#java/lang/Integer/valueOf(int)
org/eclipse/jgit/transport/PackParser/doDeferredCheckBlobs()#java/lang/Math/min(long,long)
org/eclipse/jgit/transport/PackParser/doDeferredCheckBlobs()#java/io/IOException/IOException(java.lang.String)
org/eclipse/jgit/transport/PackParser/doDeferredCheckBlobs()#java/util/Iterator/next()
org/eclipse/jgit/transport/PackParser/doDeferredCheckBlobs()#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/transport/PackParser/doDeferredCheckBlobs()#java/io/InputStream/close()
org/eclipse/jgit/transport/PackParser/resolveDeltasWithExternalBases(org.eclipse.jgit.lib.ProgressMonitor)#java/util/ArrayList/ArrayList(int)
org/eclipse/jgit/transport/PackParser/resolveDeltasWithExternalBases(org.eclipse.jgit.lib.ProgressMonitor)#java/io/IOException/IOException(java.lang.String)
org/eclipse/jgit/transport/PackParser/resolveDeltasWithExternalBases(org.eclipse.jgit.lib.ProgressMonitor)#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/PackParser/resolveDeltasWithExternalBases(org.eclipse.jgit.lib.ProgressMonitor)#java/util/List/add(java.lang.Object)
org/eclipse/jgit/transport/PackParser/resolveDeltasWithExternalBases(org.eclipse.jgit.lib.ProgressMonitor)#org/eclipse/jgit/transport/PackParser$DeltaVisit/next()
org/eclipse/jgit/transport/PackParser/resolveDeltasWithExternalBases(org.eclipse.jgit.lib.ProgressMonitor)#org/eclipse/jgit/transport/PackParser$ObjectTypeAndSize/ObjectTypeAndSize()
org/eclipse/jgit/transport/PackParser/resolveDeltasWithExternalBases(org.eclipse.jgit.lib.ProgressMonitor)#org/eclipse/jgit/transport/PackParser$DeltaVisit/DeltaVisit()
org/eclipse/jgit/transport/PackParser/resolveDeltasWithExternalBases(org.eclipse.jgit.lib.ProgressMonitor)#java/util/Iterator/next()
org/eclipse/jgit/transport/PackParser/resolveDeltasWithExternalBases(org.eclipse.jgit.lib.ProgressMonitor)#java/util/List/iterator()
org/eclipse/jgit/internal/storage/file/RefDirectory/LooseScanner/scanTree(java.lang.String,java.io.File)#java/io/File/File(java.io.File,java.lang.String)
org/eclipse/jgit/internal/storage/file/RefDirectory/LooseScanner/scanTree(java.lang.String,java.io.File)#java/io/File/isDirectory()
org/eclipse/jgit/internal/storage/file/RefDirectory/LooseScanner/scanTree(java.lang.String,java.io.File)#org/eclipse/jgit/internal/storage/file/RefDirectory$LooseScanner/scanTree(java.lang.String,java.io.File)
org/eclipse/jgit/internal/storage/file/RefDirectory/LooseScanner/scanTree(java.lang.String,java.io.File)#java/lang/String/length()
org/eclipse/jgit/internal/storage/file/RefDirectory/LooseScanner/scanTree(java.lang.String,java.io.File)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/internal/storage/file/RefDirectory/LooseScanner/scanTree(java.lang.String,java.io.File)#java/io/File/list(java.io.FilenameFilter)
org/eclipse/jgit/internal/storage/file/RefDirectory/LooseScanner/scanTree(java.lang.String,java.io.File)#java/lang/StringBuilder/append(char)
org/eclipse/jgit/internal/storage/file/RefDirectory/LooseScanner/scanTree(java.lang.String,java.io.File)#org/eclipse/jgit/internal/storage/file/RefDirectory$LooseScanner/scanOne(java.lang.String)
org/eclipse/jgit/internal/storage/file/RefDirectory/LooseScanner/scanTree(java.lang.String,java.io.File)#java/util/Arrays/sort(java.lang.Object[])
org/eclipse/jgit/internal/storage/file/RefDirectory/LooseScanner/scanTree(java.lang.String,java.io.File)#java/lang/StringBuilder/toString()
org/eclipse/jgit/internal/storage/file/RefDirectory/LooseScanner/scanTree(java.lang.String,java.io.File)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/internal/storage/file/RefDirectory/LooseScanner/scanTree(java.lang.String,java.io.File)#java/lang/String/charAt(int)
org/eclipse/jgit/internal/storage/file/RefDirectory/LooseScanner/scan(java.lang.String)#org/eclipse/jgit/util/RefList$Builder/add(org.eclipse.jgit.lib.Ref)
org/eclipse/jgit/internal/storage/file/RefDirectory/LooseScanner/scan(java.lang.String)#java/lang/String/length()
org/eclipse/jgit/internal/storage/file/RefDirectory/LooseScanner/scan(java.lang.String)#java/lang/String/substring(int)
org/eclipse/jgit/internal/storage/file/RefDirectory/LooseScanner/scan(java.lang.String)#java/lang/String/endsWith(java.lang.String)
org/eclipse/jgit/internal/storage/file/RefDirectory/LooseScanner/scan(java.lang.String)#java/io/File/File(java.io.File,java.lang.String)
org/eclipse/jgit/internal/storage/file/RefDirectory/LooseScanner/scan(java.lang.String)#org/eclipse/jgit/internal/storage/file/RefDirectory$LooseScanner/scanTree(java.lang.String,java.io.File)
org/eclipse/jgit/internal/storage/file/RefDirectory/LooseScanner/scan(java.lang.String)#org/eclipse/jgit/internal/storage/file/RefDirectory$LooseRef/getName()
org/eclipse/jgit/internal/storage/file/RefDirectory/LooseScanner/scan(java.lang.String)#java/lang/String/equals(java.lang.Object)
org/eclipse/jgit/internal/storage/file/RefDirectory/LooseScanner/scan(java.lang.String)#org/eclipse/jgit/internal/storage/file/RefDirectory$LooseScanner/scanOne(java.lang.String)
org/eclipse/jgit/internal/storage/file/RefDirectory/LooseScanner/scan(java.lang.String)#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/transport/BasePackFetchConnection/markReachable(java.util.Set,int)#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/BasePackFetchConnection/markReachable(java.util.Set,int)#java/util/Set/iterator()
org/eclipse/jgit/transport/BasePackFetchConnection/markReachable(java.util.Set,int)#java/util/Date/Date(long)
org/eclipse/jgit/transport/BasePackFetchConnection/markReachable(java.util.Set,int)#org/eclipse/jgit/revwalk/RevCommitList/add(java.lang.Object)
org/eclipse/jgit/transport/BasePackFetchConnection/markReachable(java.util.Set,int)#java/util/Map/values()
org/eclipse/jgit/transport/BasePackFetchConnection/markReachable(java.util.Set,int)#org/eclipse/jgit/revwalk/RevCommit/has(org.eclipse.jgit.revwalk.RevFlag)
org/eclipse/jgit/transport/BasePackFetchConnection/markReachable(java.util.Set,int)#java/util/Iterator/next()
org/eclipse/jgit/transport/BasePackFetchConnection/markReachable(java.util.Set,int)#org/eclipse/jgit/revwalk/RevCommit/add(org.eclipse.jgit.revwalk.RevFlag)
org/eclipse/jgit/transport/BasePackFetchConnection/markReachable(java.util.Set,int)#java/util/Collection/iterator()
org/eclipse/jgit/api/LsRemoteCommand/execute()#org/eclipse/jgit/api/LsRemoteCommand/checkCallable()
org/eclipse/jgit/api/LsRemoteCommand/execute()#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/api/LsRemoteCommand/execute()#java/util/ArrayList/ArrayList(int)
org/eclipse/jgit/api/LsRemoteCommand/execute()#java/util/Collection/isEmpty()
org/eclipse/jgit/api/LsRemoteCommand/execute()#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/api/LsRemoteCommand/execute()#java/util/Collection/iterator()
org/eclipse/jgit/api/LsRemoteCommand/execute()#org/eclipse/jgit/transport/FetchConnection/getRefs()
org/eclipse/jgit/api/LsRemoteCommand/execute()#org/eclipse/jgit/transport/FetchConnection/close()
org/eclipse/jgit/api/LsRemoteCommand/execute()#java/util/Iterator/hasNext()
org/eclipse/jgit/api/LsRemoteCommand/execute()#org/eclipse/jgit/errors/TransportException/getMessage()
org/eclipse/jgit/api/LsRemoteCommand/execute()#java/util/Iterator/next()
org/eclipse/jgit/api/LsRemoteCommand/execute()#java/util/HashMap/HashMap()
org/eclipse/jgit/api/LsRemoteCommand/execute()#org/eclipse/jgit/api/LsRemoteCommand/configure(org.eclipse.jgit.transport.Transport)
org/eclipse/jgit/api/LsRemoteCommand/execute()#java/util/Collection/add(java.lang.Object)
org/eclipse/jgit/revwalk/RevWalk/parseAny(java.lang.Iterable,boolean)#java/util/ArrayList/ArrayList()
org/eclipse/jgit/revwalk/RevWalk/parseAny(java.lang.Iterable,boolean)#java/util/Iterator/hasNext()
org/eclipse/jgit/revwalk/RevWalk/parseAny(java.lang.Iterable,boolean)#org/eclipse/jgit/revwalk/RevWalk$1/1(org.eclipse.jgit.revwalk.RevWalk,java.util.Iterator)
org/eclipse/jgit/revwalk/RevWalk/parseAny(java.lang.Iterable,boolean)#java/util/List/isEmpty()
org/eclipse/jgit/revwalk/RevWalk/parseAny(java.lang.Iterable,boolean)#java/util/Iterator/next()
org/eclipse/jgit/revwalk/RevWalk/parseAny(java.lang.Iterable,boolean)#java/util/List/add(java.lang.Object)
org/eclipse/jgit/revwalk/RevWalk/parseAny(java.lang.Iterable,boolean)#java/util/List/iterator()
org/eclipse/jgit/revwalk/RevWalk/parseAny(java.lang.Iterable,boolean)#java/lang/Iterable/iterator()
org/eclipse/jgit/revwalk/RevWalk/parseAny(java.lang.Iterable,boolean)#org/eclipse/jgit/revwalk/RevWalk$2/2(org.eclipse.jgit.revwalk.RevWalk,java.util.Iterator,org.eclipse.jgit.lib.AsyncObjectLoaderQueue)
org/eclipse/jgit/api/DeleteBranchCommand/call()#org/eclipse/jgit/api/DeleteBranchCommand/setCallable(boolean)
org/eclipse/jgit/api/DeleteBranchCommand/call()#java/util/Iterator/hasNext()
org/eclipse/jgit/api/DeleteBranchCommand/call()#java/lang/String/length()
org/eclipse/jgit/api/DeleteBranchCommand/call()#java/util/Iterator/next()
org/eclipse/jgit/api/DeleteBranchCommand/call()#org/eclipse/jgit/lib/RefUpdate$Result/name()
org/eclipse/jgit/api/DeleteBranchCommand/call()#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/api/DeleteBranchCommand/call()#java/util/Set/iterator()
org/eclipse/jgit/api/DeleteBranchCommand/call()#java/lang/String/substring(int)
org/eclipse/jgit/api/DeleteBranchCommand/call()#org/eclipse/jgit/api/DeleteBranchCommand/checkCallable()
org/eclipse/jgit/api/DeleteBranchCommand/call()#org/eclipse/jgit/lib/RefUpdate$Result/ordinal()
org/eclipse/jgit/api/DeleteBranchCommand/call()#java/util/ArrayList/ArrayList()
org/eclipse/jgit/api/DeleteBranchCommand/call()#java/io/IOException/getMessage()
org/eclipse/jgit/api/DeleteBranchCommand/call()#java/lang/String/equals(java.lang.Object)
org/eclipse/jgit/api/DeleteBranchCommand/call()#java/util/Set/isEmpty()
org/eclipse/jgit/api/DeleteBranchCommand/call()#java/util/List/add(java.lang.Object)
org/eclipse/jgit/api/DeleteBranchCommand/call()#org/eclipse/jgit/lib/StoredConfig/unsetSection(java.lang.String,java.lang.String)
org/eclipse/jgit/api/DeleteBranchCommand/call()#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/transport/WalkFetchConnection/downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)#java/util/LinkedList/isEmpty()
org/eclipse/jgit/transport/WalkFetchConnection/downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/WalkFetchConnection/downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/WalkFetchConnection/downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)#java/lang/String/substring(int)
org/eclipse/jgit/transport/WalkFetchConnection/downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)#java/util/List/add(java.lang.Object)
org/eclipse/jgit/transport/WalkFetchConnection/downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)#java/util/Collection/iterator()
org/eclipse/jgit/transport/WalkFetchConnection/downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)#java/util/HashMap/get(java.lang.Object)
org/eclipse/jgit/transport/WalkFetchConnection/downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)#org/eclipse/jgit/errors/TransportException/initCause(java.lang.Throwable)
org/eclipse/jgit/transport/WalkFetchConnection/downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)#java/util/List/isEmpty()
org/eclipse/jgit/transport/WalkFetchConnection/downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)#java/util/Collection/isEmpty()
org/eclipse/jgit/transport/WalkFetchConnection/downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)#java/util/LinkedList/removeFirst()
org/eclipse/jgit/transport/WalkFetchConnection/downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)#java/util/List/size()
org/eclipse/jgit/transport/WalkFetchConnection/downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)#org/eclipse/jgit/transport/WalkFetchConnection$RemotePack/RemotePack(org.eclipse.jgit.transport.WalkFetchConnection,org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)
org/eclipse/jgit/transport/WalkFetchConnection/downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)#java/util/Iterator/next()
org/eclipse/jgit/transport/WalkFetchConnection/downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)#java/util/LinkedList/add(java.lang.Object)
org/eclipse/jgit/transport/WalkFetchConnection/downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/transport/WalkFetchConnection/downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)#java/lang/String/substring(int,int)
org/eclipse/jgit/transport/WalkFetchConnection/downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/WalkFetchConnection/downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)#java/util/List/get(int)
org/eclipse/jgit/transport/WalkFetchConnection/downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)#java/util/Set/add(java.lang.Object)
org/eclipse/jgit/transport/WalkFetchConnection/downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/WalkFetchConnection/downloadPackedObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)#java/util/LinkedList/iterator()
org/eclipse/jgit/transport/WalkFetchConnection/downloadPackedObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/WalkFetchConnection/downloadPackedObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/transport/WalkFetchConnection/downloadPackedObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)#java/io/FileNotFoundException/FileNotFoundException(java.lang.String)
org/eclipse/jgit/transport/WalkFetchConnection/downloadPackedObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)#java/util/Iterator/remove()
org/eclipse/jgit/transport/WalkFetchConnection/downloadPackedObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)#java/io/IOException/getMessage()
org/eclipse/jgit/transport/WalkFetchConnection/downloadPackedObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)#org/eclipse/jgit/transport/WalkFetchConnection$RemotePack/downloadPack(org.eclipse.jgit.lib.ProgressMonitor)
org/eclipse/jgit/transport/WalkFetchConnection/downloadPackedObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)#java/util/Iterator/next()
org/eclipse/jgit/transport/WalkFetchConnection/downloadPackedObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)#java/util/LinkedList/add(java.lang.Object)
org/eclipse/jgit/transport/WalkFetchConnection/downloadPackedObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)#org/eclipse/jgit/transport/WalkFetchConnection$RemotePack/openIndex(org.eclipse.jgit.lib.ProgressMonitor)
org/eclipse/jgit/merge/StrategySimpleTwoWayInCore/InCoreMerger/mergeImpl()#org/eclipse/jgit/treewalk/NameConflictTreeWalk/addTree(org.eclipse.jgit.treewalk.AbstractTreeIterator)
org/eclipse/jgit/merge/StrategySimpleTwoWayInCore/InCoreMerger/mergeImpl()#org/eclipse/jgit/treewalk/NameConflictTreeWalk/next()
org/eclipse/jgit/merge/StrategySimpleTwoWayInCore/InCoreMerger/mergeImpl()#org/eclipse/jgit/treewalk/NameConflictTreeWalk/getRawMode(int)
org/eclipse/jgit/merge/StrategySimpleTwoWayInCore/InCoreMerger/mergeImpl()#org/eclipse/jgit/merge/StrategySimpleTwoWayInCore$InCoreMerger/getObjectInserter()
org/eclipse/jgit/merge/StrategySimpleTwoWayInCore/InCoreMerger/mergeImpl()#org/eclipse/jgit/merge/StrategySimpleTwoWayInCore$InCoreMerger/nonTree(int)
org/eclipse/jgit/merge/StrategySimpleTwoWayInCore/InCoreMerger/mergeImpl()#org/eclipse/jgit/treewalk/NameConflictTreeWalk/isSubtree()
org/eclipse/jgit/merge/StrategySimpleTwoWayInCore/InCoreMerger/mergeImpl()#org/eclipse/jgit/treewalk/NameConflictTreeWalk/idEqual(int,int)
org/eclipse/jgit/merge/StrategySimpleTwoWayInCore/InCoreMerger/mergeImpl()#org/eclipse/jgit/treewalk/NameConflictTreeWalk/enterSubtree()
org/eclipse/jgit/merge/StrategySimpleTwoWayInCore/InCoreMerger/mergeImpl()#org/eclipse/jgit/treewalk/NameConflictTreeWalk/addTree(org.eclipse.jgit.lib.AnyObjectId)
org/eclipse/jgit/merge/StrategySimpleTwoWayInCore/InCoreMerger/mergeImpl()#org/eclipse/jgit/merge/StrategySimpleTwoWayInCore$InCoreMerger/add(int,int)
org/eclipse/jgit/merge/StrategySimpleTwoWayInCore/InCoreMerger/mergeImpl()#org/eclipse/jgit/merge/StrategySimpleTwoWayInCore$InCoreMerger/mergeBase()
org/eclipse/jgit/transport/UploadPack/parseWants()#java/util/ArrayList/ArrayList()
org/eclipse/jgit/transport/UploadPack/parseWants()#java/util/Iterator/next()
org/eclipse/jgit/transport/UploadPack/parseWants()#java/util/List/add(java.lang.Object)
org/eclipse/jgit/transport/UploadPack/parseWants()#org/eclipse/jgit/transport/UploadPack$RequestValidator/checkWants(org.eclipse.jgit.transport.UploadPack,java.util.List)
org/eclipse/jgit/transport/UploadPack/parseWants()#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/UploadPack/parseWants()#org/eclipse/jgit/revwalk/AsyncRevObjectQueue/release()
org/eclipse/jgit/transport/UploadPack/parseWants()#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/transport/UploadPack/parseWants()#java/util/Set/contains(java.lang.Object)
org/eclipse/jgit/transport/UploadPack/parseWants()#java/util/Set/iterator()
org/eclipse/jgit/transport/UploadPack/parseWants()#org/eclipse/jgit/lib/ObjectId/name()
org/eclipse/jgit/transport/UploadPack/parseWants()#java/util/Set/clear()
org/eclipse/jgit/transport/UploadPack/sendPack(boolean)#java/io/OutputStream/flush()
org/eclipse/jgit/transport/UploadPack/sendPack(boolean)#java/util/Set/contains(java.lang.Object)
org/eclipse/jgit/transport/UploadPack/sendPack(boolean)#java/lang/StringBuilder/append(char)
org/eclipse/jgit/transport/UploadPack/sendPack(boolean)#java/util/HashSet/HashSet()
org/eclipse/jgit/transport/UploadPack/sendPack(boolean)#org/eclipse/jgit/internal/storage/pack/PackWriter$Statistics/getMessage()
org/eclipse/jgit/transport/UploadPack/sendPack(boolean)#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/UploadPack/sendPack(boolean)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/UploadPack/sendPack(boolean)#org/eclipse/jgit/transport/SideBandOutputStream/write(byte[])
org/eclipse/jgit/transport/UploadPack/sendPack(boolean)#java/util/Map/values()
org/eclipse/jgit/transport/UploadPack/sendPack(boolean)#java/util/Iterator/next()
org/eclipse/jgit/transport/UploadPack/sendPack(boolean)#java/util/Set/isEmpty()
org/eclipse/jgit/transport/UploadPack/sendPack(boolean)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/UploadPack/sendPack(boolean)#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/transport/UploadPack/sendPack(boolean)#java/util/Collection/iterator()
org/eclipse/jgit/transport/UploadPack/sendPack(boolean)#org/eclipse/jgit/transport/ServiceMayNotContinueException/getMessage()
org/eclipse/jgit/transport/UploadPack/sendPack(boolean)#java/io/OutputStream/write(byte[])
org/eclipse/jgit/transport/UploadPack/sendPack(boolean)#java/util/Set/add(java.lang.Object)
org/eclipse/jgit/transport/UploadPack/sendPack(boolean)#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/UploadPack/processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)#org/eclipse/jgit/revwalk/AsyncRevObjectQueue/release()
org/eclipse/jgit/transport/UploadPack/processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)#org/eclipse/jgit/revwalk/RevObject/name()
org/eclipse/jgit/transport/UploadPack/processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/UploadPack/processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)#java/util/List/clear()
org/eclipse/jgit/transport/UploadPack/processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)#org/eclipse/jgit/lib/ObjectId/name()
org/eclipse/jgit/transport/UploadPack/processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)#java/util/Set/size()
org/eclipse/jgit/transport/UploadPack/processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/UploadPack/processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)#java/util/List/isEmpty()
org/eclipse/jgit/transport/UploadPack/processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)#java/util/List/size()
org/eclipse/jgit/transport/UploadPack/processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)#org/eclipse/jgit/transport/GitProtocolConstants$MultiAck/ordinal()
org/eclipse/jgit/transport/UploadPack/processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)#java/util/Set/isEmpty()
org/eclipse/jgit/transport/UploadPack/processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)#java/util/List/get(int)
org/eclipse/jgit/transport/UploadPack/processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/UploadPack/service()#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/UploadPack/service()#java/util/Collections/emptySet()
org/eclipse/jgit/transport/UploadPack/service()#java/util/Set/isEmpty()
org/eclipse/jgit/transport/UploadPack/service()#java/util/Set/contains(java.lang.Object)
org/eclipse/jgit/transport/UploadPack/service()#org/eclipse/jgit/transport/RefAdvertiser$PacketLineOutRefAdvertiser/PacketLineOutRefAdvertiser(org.eclipse.jgit.transport.PacketLineOut)
org/eclipse/jgit/transport/UploadPack/service()#org/eclipse/jgit/transport/ServiceMayNotContinueException/getMessage()
org/eclipse/jgit/transport/UploadPack/service()#org/eclipse/jgit/errors/PackProtocolException/getMessage()
org/eclipse/jgit/transport/UploadPack/service()#java/util/Map/values()
org/eclipse/jgit/transport/UploadPack/service()#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/UploadPack/service()#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/UploadPack/processShallow()#org/eclipse/jgit/revwalk/DepthWalk$RevWalk/next()
org/eclipse/jgit/transport/UploadPack/processShallow()#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/UploadPack/processShallow()#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/UploadPack/processShallow()#org/eclipse/jgit/revwalk/DepthWalk$RevWalk/parseCommit(org.eclipse.jgit.lib.AnyObjectId)
org/eclipse/jgit/transport/UploadPack/processShallow()#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/UploadPack/processShallow()#java/util/Set/iterator()
org/eclipse/jgit/transport/UploadPack/processShallow()#org/eclipse/jgit/revwalk/DepthWalk$RevWalk/RevWalk(org.eclipse.jgit.lib.ObjectReader,int)
org/eclipse/jgit/transport/UploadPack/processShallow()#java/util/List/add(java.lang.Object)
org/eclipse/jgit/transport/UploadPack/processShallow()#org/eclipse/jgit/revwalk/DepthWalk$RevWalk/markRoot(org.eclipse.jgit.revwalk.RevCommit)
org/eclipse/jgit/transport/UploadPack/processShallow()#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/UploadPack/processShallow()#org/eclipse/jgit/revwalk/DepthWalk$Commit/name()
org/eclipse/jgit/transport/UploadPack/processShallow()#java/util/Iterator/next()
org/eclipse/jgit/transport/UploadPack/processShallow()#org/eclipse/jgit/revwalk/DepthWalk$Commit/getDepth()
org/eclipse/jgit/transport/UploadPack/processShallow()#org/eclipse/jgit/revwalk/RevCommit/name()
org/eclipse/jgit/transport/UploadPack/processShallow()#java/util/Set/contains(java.lang.Object)
org/eclipse/jgit/transport/UploadPack/processShallow()#java/util/Set/remove(java.lang.Object)
org/eclipse/jgit/transport/UploadPack/processShallow()#org/eclipse/jgit/revwalk/DepthWalk$Commit/copy()
org/eclipse/jgit/transport/UploadPack/recvWants()#java/util/Collections/emptySet()
org/eclipse/jgit/transport/UploadPack/recvWants()#org/eclipse/jgit/transport/UploadPack$FirstLine/getLine()
org/eclipse/jgit/transport/UploadPack/recvWants()#java/lang/String/length()
org/eclipse/jgit/transport/UploadPack/recvWants()#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/transport/UploadPack/recvWants()#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/transport/UploadPack/recvWants()#org/eclipse/jgit/transport/UploadPack$FirstLine/FirstLine(java.lang.String)
org/eclipse/jgit/transport/UploadPack/recvWants()#java/lang/String/substring(int)
org/eclipse/jgit/transport/UploadPack/recvWants()#java/lang/Integer/parseInt(java.lang.String)
org/eclipse/jgit/transport/UploadPack/recvWants()#org/eclipse/jgit/transport/UploadPack$FirstLine/getOptions()
org/eclipse/jgit/transport/UploadPack/recvWants()#java/util/Set/add(java.lang.Object)
org/eclipse/jgit/transport/UploadPack/negotiate()#java/util/ArrayList/ArrayList(int)
org/eclipse/jgit/transport/UploadPack/negotiate()#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/UploadPack/negotiate()#java/lang/String/length()
org/eclipse/jgit/transport/UploadPack/negotiate()#java/lang/String/substring(int)
org/eclipse/jgit/transport/UploadPack/negotiate()#java/util/List/add(java.lang.Object)
org/eclipse/jgit/transport/UploadPack/negotiate()#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/transport/UploadPack/negotiate()#org/eclipse/jgit/lib/ObjectId/name()
org/eclipse/jgit/transport/UploadPack/negotiate()#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/UploadPack/negotiate()#java/lang/String/equals(java.lang.Object)
org/eclipse/jgit/transport/UploadPack/negotiate()#java/util/Set/isEmpty()
org/eclipse/jgit/transport/UploadPack/negotiate()#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/transport/UploadPack/negotiate()#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/TransportHttp/connect(java.lang.String)#org/eclipse/jgit/transport/TransportHttp/getCredentialsProvider()
org/eclipse/jgit/transport/TransportHttp/connect(java.lang.String)#java/net/URL/URL(java.lang.String)
org/eclipse/jgit/transport/TransportHttp/connect(java.lang.String)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/transport/TransportHttp/connect(java.lang.String)#java/lang/StringBuilder/append(char)
org/eclipse/jgit/transport/TransportHttp/connect(java.lang.String)#java/lang/StringBuilder/length()
org/eclipse/jgit/transport/TransportHttp/connect(java.lang.String)#java/lang/StringBuilder/append(java.lang.Object)
org/eclipse/jgit/transport/TransportHttp/connect(java.lang.String)#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/TransportHttp/connect(java.lang.String)#java/lang/StringBuilder/indexOf(java.lang.String)
org/eclipse/jgit/transport/TransportHttp/connect(java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/TransportHttp/connect(java.lang.String)#java/lang/StringBuilder/append(int)
org/eclipse/jgit/transport/TransportHttp/connect(java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/TransportHttp/connect(java.lang.String)#java/lang/StringBuilder/charAt(int)
org/eclipse/jgit/transport/TransportHttp/httpOpen(java.lang.String,java.net.URL)#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/TransportHttp/httpOpen(java.lang.String,java.net.URL)#java/util/Map$Entry/getKey()
org/eclipse/jgit/transport/TransportHttp/httpOpen(java.lang.String,java.net.URL)#java/net/URL/getProtocol()
org/eclipse/jgit/transport/TransportHttp/httpOpen(java.lang.String,java.net.URL)#java/util/Map/isEmpty()
org/eclipse/jgit/transport/TransportHttp/httpOpen(java.lang.String,java.net.URL)#java/lang/String/equals(java.lang.Object)
org/eclipse/jgit/transport/TransportHttp/httpOpen(java.lang.String,java.net.URL)#java/util/Map$Entry/getValue()
org/eclipse/jgit/transport/TransportHttp/httpOpen(java.lang.String,java.net.URL)#java/util/Map/entrySet()
org/eclipse/jgit/transport/TransportHttp/httpOpen(java.lang.String,java.net.URL)#java/util/Iterator/next()
org/eclipse/jgit/transport/TransportHttp/httpOpen(java.lang.String,java.net.URL)#java/util/Set/iterator()
org/eclipse/jgit/transport/TransportHttp/httpOpen(java.lang.String,java.net.URL)#org/eclipse/jgit/transport/TransportHttp/getTimeout()
org/eclipse/jgit/transport/TransportHttp/newDumbConnection(java.io.InputStream)#java/net/URL/URL(java.net.URL,java.lang.String)
org/eclipse/jgit/transport/TransportHttp/newDumbConnection(java.io.InputStream)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/transport/TransportHttp/newDumbConnection(java.io.InputStream)#java/io/BufferedReader/readLine()
org/eclipse/jgit/transport/TransportHttp/newDumbConnection(java.io.InputStream)#org/eclipse/jgit/lib/ObjectIdRef$Unpeeled/Unpeeled(org.eclipse.jgit.lib.Ref$Storage,java.lang.String,org.eclipse.jgit.lib.ObjectId)
org/eclipse/jgit/transport/TransportHttp/newDumbConnection(java.io.InputStream)#java/io/BufferedReader/close()
org/eclipse/jgit/transport/TransportHttp/newDumbConnection(java.io.InputStream)#org/eclipse/jgit/transport/WalkFetchConnection/available(java.util.Map)
org/eclipse/jgit/transport/TransportHttp/newDumbConnection(java.io.InputStream)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/transport/TransportHttp/newDumbConnection(java.io.InputStream)#org/eclipse/jgit/transport/TransportHttp$HttpObjectDB/HttpObjectDB(org.eclipse.jgit.transport.TransportHttp,java.net.URL)
org/eclipse/jgit/transport/TransportHttp/newDumbConnection(java.io.InputStream)#org/eclipse/jgit/transport/TransportHttp$HttpObjectDB/readAdvertisedImpl(java.io.BufferedReader)
org/eclipse/jgit/transport/TransportHttp/newDumbConnection(java.io.InputStream)#java/lang/String/length()
org/eclipse/jgit/transport/TransportHttp/newDumbConnection(java.io.InputStream)#java/util/Map/get(java.lang.Object)
org/eclipse/jgit/transport/TransportHttp/newDumbConnection(java.io.InputStream)#java/lang/String/substring(int)
org/eclipse/jgit/transport/TransportHttp/newDumbConnection(java.io.InputStream)#java/util/Map/containsKey(java.lang.Object)
org/eclipse/jgit/transport/TransportHttp/newDumbConnection(java.io.InputStream)#java/lang/Integer/valueOf(int)
org/eclipse/jgit/transport/TransportHttp/newDumbConnection(java.io.InputStream)#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/api/DescribeCommand/call()#java/util/Iterator/hasNext()
org/eclipse/jgit/api/DescribeCommand/call()#org/eclipse/jgit/api/DescribeCommand$1Candidate/reaches(org.eclipse.jgit.revwalk.RevCommit)
org/eclipse/jgit/api/DescribeCommand/call()#java/util/Map/values()
org/eclipse/jgit/api/DescribeCommand/call()#java/lang/String/substring(int)
org/eclipse/jgit/api/DescribeCommand/call()#org/eclipse/jgit/api/DescribeCommand$1Candidate/1Candidate(org.eclipse.jgit.api.DescribeCommand,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.revwalk.RevFlagSet)
org/eclipse/jgit/api/DescribeCommand/call()#org/eclipse/jgit/revwalk/RevCommit/hasAny(org.eclipse.jgit.revwalk.RevFlagSet)
org/eclipse/jgit/api/DescribeCommand/call()#org/eclipse/jgit/api/DescribeCommand/setCallable(boolean)
org/eclipse/jgit/api/DescribeCommand/call()#org/eclipse/jgit/api/DescribeCommand/checkCallable()
org/eclipse/jgit/api/DescribeCommand/call()#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/api/DescribeCommand/call()#java/util/ArrayList/ArrayList()
org/eclipse/jgit/api/DescribeCommand/call()#java/util/List/isEmpty()
org/eclipse/jgit/api/DescribeCommand/call()#java/lang/String/length()
org/eclipse/jgit/api/DescribeCommand/call()#java/util/Map/get(java.lang.Object)
org/eclipse/jgit/api/DescribeCommand/call()#java/io/IOException/getMessage()
org/eclipse/jgit/api/DescribeCommand/call()#org/eclipse/jgit/revwalk/RevCommit/hasAll(org.eclipse.jgit.revwalk.RevFlagSet)
org/eclipse/jgit/api/DescribeCommand/call()#java/util/List/size()
org/eclipse/jgit/api/DescribeCommand/call()#java/util/Collections/min(java.util.Collection,java.util.Comparator)
org/eclipse/jgit/api/DescribeCommand/call()#org/eclipse/jgit/api/DescribeCommand$1/1(org.eclipse.jgit.api.DescribeCommand)
org/eclipse/jgit/api/DescribeCommand/call()#java/util/Iterator/next()
org/eclipse/jgit/api/DescribeCommand/call()#java/util/HashMap/HashMap()
org/eclipse/jgit/api/DescribeCommand/call()#org/eclipse/jgit/revwalk/RevCommit/add(org.eclipse.jgit.revwalk.RevFlag)
org/eclipse/jgit/api/DescribeCommand/call()#java/util/List/add(java.lang.Object)
org/eclipse/jgit/api/DescribeCommand/call()#org/eclipse/jgit/api/DescribeCommand$1Candidate/describe(org.eclipse.jgit.lib.ObjectId)
org/eclipse/jgit/api/DescribeCommand/call()#java/util/List/iterator()
org/eclipse/jgit/api/DescribeCommand/call()#java/util/Collection/iterator()
org/eclipse/jgit/internal/storage/pack/DeltaTask/Block/computeTopPaths()#java/util/ArrayList/ArrayList(int)
org/eclipse/jgit/internal/storage/pack/DeltaTask/Block/computeTopPaths()#org/eclipse/jgit/internal/storage/pack/DeltaTask$WeightedPath/compareTo(org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath)
org/eclipse/jgit/internal/storage/pack/DeltaTask/Block/computeTopPaths()#java/util/Collections/sort(java.util.List,java.util.Comparator)
org/eclipse/jgit/internal/storage/pack/DeltaTask/Block/computeTopPaths()#java/util/ArrayList/size()
org/eclipse/jgit/internal/storage/pack/DeltaTask/Block/computeTopPaths()#java/util/Collections/sort(java.util.List)
org/eclipse/jgit/internal/storage/pack/DeltaTask/Block/computeTopPaths()#java/util/ArrayList/set(int,java.lang.Object)
org/eclipse/jgit/internal/storage/pack/DeltaTask/Block/computeTopPaths()#org/eclipse/jgit/internal/storage/pack/DeltaTask$WeightedPath/WeightedPath(long,org.eclipse.jgit.internal.storage.pack.DeltaTask$Slice)
org/eclipse/jgit/internal/storage/pack/DeltaTask/Block/computeTopPaths()#java/util/ArrayList/get(int)
org/eclipse/jgit/internal/storage/pack/DeltaTask/Block/computeTopPaths()#java/util/ArrayList/add(java.lang.Object)
org/eclipse/jgit/internal/storage/pack/DeltaTask/Block/computeTopPaths()#org/eclipse/jgit/internal/storage/pack/DeltaTask$Block$1/1(org.eclipse.jgit.internal.storage.pack.DeltaTask$Block)
org/eclipse/jgit/internal/storage/pack/DeltaTask/Block/computeTopPaths()#org/eclipse/jgit/internal/storage/pack/DeltaTask$Slice/Slice(int,int)
org/eclipse/jgit/internal/storage/pack/DeltaTask/Block/partitionTasks()#java/util/LinkedList/isEmpty()
org/eclipse/jgit/internal/storage/pack/DeltaTask/Block/partitionTasks()#java/util/Iterator/hasNext()
org/eclipse/jgit/internal/storage/pack/DeltaTask/Block/partitionTasks()#java/lang/Math/max(long,long)
org/eclipse/jgit/internal/storage/pack/DeltaTask/Block/partitionTasks()#java/util/Iterator/next()
org/eclipse/jgit/internal/storage/pack/DeltaTask/Block/partitionTasks()#java/util/ArrayList/size()
org/eclipse/jgit/internal/storage/pack/DeltaTask/Block/partitionTasks()#java/util/ArrayList/iterator()
org/eclipse/jgit/internal/storage/pack/DeltaTask/Block/partitionTasks()#java/util/List/add(java.lang.Object)
org/eclipse/jgit/internal/storage/pack/DeltaTask/Block/partitionTasks()#org/eclipse/jgit/internal/storage/pack/DeltaTask$Slice/Slice(int,int)
org/eclipse/jgit/internal/storage/pack/DeltaTask/Block/partitionTasks()#org/eclipse/jgit/internal/storage/pack/DeltaTask$Block/computeTopPaths()
org/eclipse/jgit/internal/storage/pack/DeltaTask/Block/partitionTasks()#java/util/ArrayList/get(int)
org/eclipse/jgit/ignore/IgnoreRule/setup()#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/ignore/IgnoreRule/setup()#java/lang/String/length()
org/eclipse/jgit/ignore/IgnoreRule/setup()#java/lang/String/substring(int,int)
org/eclipse/jgit/ignore/IgnoreRule/setup()#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/ignore/IgnoreRule/setup()#java/lang/String/contains(java.lang.CharSequence)
org/eclipse/jgit/ignore/IgnoreRule/setup()#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/ignore/IgnoreRule/setup()#java/lang/Character/valueOf(char)
org/eclipse/jgit/ignore/IgnoreRule/setup()#java/lang/StringBuilder/toString()
org/eclipse/jgit/ignore/IgnoreRule/setup()#java/lang/String/endsWith(java.lang.String)
org/eclipse/jgit/internal/storage/dfs/DfsPackFile/load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)#org/eclipse/jgit/errors/CorruptObjectException/initCause(java.lang.Throwable)
org/eclipse/jgit/internal/storage/dfs/DfsPackFile/load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)#java/lang/Long/valueOf(long)
org/eclipse/jgit/internal/storage/dfs/DfsPackFile/load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)#org/eclipse/jgit/internal/storage/dfs/DfsPackFile$Delta/Delta(org.eclipse.jgit.internal.storage.dfs.DfsPackFile$Delta,long,int,int,long)
org/eclipse/jgit/internal/storage/dfs/DfsPackFile/load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)#java/lang/Integer/valueOf(int)
org/eclipse/jgit/internal/storage/dfs/DfsPackFile/load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)#java/io/IOException/IOException(java.lang.String)
org/eclipse/jgit/internal/storage/dfs/DfsPackFile/load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)#org/eclipse/jgit/errors/LargeObjectException$ExceedsByteArrayLimit/ExceedsByteArrayLimit()
org/eclipse/jgit/internal/storage/dfs/DfsPackFile/load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)#org/eclipse/jgit/lib/ObjectLoader$SmallObject/SmallObject(int,byte[])
org/eclipse/jgit/internal/storage/dfs/DfsPackFile/load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)#org/eclipse/jgit/errors/LargeObjectException$OutOfMemory/OutOfMemory(java.lang.OutOfMemoryError)
org/eclipse/jgit/internal/storage/dfs/DfsPackFile/load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/internal/storage/dfs/DfsPackFile/copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)#java/lang/Math/min(long,long)
org/eclipse/jgit/internal/storage/dfs/DfsPackFile/copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)#java/util/zip/Inflater/finished()
org/eclipse/jgit/internal/storage/dfs/DfsPackFile/copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)#java/lang/Long/valueOf(long)
org/eclipse/jgit/internal/storage/dfs/DfsPackFile/copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)#java/util/zip/Inflater/setInput(byte[],int,int)
org/eclipse/jgit/internal/storage/dfs/DfsPackFile/copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)#java/util/zip/CRC32/CRC32()
org/eclipse/jgit/internal/storage/dfs/DfsPackFile/copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)#java/io/EOFException/EOFException(java.lang.String)
org/eclipse/jgit/internal/storage/dfs/DfsPackFile/copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)#java/util/zip/Inflater/inflate(byte[],int,int)
org/eclipse/jgit/internal/storage/dfs/DfsPackFile/copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)#java/util/zip/CRC32/getValue()
org/eclipse/jgit/internal/storage/dfs/DfsPackFile/copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)#org/eclipse/jgit/errors/CorruptObjectException/initCause(java.lang.Throwable)
org/eclipse/jgit/internal/storage/dfs/DfsPackFile/copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/internal/storage/dfs/DfsPackFile/copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)#org/eclipse/jgit/errors/StoredObjectRepresentationNotAvailableException/initCause(java.lang.Throwable)
org/eclipse/jgit/internal/storage/dfs/DfsPackFile/copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)#java/util/zip/Inflater/getBytesRead()
org/eclipse/jgit/internal/storage/dfs/DfsPackFile/copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)#java/util/zip/CRC32/update(byte[],int,int)
org/eclipse/jgit/internal/storage/file/PackFile/extFile(org.eclipse.jgit.internal.storage.pack.PackExt)#java/io/File/getName()
org/eclipse/jgit/internal/storage/file/PackFile/extFile(org.eclipse.jgit.internal.storage.pack.PackExt)#java/io/File/File(java.io.File,java.lang.String)
org/eclipse/jgit/internal/storage/file/PackFile/extFile(org.eclipse.jgit.internal.storage.pack.PackExt)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/internal/storage/file/PackFile/extFile(org.eclipse.jgit.internal.storage.pack.PackExt)#java/lang/String/substring(int,int)
org/eclipse/jgit/internal/storage/file/PackFile/extFile(org.eclipse.jgit.internal.storage.pack.PackExt)#java/lang/StringBuilder/append(char)
org/eclipse/jgit/internal/storage/file/PackFile/extFile(org.eclipse.jgit.internal.storage.pack.PackExt)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/internal/storage/file/PackFile/extFile(org.eclipse.jgit.internal.storage.pack.PackExt)#java/lang/String/lastIndexOf(int)
org/eclipse/jgit/internal/storage/file/PackFile/extFile(org.eclipse.jgit.internal.storage.pack.PackExt)#java/lang/StringBuilder/toString()
org/eclipse/jgit/internal/storage/file/PackFile/extFile(org.eclipse.jgit.internal.storage.pack.PackExt)#java/io/File/getParentFile()
org/eclipse/jgit/internal/storage/file/PackFile/copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)#java/lang/Math/min(long,long)
org/eclipse/jgit/internal/storage/file/PackFile/copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)#java/util/zip/Inflater/finished()
org/eclipse/jgit/internal/storage/file/PackFile/copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)#java/lang/Long/valueOf(long)
org/eclipse/jgit/internal/storage/file/PackFile/copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)#java/util/zip/Inflater/setInput(byte[],int,int)
org/eclipse/jgit/internal/storage/file/PackFile/copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)#java/util/zip/CRC32/CRC32()
org/eclipse/jgit/internal/storage/file/PackFile/copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)#java/io/EOFException/EOFException(java.lang.String)
org/eclipse/jgit/internal/storage/file/PackFile/copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/internal/storage/file/PackFile/copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)#java/util/zip/Inflater/inflate(byte[],int,int)
org/eclipse/jgit/internal/storage/file/PackFile/copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)#java/util/zip/CRC32/getValue()
org/eclipse/jgit/internal/storage/file/PackFile/copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)#org/eclipse/jgit/errors/CorruptObjectException/initCause(java.lang.Throwable)
org/eclipse/jgit/internal/storage/file/PackFile/copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)#org/eclipse/jgit/errors/StoredObjectRepresentationNotAvailableException/initCause(java.lang.Throwable)
org/eclipse/jgit/internal/storage/file/PackFile/copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)#java/util/zip/Inflater/getBytesRead()
org/eclipse/jgit/internal/storage/file/PackFile/copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)#java/util/zip/CRC32/update(byte[],int,int)
org/eclipse/jgit/internal/storage/file/PackFile/load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)#java/lang/Long/valueOf(long)
org/eclipse/jgit/internal/storage/file/PackFile/load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)#org/eclipse/jgit/errors/LargeObjectException$OutOfMemory/OutOfMemory(java.lang.OutOfMemoryError)
org/eclipse/jgit/internal/storage/file/PackFile/load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/internal/storage/file/PackFile/load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)#java/lang/OutOfMemoryError/OutOfMemoryError()
org/eclipse/jgit/internal/storage/file/PackFile/load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)#org/eclipse/jgit/errors/CorruptObjectException/initCause(java.lang.Throwable)
org/eclipse/jgit/internal/storage/file/PackFile/load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)#java/io/IOException/IOException(java.lang.String)
org/eclipse/jgit/internal/storage/file/PackFile/load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)#org/eclipse/jgit/errors/LargeObjectException$ExceedsByteArrayLimit/ExceedsByteArrayLimit()
org/eclipse/jgit/internal/storage/file/PackFile/load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)#org/eclipse/jgit/lib/ObjectLoader$SmallObject/SmallObject(int,byte[])
org/eclipse/jgit/internal/storage/file/PackFile/load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)#java/lang/Integer/valueOf(int)
org/eclipse/jgit/internal/storage/file/PackFile/load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)#org/eclipse/jgit/internal/storage/file/PackFile$Delta/Delta(org.eclipse.jgit.internal.storage.file.PackFile$Delta,long,int,int,long)
org/eclipse/jgit/internal/storage/file/PackBitmapIndexBuilder/2/1/next()#org/eclipse/jgit/internal/storage/file/PackBitmapIndexBuilder$2$1/next()
org/eclipse/jgit/internal/storage/file/PackBitmapIndexBuilder/2/1/next()#org/eclipse/jgit/internal/storage/file/BasePackBitmapIndex$StoredBitmap/getBitmap()
org/eclipse/jgit/internal/storage/file/PackBitmapIndexBuilder/2/1/next()#org/eclipse/jgit/internal/storage/file/PackBitmapIndexBuilder$2$1/hasNext()
org/eclipse/jgit/internal/storage/file/PackBitmapIndexBuilder/2/1/next()#com/googlecode/javaewah/EWAHCompressedBitmap/xor(com.googlecode.javaewah.EWAHCompressedBitmap)
org/eclipse/jgit/internal/storage/file/PackBitmapIndexBuilder/2/1/next()#org/eclipse/jgit/internal/storage/file/PackBitmapIndexBuilder$PositionEntry/access$400(org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder$PositionEntry)
org/eclipse/jgit/internal/storage/file/PackBitmapIndexBuilder/2/1/next()#java/lang/IllegalStateException/IllegalStateException()
org/eclipse/jgit/internal/storage/file/PackBitmapIndexBuilder/2/1/next()#org/eclipse/jgit/internal/storage/file/PackBitmapIndexBuilder$StoredEntry/StoredEntry(long,com.googlecode.javaewah.EWAHCompressedBitmap,int,int,org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder$1)
org/eclipse/jgit/internal/storage/file/PackBitmapIndexBuilder/2/1/next()#java/util/NoSuchElementException/NoSuchElementException()
org/eclipse/jgit/internal/storage/file/PackBitmapIndexBuilder/2/1/next()#com/googlecode/javaewah/EWAHCompressedBitmap/sizeInBytes()
org/eclipse/jgit/internal/storage/file/PackBitmapIndexBuilder/2/1/next()#org/eclipse/jgit/internal/storage/file/BasePackBitmapIndex$StoredBitmap/getFlags()
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/resolveKey(java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/resolveKey(java.lang.String)#java/lang/String/length()
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/resolveKey(java.lang.String)#java/lang/String/substring(int,int)
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/resolveKey(java.lang.String)#java/lang/String/substring(int)
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/resolveKey(java.lang.String)#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/resolveKey(java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/resolveKey(java.lang.String)#java/lang/String/lastIndexOf(int)
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/resolveKey(java.lang.String)#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/resolveKey(java.lang.String)#java/lang/String/endsWith(java.lang.String)
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/getPackNames()#java/util/HashSet/contains(java.lang.Object)
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/getPackNames()#java/util/ArrayList/ArrayList()
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/getPackNames()#java/util/HashSet/iterator()
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/getPackNames()#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/getPackNames()#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/getPackNames()#org/eclipse/jgit/transport/TransportAmazonS3$DatabaseS3/resolveKey(java.lang.String)
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/getPackNames()#java/lang/String/length()
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/getPackNames()#java/util/Iterator/next()
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/getPackNames()#java/lang/String/substring(int,int)
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/getPackNames()#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/getPackNames()#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/getPackNames()#java/util/HashSet/HashSet()
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/getPackNames()#java/util/HashSet/addAll(java.util.Collection)
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/getPackNames()#java/util/Collection/add(java.lang.Object)
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/getPackNames()#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/getPackNames()#java/lang/String/endsWith(java.lang.String)
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/readRef(java.util.TreeMap,java.lang.String)#java/util/TreeMap/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/readRef(java.util.TreeMap,java.lang.String)#org/eclipse/jgit/transport/TransportAmazonS3$DatabaseS3/readRef(java.util.TreeMap,java.lang.String)
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/readRef(java.util.TreeMap,java.lang.String)#org/eclipse/jgit/transport/TransportAmazonS3$DatabaseS3/openReader(java.lang.String)
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/readRef(java.util.TreeMap,java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/readRef(java.util.TreeMap,java.lang.String)#java/lang/String/length()
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/readRef(java.util.TreeMap,java.lang.String)#java/util/TreeMap/get(java.lang.Object)
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/readRef(java.util.TreeMap,java.lang.String)#java/lang/String/substring(int)
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/readRef(java.util.TreeMap,java.lang.String)#java/io/BufferedReader/readLine()
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/readRef(java.util.TreeMap,java.lang.String)#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/readRef(java.util.TreeMap,java.lang.String)#org/eclipse/jgit/lib/ObjectIdRef$Unpeeled/Unpeeled(org.eclipse.jgit.lib.Ref$Storage,java.lang.String,org.eclipse.jgit.lib.ObjectId)
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/readRef(java.util.TreeMap,java.lang.String)#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/readRef(java.util.TreeMap,java.lang.String)#java/io/BufferedReader/close()
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/readRef(java.util.TreeMap,java.lang.String)#org/eclipse/jgit/transport/TransportAmazonS3$DatabaseS3/loose(org.eclipse.jgit.lib.Ref)
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/readRef(java.util.TreeMap,java.lang.String)#org/eclipse/jgit/transport/TransportAmazonS3$DatabaseS3/getURI()
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/readRef(java.util.TreeMap,java.lang.String)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/readRef(java.util.TreeMap,java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/readLooseRefs(java.util.TreeMap)#org/eclipse/jgit/transport/TransportAmazonS3$DatabaseS3/readRef(java.util.TreeMap,java.lang.String)
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/readLooseRefs(java.util.TreeMap)#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/readLooseRefs(java.util.TreeMap)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/readLooseRefs(java.util.TreeMap)#org/eclipse/jgit/transport/TransportAmazonS3$DatabaseS3/resolveKey(java.lang.String)
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/readLooseRefs(java.util.TreeMap)#java/util/Iterator/next()
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/readLooseRefs(java.util.TreeMap)#org/eclipse/jgit/transport/TransportAmazonS3$DatabaseS3/getURI()
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/readLooseRefs(java.util.TreeMap)#java/util/List/iterator()
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/readLooseRefs(java.util.TreeMap)#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/TransportAmazonS3/DatabaseS3/readLooseRefs(java.util.TreeMap)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/gitrepo/RepoCommand/call()#java/util/Iterator/hasNext()
org/eclipse/jgit/gitrepo/RepoCommand/call()#java/lang/String/getBytes(java.lang.String)
org/eclipse/jgit/gitrepo/RepoCommand/call()#org/eclipse/jgit/gitrepo/RepoCommand$RemoteUnavailableException/RemoteUnavailableException(java.lang.String)
org/eclipse/jgit/gitrepo/RepoCommand/call()#org/eclipse/jgit/lib/RefUpdate$Result/ordinal()
org/eclipse/jgit/gitrepo/RepoCommand/call()#org/eclipse/jgit/gitrepo/RepoCommand$XmlManifest/XmlManifest(org.eclipse.jgit.gitrepo.RepoCommand,org.eclipse.jgit.gitrepo.RepoCommand$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String)
org/eclipse/jgit/gitrepo/RepoCommand/call()#org/eclipse/jgit/gitrepo/RepoCommand$ManifestErrorException/ManifestErrorException(java.lang.Throwable)
org/eclipse/jgit/gitrepo/RepoCommand/call()#java/util/ArrayList/ArrayList()
org/eclipse/jgit/gitrepo/RepoCommand/call()#org/eclipse/jgit/gitrepo/RepoCommand$RemoteReader/readFile(java.lang.String,java.lang.String,java.lang.String)
org/eclipse/jgit/gitrepo/RepoCommand/call()#org/eclipse/jgit/gitrepo/RepoCommand/checkCallable()
org/eclipse/jgit/gitrepo/RepoCommand/call()#java/lang/String/length()
org/eclipse/jgit/gitrepo/RepoCommand/call()#java/io/FileInputStream/FileInputStream(java.lang.String)
org/eclipse/jgit/gitrepo/RepoCommand/call()#java/util/Iterator/next()
org/eclipse/jgit/gitrepo/RepoCommand/call()#org/eclipse/jgit/gitrepo/RepoCommand$XmlManifest/read(java.io.InputStream)
org/eclipse/jgit/gitrepo/RepoCommand/call()#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/gitrepo/RepoCommand/call()#java/io/InputStream/close()
org/eclipse/jgit/gitrepo/RepoCommand/call()#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/eclipse/jgit/gitrepo/RepoCommand/call()#java/util/List/iterator()
org/eclipse/jgit/gitrepo/RepoCommand/call()#org/eclipse/jgit/gitrepo/RepoCommand$DefaultRemoteReader/DefaultRemoteReader()
org/eclipse/jgit/gitrepo/RepoCommand/call()#org/eclipse/jgit/lib/ObjectId/name()
org/eclipse/jgit/gitrepo/RepoCommand/call()#org/eclipse/jgit/gitrepo/RepoCommand$RemoteReader/sha1(java.lang.String,java.lang.String)
org/eclipse/jgit/util/CachedAuthenticator/getPasswordAuthentication()#java/net/PasswordAuthentication/getUserName()
org/eclipse/jgit/util/CachedAuthenticator/getPasswordAuthentication()#org/eclipse/jgit/util/CachedAuthenticator/getRequestingPort()
org/eclipse/jgit/util/CachedAuthenticator/getPasswordAuthentication()#java/lang/String/equals(java.lang.Object)
org/eclipse/jgit/util/CachedAuthenticator/getPasswordAuthentication()#org/eclipse/jgit/util/CachedAuthenticator$CachedAuthentication/toPasswordAuthentication()
org/eclipse/jgit/util/CachedAuthenticator/getPasswordAuthentication()#org/eclipse/jgit/util/CachedAuthenticator/getRequestingHost()
org/eclipse/jgit/util/CachedAuthenticator/getPasswordAuthentication()#java/util/Collection/iterator()
org/eclipse/jgit/util/CachedAuthenticator/getPasswordAuthentication()#org/eclipse/jgit/util/CachedAuthenticator$CachedAuthentication/CachedAuthentication(java.lang.String,int,java.lang.String,java.lang.String)
org/eclipse/jgit/util/CachedAuthenticator/getPasswordAuthentication()#java/lang/String/String(char[])
org/eclipse/jgit/util/CachedAuthenticator/getPasswordAuthentication()#java/util/Iterator/hasNext()
org/eclipse/jgit/util/CachedAuthenticator/getPasswordAuthentication()#java/util/Iterator/next()
org/eclipse/jgit/util/CachedAuthenticator/getPasswordAuthentication()#java/net/PasswordAuthentication/getPassword()
org/eclipse/jgit/api/ListTagCommand/call()#java/util/ArrayList/ArrayList()
org/eclipse/jgit/api/ListTagCommand/call()#org/eclipse/jgit/api/ListTagCommand/checkCallable()
org/eclipse/jgit/api/ListTagCommand/call()#java/util/Iterator/hasNext()
org/eclipse/jgit/api/ListTagCommand/call()#java/io/IOException/getMessage()
org/eclipse/jgit/api/ListTagCommand/call()#org/eclipse/jgit/api/ListTagCommand$1/1(org.eclipse.jgit.api.ListTagCommand)
org/eclipse/jgit/api/ListTagCommand/call()#java/util/List/add(java.lang.Object)
org/eclipse/jgit/api/ListTagCommand/call()#java/util/Collection/iterator()
org/eclipse/jgit/api/ListTagCommand/call()#org/eclipse/jgit/api/ListTagCommand/setCallable(boolean)
org/eclipse/jgit/api/ListTagCommand/call()#java/util/Map/values()
org/eclipse/jgit/api/ListTagCommand/call()#java/util/Iterator/next()
org/eclipse/jgit/api/ListTagCommand/call()#java/util/Collections/sort(java.util.List,java.util.Comparator)
org/eclipse/jgit/diff/RenameDetector/findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)#java/util/ArrayList/ArrayList()
org/eclipse/jgit/diff/RenameDetector/findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)#java/util/ArrayList/ArrayList(int)
org/eclipse/jgit/diff/RenameDetector/findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)#java/util/Iterator/hasNext()
org/eclipse/jgit/diff/RenameDetector/findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)#java/util/List/size()
org/eclipse/jgit/diff/RenameDetector/findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)#java/util/Arrays/sort(long[])
org/eclipse/jgit/diff/RenameDetector/findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)#java/util/List/add(java.lang.Object)
org/eclipse/jgit/diff/RenameDetector/findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)#java/util/List/get(int)
org/eclipse/jgit/diff/RenameDetector/findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)#java/util/HashMap/size()
org/eclipse/jgit/diff/RenameDetector/findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)#java/util/HashMap/values()
org/eclipse/jgit/diff/RenameDetector/findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)#java/util/ArrayList/iterator()
org/eclipse/jgit/diff/RenameDetector/findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)#java/util/Iterator/next()
org/eclipse/jgit/diff/RenameDetector/findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)#java/util/ArrayList/add(java.lang.Object)
org/eclipse/jgit/diff/RenameDetector/findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)#java/util/ArrayList/addAll(java.util.Collection)
org/eclipse/jgit/diff/RenameDetector/findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)#java/util/List/iterator()
org/eclipse/jgit/diff/RenameDetector/findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)#java/util/Collection/iterator()
org/eclipse/jgit/diff/RenameDetector/findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)#java/util/List/set(int,java.lang.Object)
org/eclipse/jgit/diff/RenameDetector/findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)#java/util/HashMap/get(java.lang.Object)
org/eclipse/jgit/diff/RenameDetector/rejoinModifies(org.eclipse.jgit.lib.ProgressMonitor)#java/util/ArrayList/ArrayList(int)
org/eclipse/jgit/diff/RenameDetector/rejoinModifies(org.eclipse.jgit.lib.ProgressMonitor)#java/util/ArrayList/ArrayList(java.util.Collection)
org/eclipse/jgit/diff/RenameDetector/rejoinModifies(org.eclipse.jgit.lib.ProgressMonitor)#java/util/Iterator/hasNext()
org/eclipse/jgit/diff/RenameDetector/rejoinModifies(org.eclipse.jgit.lib.ProgressMonitor)#java/util/HashMap/remove(java.lang.Object)
org/eclipse/jgit/diff/RenameDetector/rejoinModifies(org.eclipse.jgit.lib.ProgressMonitor)#java/util/List/size()
org/eclipse/jgit/diff/RenameDetector/rejoinModifies(org.eclipse.jgit.lib.ProgressMonitor)#java/util/List/add(java.lang.Object)
org/eclipse/jgit/diff/RenameDetector/rejoinModifies(org.eclipse.jgit.lib.ProgressMonitor)#java/util/List/iterator()
org/eclipse/jgit/diff/RenameDetector/rejoinModifies(org.eclipse.jgit.lib.ProgressMonitor)#java/util/HashMap/values()
org/eclipse/jgit/diff/RenameDetector/rejoinModifies(org.eclipse.jgit.lib.ProgressMonitor)#java/util/Iterator/next()
org/eclipse/jgit/diff/RenameDetector/rejoinModifies(org.eclipse.jgit.lib.ProgressMonitor)#java/util/HashMap/HashMap()
org/eclipse/jgit/diff/RenameDetector/rejoinModifies(org.eclipse.jgit.lib.ProgressMonitor)#java/util/HashMap/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/diff/RenameDetector/rejoinModifies(org.eclipse.jgit.lib.ProgressMonitor)#java/util/ArrayList/add(java.lang.Object)
org/eclipse/jgit/diff/MyersDiff/MiddleEdit/EditPaths/calculate(int)#org/eclipse/jgit/diff/MyersDiff$MiddleEdit$EditPaths/adjustMinMaxK(int,int)
org/eclipse/jgit/diff/MyersDiff/MiddleEdit/EditPaths/calculate(int)#org/eclipse/jgit/diff/MyersDiff$MiddleEdit$EditPaths/isBetter(int,int)
org/eclipse/jgit/diff/MyersDiff/MiddleEdit/EditPaths/calculate(int)#org/eclipse/jgit/diff/MyersDiff$MiddleEdit$EditPaths/snake(int,int)
org/eclipse/jgit/diff/MyersDiff/MiddleEdit/EditPaths/calculate(int)#org/eclipse/jgit/diff/MyersDiff$MiddleEdit$EditPaths/meets(int,int,int,long)
org/eclipse/jgit/diff/MyersDiff/MiddleEdit/EditPaths/calculate(int)#org/eclipse/jgit/diff/MyersDiff$MiddleEdit$EditPaths/getRight(int)
org/eclipse/jgit/diff/MyersDiff/MiddleEdit/EditPaths/calculate(int)#org/eclipse/jgit/diff/MyersDiff$MiddleEdit$EditPaths/newSnake(int,int)
org/eclipse/jgit/diff/MyersDiff/MiddleEdit/EditPaths/calculate(int)#org/eclipse/jgit/diff/MyersDiff$MiddleEdit$EditPaths/getIndex(int,int)
org/eclipse/jgit/diff/MyersDiff/MiddleEdit/EditPaths/calculate(int)#org/eclipse/jgit/diff/MyersDiff$MiddleEdit$EditPaths/forceKIntoRange(int)
org/eclipse/jgit/diff/MyersDiff/MiddleEdit/EditPaths/calculate(int)#org/eclipse/jgit/diff/MyersDiff$MiddleEdit$EditPaths/getLeft(int)
org/eclipse/jgit/dircache/DirCache/readFrom(java.io.InputStream)#java/security/MessageDigest/digest()
org/eclipse/jgit/dircache/DirCache/readFrom(java.io.InputStream)#java/util/Arrays/equals(byte[],byte[])
org/eclipse/jgit/dircache/DirCache/readFrom(java.io.InputStream)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/dircache/DirCache/readFrom(java.io.InputStream)#java/lang/Long/valueOf(long)
org/eclipse/jgit/dircache/DirCache/readFrom(java.io.InputStream)#java/io/BufferedInputStream/reset()
org/eclipse/jgit/dircache/DirCache/readFrom(java.io.InputStream)#java/io/BufferedInputStream/mark(int)
org/eclipse/jgit/dircache/DirCache/readFrom(java.io.InputStream)#java/io/BufferedInputStream/read()
org/eclipse/jgit/dircache/DirCache/readFrom(java.io.InputStream)#java/io/BufferedInputStream/BufferedInputStream(java.io.InputStream)
org/eclipse/jgit/dircache/DirCache/readFrom(java.io.InputStream)#java/lang/Integer/valueOf(int)
org/eclipse/jgit/dircache/DirCache/readFrom(java.io.InputStream)#java/security/MessageDigest/update(byte[],int,int)
org/eclipse/jgit/transport/WalkFetchConnection/RemotePack/openIndex(org.eclipse.jgit.lib.ProgressMonitor)#java/io/InputStream/read(byte[])
org/eclipse/jgit/transport/WalkFetchConnection/RemotePack/openIndex(org.eclipse.jgit.lib.ProgressMonitor)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/WalkFetchConnection/RemotePack/openIndex(org.eclipse.jgit.lib.ProgressMonitor)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/WalkFetchConnection/RemotePack/openIndex(org.eclipse.jgit.lib.ProgressMonitor)#java/io/File/isFile()
org/eclipse/jgit/transport/WalkFetchConnection/RemotePack/openIndex(org.eclipse.jgit.lib.ProgressMonitor)#java/io/File/createTempFile(java.lang.String,java.lang.String)
org/eclipse/jgit/transport/WalkFetchConnection/RemotePack/openIndex(org.eclipse.jgit.lib.ProgressMonitor)#java/io/FileOutputStream/close()
org/eclipse/jgit/transport/WalkFetchConnection/RemotePack/openIndex(org.eclipse.jgit.lib.ProgressMonitor)#java/io/FileOutputStream/FileOutputStream(java.io.File)
org/eclipse/jgit/transport/WalkFetchConnection/RemotePack/openIndex(org.eclipse.jgit.lib.ProgressMonitor)#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/WalkFetchConnection/RemotePack/openIndex(org.eclipse.jgit.lib.ProgressMonitor)#java/io/FileOutputStream/write(byte[],int,int)
org/eclipse/jgit/transport/WalkFetchConnection/RemotePack/openIndex(org.eclipse.jgit.lib.ProgressMonitor)#java/io/InputStream/close()
org/eclipse/jgit/transport/WalkFetchConnection/RemotePack/openIndex(org.eclipse.jgit.lib.ProgressMonitor)#java/lang/String/substring(int,int)
org/eclipse/jgit/internal/storage/dfs/DfsPackParser/onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)#java/util/zip/Deflater/finished()
org/eclipse/jgit/internal/storage/dfs/DfsPackParser/onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)#java/util/zip/Deflater/finish()
org/eclipse/jgit/internal/storage/dfs/DfsPackParser/onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)#java/util/zip/Deflater/reset()
org/eclipse/jgit/internal/storage/dfs/DfsPackParser/onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)#org/eclipse/jgit/internal/storage/dfs/DfsPackParser/buffer()
org/eclipse/jgit/internal/storage/dfs/DfsPackParser/onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)#java/util/zip/Deflater/setInput(byte[])
org/eclipse/jgit/internal/storage/dfs/DfsPackParser/onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)#java/security/MessageDigest/update(byte[],int,int)
org/eclipse/jgit/internal/storage/dfs/DfsPackParser/onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)#java/util/zip/CRC32/update(byte[],int,int)
org/eclipse/jgit/internal/storage/dfs/DfsPackParser/onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)#java/util/zip/CRC32/getValue()
org/eclipse/jgit/internal/storage/dfs/DfsPackParser/onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)#java/util/zip/Deflater/deflate(byte[])
org/eclipse/jgit/internal/storage/dfs/DfsPackParser/onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)#java/util/zip/CRC32/reset()
org/eclipse/jgit/internal/storage/dfs/DfsPackParser/onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)#java/util/zip/Deflater/Deflater(int,boolean)
org/eclipse/jgit/transport/NetRCCredentialsProvider/get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])#java/lang/String/String(char[])
org/eclipse/jgit/transport/NetRCCredentialsProvider/get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])#org/eclipse/jgit/transport/CredentialItem$Password/setValue(char[])
org/eclipse/jgit/transport/NetRCCredentialsProvider/get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/NetRCCredentialsProvider/get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])#org/eclipse/jgit/transport/CredentialItem$StringType/setValue(java.lang.String)
org/eclipse/jgit/transport/NetRCCredentialsProvider/get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/NetRCCredentialsProvider/get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])#java/lang/Object/getClass()
org/eclipse/jgit/transport/NetRCCredentialsProvider/get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])#java/lang/String/equals(java.lang.Object)
org/eclipse/jgit/transport/NetRCCredentialsProvider/get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])#java/lang/Class/getName()
org/eclipse/jgit/transport/NetRCCredentialsProvider/get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/NetRCCredentialsProvider/get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])#org/eclipse/jgit/transport/CredentialItem$Username/setValue(java.lang.String)
org/eclipse/jgit/merge/ResolveMerger/checkout()#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/merge/ResolveMerger/checkout()#java/io/File/File(java.io.File,java.lang.String)
org/eclipse/jgit/merge/ResolveMerger/checkout()#java/util/Map$Entry/getKey()
org/eclipse/jgit/merge/ResolveMerger/checkout()#java/util/List/size()
org/eclipse/jgit/merge/ResolveMerger/checkout()#java/util/Iterator/next()
org/eclipse/jgit/merge/ResolveMerger/checkout()#java/util/Set/iterator()
org/eclipse/jgit/merge/ResolveMerger/checkout()#java/util/List/add(java.lang.Object)
org/eclipse/jgit/merge/ResolveMerger/checkout()#java/util/List/get(int)
org/eclipse/jgit/merge/ResolveMerger/checkout()#java/util/Map/entrySet()
org/eclipse/jgit/merge/ResolveMerger/checkout()#java/io/File/delete()
org/eclipse/jgit/merge/ResolveMerger/checkout()#java/util/Iterator/hasNext()
org/eclipse/jgit/merge/ResolveMerger/checkout()#java/io/File/isDirectory()
org/eclipse/jgit/merge/ResolveMerger/checkout()#java/util/Map$Entry/getValue()
org/eclipse/jgit/merge/ResolveMerger/checkout()#java/io/File/getParentFile()
org/eclipse/jgit/merge/ResolveMerger/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/merge/ResolveMerger/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)#org/eclipse/jgit/treewalk/NameConflictTreeWalk/getRawPath()
org/eclipse/jgit/merge/ResolveMerger/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)#java/util/Collections/emptyList()
org/eclipse/jgit/merge/ResolveMerger/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)#org/eclipse/jgit/treewalk/NameConflictTreeWalk/getTreeCount()
org/eclipse/jgit/merge/ResolveMerger/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)#org/eclipse/jgit/treewalk/NameConflictTreeWalk/getFileMode(int)
org/eclipse/jgit/merge/ResolveMerger/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)#org/eclipse/jgit/treewalk/NameConflictTreeWalk/getObjectId(int)
org/eclipse/jgit/merge/ResolveMerger/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)#org/eclipse/jgit/dircache/DirCacheBuildIterator/getDirCacheEntry()
org/eclipse/jgit/merge/ResolveMerger/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)#org/eclipse/jgit/treewalk/NameConflictTreeWalk/getRawMode(int)
org/eclipse/jgit/merge/ResolveMerger/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)#org/eclipse/jgit/treewalk/NameConflictTreeWalk/getPathString()
org/eclipse/jgit/merge/ResolveMerger/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)#java/util/List/add(java.lang.Object)
org/eclipse/jgit/merge/ResolveMerger/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)#org/eclipse/jgit/treewalk/NameConflictTreeWalk/isSubtree()
org/eclipse/jgit/merge/ResolveMerger/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)#org/eclipse/jgit/treewalk/NameConflictTreeWalk/idEqual(int,int)
org/eclipse/jgit/merge/ResolveMerger/updateIndex(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.merge.MergeResult)#org/eclipse/jgit/merge/ResolveMerger/getObjectInserter()
org/eclipse/jgit/merge/ResolveMerger/updateIndex(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.merge.MergeResult)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/merge/ResolveMerger/updateIndex(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.merge.MergeResult)#org/eclipse/jgit/treewalk/NameConflictTreeWalk/getRawPath()
org/eclipse/jgit/merge/ResolveMerger/updateIndex(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.merge.MergeResult)#java/io/File/lastModified()
org/eclipse/jgit/merge/ResolveMerger/updateIndex(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.merge.MergeResult)#java/io/InputStream/close()
org/eclipse/jgit/merge/ResolveMerger/updateIndex(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.merge.MergeResult)#java/io/File/length()
org/eclipse/jgit/merge/ResolveMerger/updateIndex(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.merge.MergeResult)#java/io/FileInputStream/FileInputStream(java.io.File)
org/eclipse/jgit/merge/ResolveMerger/updateIndex(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.merge.MergeResult)#org/eclipse/jgit/treewalk/NameConflictTreeWalk/getRawMode(int)
org/eclipse/jgit/merge/ResolveMerger/updateIndex(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.merge.MergeResult)#org/eclipse/jgit/treewalk/NameConflictTreeWalk/getPathString()
org/eclipse/jgit/internal/storage/dfs/DfsGarbageCollector/pack(org.eclipse.jgit.lib.ProgressMonitor)#java/lang/IllegalStateException/IllegalStateException(java.lang.String)
org/eclipse/jgit/internal/storage/dfs/DfsGarbageCollector/pack(org.eclipse.jgit.lib.ProgressMonitor)#java/util/Iterator/hasNext()
org/eclipse/jgit/internal/storage/dfs/DfsGarbageCollector/pack(org.eclipse.jgit.lib.ProgressMonitor)#java/util/List/isEmpty()
org/eclipse/jgit/internal/storage/dfs/DfsGarbageCollector/pack(org.eclipse.jgit.lib.ProgressMonitor)#java/util/Collection/iterator()
org/eclipse/jgit/internal/storage/dfs/DfsGarbageCollector/pack(org.eclipse.jgit.lib.ProgressMonitor)#java/util/HashSet/HashSet()
org/eclipse/jgit/internal/storage/dfs/DfsGarbageCollector/pack(org.eclipse.jgit.lib.ProgressMonitor)#java/util/Set/add(java.lang.Object)
org/eclipse/jgit/internal/storage/dfs/DfsGarbageCollector/pack(org.eclipse.jgit.lib.ProgressMonitor)#java/util/Set/addAll(java.util.Collection)
org/eclipse/jgit/internal/storage/dfs/DfsGarbageCollector/pack(org.eclipse.jgit.lib.ProgressMonitor)#java/util/Map/values()
org/eclipse/jgit/internal/storage/dfs/DfsGarbageCollector/pack(org.eclipse.jgit.lib.ProgressMonitor)#java/util/Iterator/next()
org/eclipse/jgit/transport/PushProcess/prepareRemoteUpdates()#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/PushProcess/prepareRemoteUpdates()#java/util/Collection/iterator()
org/eclipse/jgit/transport/PushProcess/prepareRemoteUpdates()#java/lang/Exception/getMessage()
org/eclipse/jgit/transport/PushProcess/prepareRemoteUpdates()#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/transport/PushProcess/prepareRemoteUpdates()#org/eclipse/jgit/lib/ObjectId/equals(org.eclipse.jgit.lib.AnyObjectId)
org/eclipse/jgit/transport/PushProcess/prepareRemoteUpdates()#org/eclipse/jgit/transport/PushConnection/getRef(java.lang.String)
org/eclipse/jgit/transport/PushProcess/prepareRemoteUpdates()#java/util/Map/values()
org/eclipse/jgit/transport/PushProcess/prepareRemoteUpdates()#java/util/Iterator/next()
org/eclipse/jgit/transport/PushProcess/prepareRemoteUpdates()#java/util/HashMap/HashMap()
org/eclipse/jgit/transport/PushProcess/prepareRemoteUpdates()#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/transport/PushProcess/execute(org.eclipse.jgit.lib.ProgressMonitor)#org/eclipse/jgit/transport/PushConnection/getMessages()
org/eclipse/jgit/transport/PushProcess/execute(org.eclipse.jgit.lib.ProgressMonitor)#java/util/Map/isEmpty()
org/eclipse/jgit/transport/PushProcess/execute(org.eclipse.jgit.lib.ProgressMonitor)#java/util/Map/values()
org/eclipse/jgit/transport/PushProcess/execute(org.eclipse.jgit.lib.ProgressMonitor)#org/eclipse/jgit/transport/PushResult/add(org.eclipse.jgit.transport.TrackingRefUpdate)
org/eclipse/jgit/transport/PushProcess/execute(org.eclipse.jgit.lib.ProgressMonitor)#org/eclipse/jgit/transport/PushConnection/close()
org/eclipse/jgit/transport/PushProcess/execute(org.eclipse.jgit.lib.ProgressMonitor)#java/util/Collection/iterator()
org/eclipse/jgit/transport/PushProcess/execute(org.eclipse.jgit.lib.ProgressMonitor)#org/eclipse/jgit/transport/PushConnection/getRefsMap()
org/eclipse/jgit/transport/PushProcess/execute(org.eclipse.jgit.lib.ProgressMonitor)#org/eclipse/jgit/transport/PushResult/addMessages(java.lang.String)
org/eclipse/jgit/transport/PushProcess/execute(org.eclipse.jgit.lib.ProgressMonitor)#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/PushProcess/execute(org.eclipse.jgit.lib.ProgressMonitor)#org/eclipse/jgit/transport/PushResult/setAdvertisedRefs(org.eclipse.jgit.transport.URIish,java.util.Map)
org/eclipse/jgit/transport/PushProcess/execute(org.eclipse.jgit.lib.ProgressMonitor)#java/util/Iterator/next()
org/eclipse/jgit/api/CheckoutCommand/call()#java/util/ArrayList/ArrayList(java.util.Collection)
org/eclipse/jgit/api/CheckoutCommand/call()#org/eclipse/jgit/api/CheckoutCommand/checkCallable()
org/eclipse/jgit/api/CheckoutCommand/call()#org/eclipse/jgit/lib/RefUpdate$Result/name()
org/eclipse/jgit/api/CheckoutCommand/call()#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/api/CheckoutCommand/call()#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/api/CheckoutCommand/call()#java/util/EnumSet/of(java.lang.Enum,java.lang.Enum)
org/eclipse/jgit/api/CheckoutCommand/call()#org/eclipse/jgit/lib/RefUpdate$Result/ordinal()
org/eclipse/jgit/api/CheckoutCommand/call()#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/api/CheckoutCommand/call()#java/util/List/isEmpty()
org/eclipse/jgit/api/CheckoutCommand/call()#java/io/IOException/getMessage()
org/eclipse/jgit/api/CheckoutCommand/call()#java/util/Map/keySet()
org/eclipse/jgit/api/CheckoutCommand/call()#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/api/CheckoutCommand/call()#java/util/EnumSet/contains(java.lang.Object)
org/eclipse/jgit/api/CheckoutCommand/call()#org/eclipse/jgit/api/CheckoutCommand/setCallable(boolean)
org/eclipse/jgit/api/CheckoutCommand/call()#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/BundleFetchConnection/readBundleV2()#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/transport/BundleFetchConnection/readBundleV2()#java/lang/String/charAt(int)
org/eclipse/jgit/transport/BundleFetchConnection/readBundleV2()#java/util/LinkedHashMap/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/transport/BundleFetchConnection/readBundleV2()#java/lang/String/length()
org/eclipse/jgit/transport/BundleFetchConnection/readBundleV2()#java/lang/String/substring(int,int)
org/eclipse/jgit/transport/BundleFetchConnection/readBundleV2()#java/lang/String/substring(int)
org/eclipse/jgit/transport/BundleFetchConnection/readBundleV2()#org/eclipse/jgit/transport/BundleFetchConnection/available(java.util.Map)
org/eclipse/jgit/transport/BundleFetchConnection/readBundleV2()#org/eclipse/jgit/lib/ObjectIdRef$Unpeeled/Unpeeled(org.eclipse.jgit.lib.Ref$Storage,java.lang.String,org.eclipse.jgit.lib.ObjectId)
org/eclipse/jgit/transport/BundleFetchConnection/readBundleV2()#java/util/LinkedHashMap/LinkedHashMap()
org/eclipse/jgit/transport/BundleFetchConnection/verifyPrerequisites()#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/BundleFetchConnection/verifyPrerequisites()#java/util/Map$Entry/getKey()
org/eclipse/jgit/transport/BundleFetchConnection/verifyPrerequisites()#java/io/IOException/getMessage()
org/eclipse/jgit/transport/BundleFetchConnection/verifyPrerequisites()#java/util/List/size()
org/eclipse/jgit/transport/BundleFetchConnection/verifyPrerequisites()#java/util/Map/values()
org/eclipse/jgit/transport/BundleFetchConnection/verifyPrerequisites()#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/transport/BundleFetchConnection/verifyPrerequisites()#java/util/Set/iterator()
org/eclipse/jgit/transport/BundleFetchConnection/verifyPrerequisites()#java/util/Map$Entry/getValue()
org/eclipse/jgit/transport/BundleFetchConnection/verifyPrerequisites()#org/eclipse/jgit/lib/ObjectId/name()
org/eclipse/jgit/transport/BundleFetchConnection/verifyPrerequisites()#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/transport/BundleFetchConnection/verifyPrerequisites()#java/util/ArrayList/ArrayList()
org/eclipse/jgit/transport/BundleFetchConnection/verifyPrerequisites()#java/util/Map/isEmpty()
org/eclipse/jgit/transport/BundleFetchConnection/verifyPrerequisites()#java/util/Map/get(java.lang.Object)
org/eclipse/jgit/transport/BundleFetchConnection/verifyPrerequisites()#org/eclipse/jgit/revwalk/RevCommit/has(org.eclipse.jgit.revwalk.RevFlag)
org/eclipse/jgit/transport/BundleFetchConnection/verifyPrerequisites()#java/util/Iterator/next()
org/eclipse/jgit/transport/BundleFetchConnection/verifyPrerequisites()#java/util/HashMap/HashMap()
org/eclipse/jgit/transport/BundleFetchConnection/verifyPrerequisites()#org/eclipse/jgit/revwalk/RevCommit/add(org.eclipse.jgit.revwalk.RevFlag)
org/eclipse/jgit/transport/BundleFetchConnection/verifyPrerequisites()#java/util/List/add(java.lang.Object)
org/eclipse/jgit/transport/BundleFetchConnection/verifyPrerequisites()#java/util/List/iterator()
org/eclipse/jgit/transport/BundleFetchConnection/verifyPrerequisites()#java/util/Collection/iterator()
org/eclipse/jgit/transport/BundleFetchConnection/verifyPrerequisites()#java/util/Map/entrySet()
org/eclipse/jgit/transport/HttpAuthMethod/Negotiate/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#org/eclipse/jgit/transport/HttpAuthMethod$Negotiate/getType()
org/eclipse/jgit/transport/HttpAuthMethod/Negotiate/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#org/eclipse/jgit/transport/HttpAuthMethod$Type/getSchemeName()
org/eclipse/jgit/transport/HttpAuthMethod/Negotiate/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#org/ietf/jgss/GSSContext/initSecContext(byte[],int,int)
org/eclipse/jgit/transport/HttpAuthMethod/Negotiate/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#java/lang/String/toLowerCase()
org/eclipse/jgit/transport/HttpAuthMethod/Negotiate/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#java/io/IOException/IOException()
org/eclipse/jgit/transport/HttpAuthMethod/Negotiate/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#org/ietf/jgss/GSSManager/createContext(org.ietf.jgss.GSSName,org.ietf.jgss.Oid,org.ietf.jgss.GSSCredential,int)
org/eclipse/jgit/transport/HttpAuthMethod/Negotiate/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/HttpAuthMethod/Negotiate/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#java/net/URL/getHost()
org/eclipse/jgit/transport/HttpAuthMethod/Negotiate/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/HttpAuthMethod/Negotiate/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#org/ietf/jgss/GSSContext/requestCredDeleg(boolean)
org/eclipse/jgit/transport/HttpAuthMethod/Negotiate/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#java/io/IOException/initCause(java.lang.Throwable)
org/eclipse/jgit/transport/HttpAuthMethod/Negotiate/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/HttpAuthMethod/Negotiate/configureRequest(org.eclipse.jgit.transport.http.HttpConnection)#org/ietf/jgss/GSSManager/createName(java.lang.String,org.ietf.jgss.Oid)
org/eclipse/jgit/transport/WalkPushConnection/push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Map,java.io.OutputStream)#org/eclipse/jgit/transport/WalkPushConnection/markStartedOperation()
org/eclipse/jgit/transport/WalkPushConnection/push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Map,java.io.OutputStream)#java/util/ArrayList/ArrayList()
org/eclipse/jgit/transport/WalkPushConnection/push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Map,java.io.OutputStream)#java/util/ArrayList/ArrayList(int)
org/eclipse/jgit/transport/WalkPushConnection/push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Map,java.io.OutputStream)#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/WalkPushConnection/push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Map,java.io.OutputStream)#java/io/IOException/getMessage()
org/eclipse/jgit/transport/WalkPushConnection/push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Map,java.io.OutputStream)#java/util/Iterator/next()
org/eclipse/jgit/transport/WalkPushConnection/push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Map,java.io.OutputStream)#java/util/List/add(java.lang.Object)
org/eclipse/jgit/transport/WalkPushConnection/push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Map,java.io.OutputStream)#org/eclipse/jgit/transport/WalkPushConnection$1/1(org.eclipse.jgit.transport.WalkPushConnection,java.util.Collection)
org/eclipse/jgit/transport/WalkPushConnection/push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Map,java.io.OutputStream)#java/util/TreeMap/TreeMap(java.util.Map)
org/eclipse/jgit/transport/WalkPushConnection/push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Map,java.io.OutputStream)#java/util/List/isEmpty()
org/eclipse/jgit/transport/WalkPushConnection/push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Map,java.io.OutputStream)#java/util/Collection/isEmpty()
org/eclipse/jgit/transport/WalkPushConnection/push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Map,java.io.OutputStream)#java/util/Map/size()
org/eclipse/jgit/transport/WalkPushConnection/push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Map,java.io.OutputStream)#java/util/Map/values()
org/eclipse/jgit/transport/WalkPushConnection/push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Map,java.io.OutputStream)#org/eclipse/jgit/transport/WalkPushConnection/getRefsMap()
org/eclipse/jgit/transport/WalkPushConnection/push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Map,java.io.OutputStream)#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/transport/WalkPushConnection/push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Map,java.io.OutputStream)#java/util/List/iterator()
org/eclipse/jgit/transport/WalkPushConnection/push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Map,java.io.OutputStream)#java/util/Collection/iterator()
org/eclipse/jgit/transport/WalkPushConnection/sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)#java/io/OutputStream/close()
org/eclipse/jgit/transport/WalkPushConnection/sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)#java/util/LinkedHashMap/remove(java.lang.Object)
org/eclipse/jgit/transport/WalkPushConnection/sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/WalkPushConnection/sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)#java/util/LinkedHashMap/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/transport/WalkPushConnection/sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)#java/util/ArrayList/add(java.lang.Object)
org/eclipse/jgit/transport/WalkPushConnection/sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)#java/util/ArrayList/ArrayList()
org/eclipse/jgit/transport/WalkPushConnection/sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/WalkPushConnection/sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)#java/util/Iterator/next()
org/eclipse/jgit/transport/WalkPushConnection/sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)#java/lang/String/substring(int,int)
org/eclipse/jgit/transport/WalkPushConnection/sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/WalkPushConnection/sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)#java/util/ArrayList/addAll(java.util.Collection)
org/eclipse/jgit/transport/WalkPushConnection/sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)#java/util/LinkedHashMap/keySet()
org/eclipse/jgit/transport/WalkPushConnection/sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)#java/util/List/iterator()
org/eclipse/jgit/transport/WalkPushConnection/sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)#java/util/Collection/iterator()
org/eclipse/jgit/transport/WalkPushConnection/sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)#org/eclipse/jgit/lib/ObjectId/name()
org/eclipse/jgit/transport/WalkPushConnection/sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)#java/util/HashSet/HashSet()
org/eclipse/jgit/transport/WalkPushConnection/sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)#java/util/Set/add(java.lang.Object)
org/eclipse/jgit/transport/WalkPushConnection/sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)#java/util/LinkedHashMap/LinkedHashMap()
org/eclipse/jgit/transport/WalkPushConnection/sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)#org/eclipse/jgit/transport/WalkPushConnection/getRefs()
org/eclipse/jgit/transport/WalkPushConnection/sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)#java/lang/StringBuilder/toString()
org/eclipse/jgit/internal/storage/file/RefDirectory/pack(java.util.List)#java/util/Iterator/hasNext()
org/eclipse/jgit/internal/storage/file/RefDirectory/pack(java.util.List)#org/eclipse/jgit/lib/ObjectId/equals(org.eclipse.jgit.lib.AnyObjectId)
org/eclipse/jgit/internal/storage/file/RefDirectory/pack(java.util.List)#java/util/List/size()
org/eclipse/jgit/internal/storage/file/RefDirectory/pack(java.util.List)#org/eclipse/jgit/internal/storage/file/RefDirectory$LooseRef/getObjectId()
org/eclipse/jgit/internal/storage/file/RefDirectory/pack(java.util.List)#java/util/List/iterator()
org/eclipse/jgit/internal/storage/file/RefDirectory/pack(java.util.List)#java/io/IOException/IOException(java.lang.String)
org/eclipse/jgit/internal/storage/file/RefDirectory/pack(java.util.List)#org/eclipse/jgit/internal/storage/file/RefDirectory$LooseRef/isSymbolic()
org/eclipse/jgit/internal/storage/file/RefDirectory/pack(java.util.List)#java/util/concurrent/atomic/AtomicReference/compareAndSet(java.lang.Object,java.lang.Object)
org/eclipse/jgit/internal/storage/file/RefDirectory/pack(java.util.List)#java/util/Iterator/next()
org/eclipse/jgit/internal/storage/file/RefDirectory/pack(java.util.List)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/internal/storage/file/RefDirectory/pack(java.util.List)#org/eclipse/jgit/internal/storage/file/FileRepository/getFS()
org/eclipse/jgit/internal/storage/file/RefDirectory/pack(java.util.List)#java/util/concurrent/atomic/AtomicReference/get()
org/eclipse/jgit/internal/storage/file/RefDirectory/scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)#java/io/IOException/IOException(java.lang.String)
org/eclipse/jgit/internal/storage/file/RefDirectory/scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)#java/io/IOException/initCause(java.lang.Throwable)
org/eclipse/jgit/internal/storage/file/RefDirectory/scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)#org/eclipse/jgit/lib/ObjectId/equals(org.eclipse.jgit.lib.AnyObjectId)
org/eclipse/jgit/internal/storage/file/RefDirectory/scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)#org/eclipse/jgit/internal/storage/file/RefDirectory$LooseRef/isSymbolic()
org/eclipse/jgit/internal/storage/file/RefDirectory/scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)#org/eclipse/jgit/internal/storage/file/RefDirectory$LooseRef/getName()
org/eclipse/jgit/internal/storage/file/RefDirectory/scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)#java/lang/String/equals(java.lang.Object)
org/eclipse/jgit/internal/storage/file/RefDirectory/scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/internal/storage/file/RefDirectory/scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)#org/eclipse/jgit/internal/storage/file/RefDirectory$LooseUnpeeled/LooseUnpeeled(org.eclipse.jgit.internal.storage.file.FileSnapshot,java.lang.String,org.eclipse.jgit.lib.ObjectId)
org/eclipse/jgit/internal/storage/file/RefDirectory/scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)#java/lang/Character/isWhitespace(int)
org/eclipse/jgit/internal/storage/file/RefDirectory/scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)#org/eclipse/jgit/internal/storage/file/RefDirectory$LooseRef/getSnapShot()
org/eclipse/jgit/internal/storage/file/RefDirectory/scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)#org/eclipse/jgit/internal/storage/file/RefDirectory$LooseRef/getTarget()
org/eclipse/jgit/internal/storage/file/RefDirectory/parsePackedRefs(java.io.BufferedReader)#java/io/IOException/IOException(java.lang.String)
org/eclipse/jgit/internal/storage/file/RefDirectory/parsePackedRefs(java.io.BufferedReader)#org/eclipse/jgit/util/RefList$Builder/toRefList()
org/eclipse/jgit/internal/storage/file/RefDirectory/parsePackedRefs(java.io.BufferedReader)#java/lang/String/substring(int,int)
org/eclipse/jgit/internal/storage/file/RefDirectory/parsePackedRefs(java.io.BufferedReader)#java/lang/String/substring(int)
org/eclipse/jgit/internal/storage/file/RefDirectory/parsePackedRefs(java.io.BufferedReader)#java/io/BufferedReader/readLine()
org/eclipse/jgit/internal/storage/file/RefDirectory/parsePackedRefs(java.io.BufferedReader)#java/lang/String/contains(java.lang.CharSequence)
org/eclipse/jgit/internal/storage/file/RefDirectory/parsePackedRefs(java.io.BufferedReader)#org/eclipse/jgit/util/RefList$Builder/size()
org/eclipse/jgit/internal/storage/file/RefDirectory/parsePackedRefs(java.io.BufferedReader)#java/lang/String/charAt(int)
org/eclipse/jgit/internal/storage/file/RefDirectory/parsePackedRefs(java.io.BufferedReader)#org/eclipse/jgit/util/RefList$Builder/add(org.eclipse.jgit.lib.Ref)
org/eclipse/jgit/internal/storage/file/RefDirectory/parsePackedRefs(java.io.BufferedReader)#java/lang/String/length()
org/eclipse/jgit/internal/storage/file/RefDirectory/parsePackedRefs(java.io.BufferedReader)#org/eclipse/jgit/util/RefList$Builder/set(int,org.eclipse.jgit.lib.Ref)
org/eclipse/jgit/internal/storage/file/RefDirectory/parsePackedRefs(java.io.BufferedReader)#org/eclipse/jgit/lib/ObjectIdRef$PeeledTag/PeeledTag(org.eclipse.jgit.lib.Ref$Storage,java.lang.String,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.ObjectId)
org/eclipse/jgit/internal/storage/file/RefDirectory/parsePackedRefs(java.io.BufferedReader)#org/eclipse/jgit/util/RefList$Builder/sort()
org/eclipse/jgit/internal/storage/file/RefDirectory/parsePackedRefs(java.io.BufferedReader)#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/internal/storage/file/RefDirectory/parsePackedRefs(java.io.BufferedReader)#org/eclipse/jgit/lib/ObjectIdRef$PeeledNonTag/PeeledNonTag(org.eclipse.jgit.lib.Ref$Storage,java.lang.String,org.eclipse.jgit.lib.ObjectId)
org/eclipse/jgit/internal/storage/file/RefDirectory/parsePackedRefs(java.io.BufferedReader)#org/eclipse/jgit/lib/ObjectIdRef$Unpeeled/Unpeeled(org.eclipse.jgit.lib.Ref$Storage,java.lang.String,org.eclipse.jgit.lib.ObjectId)
org/eclipse/jgit/internal/storage/file/RefDirectory/parsePackedRefs(java.io.BufferedReader)#org/eclipse/jgit/util/RefList$Builder/Builder()
org/eclipse/jgit/internal/storage/file/RefDirectory/parsePackedRefs(java.io.BufferedReader)#java/lang/String/indexOf(int)
org/eclipse/jgit/internal/storage/file/RefDirectory/getRefs(java.lang.String)#org/eclipse/jgit/internal/storage/file/RefDirectory$LooseScanner/LooseScanner(org.eclipse.jgit.internal.storage.file.RefDirectory,org.eclipse.jgit.util.RefList)
org/eclipse/jgit/internal/storage/file/RefDirectory/getRefs(java.lang.String)#java/util/concurrent/atomic/AtomicReference/compareAndSet(java.lang.Object,java.lang.Object)
org/eclipse/jgit/internal/storage/file/RefDirectory/getRefs(java.lang.String)#org/eclipse/jgit/util/RefList$Builder/set(int,org.eclipse.jgit.lib.Ref)
org/eclipse/jgit/internal/storage/file/RefDirectory/getRefs(java.lang.String)#org/eclipse/jgit/util/RefList$Builder/toRefList()
org/eclipse/jgit/internal/storage/file/RefDirectory/getRefs(java.lang.String)#java/util/concurrent/atomic/AtomicReference/get()
org/eclipse/jgit/internal/storage/file/RefDirectory/getRefs(java.lang.String)#org/eclipse/jgit/util/RefList$Builder/sort()
org/eclipse/jgit/internal/storage/file/RefDirectory/getRefs(java.lang.String)#org/eclipse/jgit/util/RefList$Builder/remove(int)
org/eclipse/jgit/internal/storage/file/RefDirectory/getRefs(java.lang.String)#org/eclipse/jgit/internal/storage/file/RefDirectory$LooseScanner/scan(java.lang.String)
org/eclipse/jgit/internal/storage/file/RefDirectory/getRefs(java.lang.String)#org/eclipse/jgit/util/RefList$Builder/size()
org/eclipse/jgit/internal/storage/file/RefDirectory/getRefs(java.lang.String)#java/util/concurrent/atomic/AtomicInteger/incrementAndGet()
org/eclipse/jgit/internal/storage/file/RefDirectory/getRefs(java.lang.String)#org/eclipse/jgit/util/RefList$Builder/get(int)
org/eclipse/jgit/internal/storage/file/RefDirectory/isNameConflicting(java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/internal/storage/file/RefDirectory/isNameConflicting(java.lang.String)#org/eclipse/jgit/internal/storage/file/RefDirectory$LooseRef/getName()
org/eclipse/jgit/internal/storage/file/RefDirectory/isNameConflicting(java.lang.String)#java/lang/String/lastIndexOf(int,int)
org/eclipse/jgit/internal/storage/file/RefDirectory/isNameConflicting(java.lang.String)#java/lang/String/substring(int,int)
org/eclipse/jgit/internal/storage/file/RefDirectory/isNameConflicting(java.lang.String)#java/lang/StringBuilder/append(char)
org/eclipse/jgit/internal/storage/file/RefDirectory/isNameConflicting(java.lang.String)#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/internal/storage/file/RefDirectory/isNameConflicting(java.lang.String)#java/lang/StringBuilder/toString()
org/eclipse/jgit/internal/storage/file/RefDirectory/isNameConflicting(java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/internal/storage/file/RefDirectory/isNameConflicting(java.lang.String)#java/lang/String/lastIndexOf(int)
org/eclipse/jgit/api/PullCommand/call()#org/eclipse/jgit/lib/RepositoryState/equals(java.lang.Object)
org/eclipse/jgit/api/PullCommand/call()#java/lang/String/substring(int)
org/eclipse/jgit/api/PullCommand/call()#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/api/PullCommand/call()#java/lang/StringBuilder/toString()
org/eclipse/jgit/api/PullCommand/call()#org/eclipse/jgit/api/PullCommand/checkCallable()
org/eclipse/jgit/api/PullCommand/call()#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/api/PullCommand/call()#org/eclipse/jgit/transport/FetchResult/getAdvertisedRef(java.lang.String)
org/eclipse/jgit/api/PullCommand/call()#java/lang/String/length()
org/eclipse/jgit/api/PullCommand/call()#org/eclipse/jgit/api/PullCommand$PullRebaseMode/access$100(org.eclipse.jgit.api.PullCommand$PullRebaseMode)
org/eclipse/jgit/api/PullCommand/call()#org/eclipse/jgit/api/PullCommand/configure(org.eclipse.jgit.api.TransportCommand)
org/eclipse/jgit/api/PullCommand/call()#org/eclipse/jgit/api/PullCommand$PullRebaseMode/access$000(org.eclipse.jgit.api.PullCommand$PullRebaseMode)
org/eclipse/jgit/api/PullCommand/call()#org/eclipse/jgit/lib/RepositoryState/name()
org/eclipse/jgit/api/PullCommand/call()#java/lang/String/equals(java.lang.Object)
org/eclipse/jgit/api/PullCommand/call()#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/api/PullCommand/call()#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/util/FileUtils/delete(java.io.File,int)#java/util/ArrayList/ArrayList()
org/eclipse/jgit/util/FileUtils/delete(java.io.File,int)#java/lang/Thread/sleep(long)
org/eclipse/jgit/util/FileUtils/delete(java.io.File,int)#java/io/IOException/IOException(java.lang.String)
org/eclipse/jgit/util/FileUtils/delete(java.io.File,int)#java/util/Iterator/next()
org/eclipse/jgit/util/FileUtils/delete(java.io.File,int)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/util/FileUtils/delete(java.io.File,int)#java/io/File/getAbsolutePath()
org/eclipse/jgit/util/FileUtils/delete(java.io.File,int)#java/util/List/add(java.lang.Object)
org/eclipse/jgit/util/FileUtils/delete(java.io.File,int)#java/io/File/isFile()
org/eclipse/jgit/util/FileUtils/delete(java.io.File,int)#java/util/List/iterator()
org/eclipse/jgit/util/FileUtils/delete(java.io.File,int)#java/io/File/delete()
org/eclipse/jgit/util/FileUtils/delete(java.io.File,int)#java/util/Iterator/hasNext()
org/eclipse/jgit/util/FileUtils/delete(java.io.File,int)#java/io/File/isDirectory()
org/eclipse/jgit/util/FileUtils/delete(java.io.File,int)#java/io/File/listFiles()
org/eclipse/jgit/api/NameRevCommand/call()#org/eclipse/jgit/api/NameRevCommand$NameRevCommit/getParent(int)
org/eclipse/jgit/api/NameRevCommand/call()#org/eclipse/jgit/api/NameRevCommand$NameRevCommit/access$402(org.eclipse.jgit.api.NameRevCommand$NameRevCommit,int)
org/eclipse/jgit/api/NameRevCommand/call()#java/util/Iterator/hasNext()
org/eclipse/jgit/api/NameRevCommand/call()#org/eclipse/jgit/api/NameRevCommand$NameRevCommit/access$400(org.eclipse.jgit.api.NameRevCommand$NameRevCommit)
org/eclipse/jgit/api/NameRevCommand/call()#java/io/IOException/getMessage()
org/eclipse/jgit/api/NameRevCommand/call()#org/eclipse/jgit/api/NameRevCommand$NameRevCommit/access$102(org.eclipse.jgit.api.NameRevCommand$NameRevCommit,long)
org/eclipse/jgit/api/NameRevCommand/call()#java/lang/StringBuilder/append(char)
org/eclipse/jgit/api/NameRevCommand/call()#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/api/NameRevCommand/call()#java/util/LinkedHashMap/LinkedHashMap(int)
org/eclipse/jgit/api/NameRevCommand/call()#org/eclipse/jgit/api/NameRevCommand$NameRevCommit/access$300(org.eclipse.jgit.api.NameRevCommand$NameRevCommit)
org/eclipse/jgit/api/NameRevCommand/call()#java/lang/StringBuilder/append(int)
org/eclipse/jgit/api/NameRevCommand/call()#org/eclipse/jgit/api/NameRevCommand$NameRevCommit/access$200(org.eclipse.jgit.api.NameRevCommand$NameRevCommit)
org/eclipse/jgit/api/NameRevCommand/call()#org/eclipse/jgit/api/NameRevCommand$NameRevCommit/access$202(org.eclipse.jgit.api.NameRevCommand$NameRevCommit,java.lang.String)
org/eclipse/jgit/api/NameRevCommand/call()#java/util/Map/get(java.lang.Object)
org/eclipse/jgit/api/NameRevCommand/call()#org/eclipse/jgit/api/NameRevCommand$NameRevCommit/access$100(org.eclipse.jgit.api.NameRevCommand$NameRevCommit)
org/eclipse/jgit/api/NameRevCommand/call()#java/util/List/size()
org/eclipse/jgit/api/NameRevCommand/call()#org/eclipse/jgit/api/NameRevCommand$NameRevCommit/getCommitTime()
org/eclipse/jgit/api/NameRevCommand/call()#java/util/Iterator/next()
org/eclipse/jgit/api/NameRevCommand/call()#java/util/HashMap/HashMap()
org/eclipse/jgit/api/NameRevCommand/call()#org/eclipse/jgit/api/NameRevCommand$NameRevCommit/getParentCount()
org/eclipse/jgit/api/NameRevCommand/call()#java/util/List/iterator()
org/eclipse/jgit/api/NameRevCommand/call()#org/eclipse/jgit/api/NameRevCommand/setCallable(boolean)
org/eclipse/jgit/api/NameRevCommand/call()#java/lang/StringBuilder/toString()
org/eclipse/jgit/api/MergeCommand/call()#java/util/Collections/emptyList()
org/eclipse/jgit/api/MergeCommand/call()#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/api/MergeCommand/call()#java/lang/StringBuilder/append(char)
org/eclipse/jgit/api/MergeCommand/call()#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/api/MergeCommand/call()#org/eclipse/jgit/api/MergeCommand/checkCallable()
org/eclipse/jgit/api/MergeCommand/call()#org/eclipse/jgit/api/MergeCommand/getRepository()
org/eclipse/jgit/api/MergeCommand/call()#java/util/Arrays/asList(java.lang.Object[])
org/eclipse/jgit/api/MergeCommand/call()#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/jgit/api/MergeCommand/call()#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/api/MergeCommand/call()#java/util/List/get(int)
org/eclipse/jgit/api/MergeCommand/call()#java/lang/StringBuilder/append(java.lang.Object)
org/eclipse/jgit/api/MergeCommand/call()#org/eclipse/jgit/api/MergeCommand/setCallable(boolean)
org/eclipse/jgit/api/MergeCommand/call()#java/lang/Boolean/booleanValue()
org/eclipse/jgit/api/MergeCommand/call()#java/lang/StringBuilder/toString()
org/eclipse/jgit/api/MergeCommand/call()#org/eclipse/jgit/revwalk/RevCommit/getId()
org/eclipse/jgit/api/RevertCommand/call()#java/util/List/isEmpty()
org/eclipse/jgit/api/RevertCommand/call()#org/eclipse/jgit/merge/ResolveMerger/setBase(org.eclipse.jgit.lib.AnyObjectId)
org/eclipse/jgit/api/RevertCommand/call()#java/util/Iterator/hasNext()
org/eclipse/jgit/api/RevertCommand/call()#org/eclipse/jgit/revwalk/RevTree/getId()
org/eclipse/jgit/api/RevertCommand/call()#org/eclipse/jgit/lib/ObjectId/getName()
org/eclipse/jgit/api/RevertCommand/call()#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/api/RevertCommand/call()#org/eclipse/jgit/api/RevertCommand/checkCallable()
org/eclipse/jgit/api/RevertCommand/call()#org/eclipse/jgit/api/RevertCommand/getRepository()
org/eclipse/jgit/api/RevertCommand/call()#java/util/Iterator/next()
org/eclipse/jgit/api/RevertCommand/call()#org/eclipse/jgit/revwalk/RevCommit/name()
org/eclipse/jgit/api/RevertCommand/call()#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/api/RevertCommand/call()#org/eclipse/jgit/merge/ResolveMerger/merge(org.eclipse.jgit.lib.AnyObjectId[])
org/eclipse/jgit/api/RevertCommand/call()#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/api/RevertCommand/call()#java/util/List/add(java.lang.Object)
org/eclipse/jgit/api/RevertCommand/call()#java/lang/Integer/valueOf(int)
org/eclipse/jgit/api/RevertCommand/call()#java/util/List/iterator()
org/eclipse/jgit/api/RevertCommand/call()#org/eclipse/jgit/lib/ObjectId/abbreviate(int)
org/eclipse/jgit/api/RevertCommand/call()#java/lang/StringBuilder/toString()
org/eclipse/jgit/api/RevertCommand/call()#org/eclipse/jgit/merge/ResolveMerger/getBaseCommitId()
org/eclipse/jgit/api/RevertCommand/call()#org/eclipse/jgit/revwalk/RevCommit/getId()
org/eclipse/jgit/api/NameRevCommand/NameRevCommit/toString()#java/lang/StringBuilder/append(java.lang.CharSequence)
org/eclipse/jgit/api/NameRevCommand/NameRevCommit/toString()#java/lang/Class/getSimpleName()
org/eclipse/jgit/api/NameRevCommand/NameRevCommit/toString()#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/api/NameRevCommand/NameRevCommit/toString()#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/jgit/api/NameRevCommand/NameRevCommit/toString()#java/lang/StringBuilder/append(long)
org/eclipse/jgit/api/NameRevCommand/NameRevCommit/toString()#java/lang/StringBuilder/append(char)
org/eclipse/jgit/api/NameRevCommand/NameRevCommit/toString()#org/eclipse/jgit/api/NameRevCommand$NameRevCommit/format()
org/eclipse/jgit/api/NameRevCommand/NameRevCommit/toString()#java/lang/StringBuilder/toString()
org/eclipse/jgit/api/NameRevCommand/NameRevCommit/toString()#java/lang/StringBuilder/append(java.lang.Object)
org/eclipse/jgit/api/NameRevCommand/NameRevCommit/toString()#java/lang/Object/getClass()
org/eclipse/jgit/api/RebaseCommand/parseAuthor(byte[])#java/lang/Long/parseLong(java.lang.String)
org/eclipse/jgit/api/RebaseCommand/parseAuthor(byte[])#java/lang/String/charAt(int)
org/eclipse/jgit/api/RebaseCommand/parseAuthor(byte[])#java/util/Map/get(java.lang.Object)
org/eclipse/jgit/api/RebaseCommand/parseAuthor(byte[])#java/util/HashMap/HashMap()
org/eclipse/jgit/api/RebaseCommand/parseAuthor(byte[])#java/lang/String/substring(int,int)
org/eclipse/jgit/api/RebaseCommand/parseAuthor(byte[])#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/api/RebaseCommand/parseAuthor(byte[])#java/lang/String/indexOf(int)
org/eclipse/jgit/api/RebaseCommand/parseAuthor(byte[])#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/api/RebaseCommand/parseAuthor(byte[])#java/lang/String/substring(int)
org/eclipse/jgit/api/RebaseCommand/parseAuthor(byte[])#java/lang/Integer/parseInt(java.lang.String)
org/eclipse/jgit/api/RebaseCommand/processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)#org/eclipse/jgit/api/RebaseCommand$InteractiveHandler/modifyCommitMessage(java.lang.String)
org/eclipse/jgit/api/RebaseCommand/processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)#java/io/File/exists()
org/eclipse/jgit/api/RebaseCommand/processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)#java/util/Iterator/next()
org/eclipse/jgit/api/RebaseCommand/processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)#org/eclipse/jgit/revwalk/RevCommit/name()
org/eclipse/jgit/api/RebaseCommand/processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)#org/eclipse/jgit/lib/RebaseTodoLine$Action/ordinal()
org/eclipse/jgit/api/RebaseCommand/processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)#org/eclipse/jgit/api/RebaseCommand$RebaseState/getPath(java.lang.String)
org/eclipse/jgit/api/RebaseCommand/processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)#java/util/List/size()
org/eclipse/jgit/api/RebaseCommand/processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)#java/util/Collection/size()
org/eclipse/jgit/api/RebaseCommand/processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)#java/util/List/get(int)
org/eclipse/jgit/api/RebaseCommand/processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)#org/eclipse/jgit/lib/RebaseTodoLine$Action/equals(java.lang.Object)
org/eclipse/jgit/api/RebaseCommand/processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)#java/util/Collection/iterator()
org/eclipse/jgit/api/RebaseCommand/processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)#java/io/File/delete()
org/eclipse/jgit/api/RebaseCommand/processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)#org/eclipse/jgit/api/RebaseCommand$RebaseState/createFile(java.lang.String,java.lang.String)
org/eclipse/jgit/api/RebaseCommand/processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)#org/eclipse/jgit/api/RebaseCommand$RebaseState/getFile(java.lang.String)
org/eclipse/jgit/api/RebaseCommand/calculatePickList(org.eclipse.jgit.revwalk.RevCommit)#java/util/Iterator/remove()
org/eclipse/jgit/api/RebaseCommand/calculatePickList(org.eclipse.jgit.revwalk.RevCommit)#java/util/ArrayList/ArrayList()
org/eclipse/jgit/api/RebaseCommand/calculatePickList(org.eclipse.jgit.revwalk.RevCommit)#java/io/File/createNewFile()
org/eclipse/jgit/api/RebaseCommand/calculatePickList(org.eclipse.jgit.revwalk.RevCommit)#java/util/Iterator/next()
org/eclipse/jgit/api/RebaseCommand/calculatePickList(org.eclipse.jgit.revwalk.RevCommit)#org/eclipse/jgit/api/RebaseCommand$RebaseState/getRewrittenDir()
org/eclipse/jgit/api/RebaseCommand/calculatePickList(org.eclipse.jgit.revwalk.RevCommit)#java/lang/Iterable/iterator()
org/eclipse/jgit/api/RebaseCommand/calculatePickList(org.eclipse.jgit.revwalk.RevCommit)#org/eclipse/jgit/api/RebaseCommand$RebaseState/access$200(java.io.File,java.lang.String,java.lang.String)
org/eclipse/jgit/api/RebaseCommand/calculatePickList(org.eclipse.jgit.revwalk.RevCommit)#java/io/File/File(java.io.File,java.lang.String)
org/eclipse/jgit/api/RebaseCommand/calculatePickList(org.eclipse.jgit.revwalk.RevCommit)#java/util/Iterator/hasNext()
org/eclipse/jgit/api/RebaseCommand/calculatePickList(org.eclipse.jgit.revwalk.RevCommit)#java/util/Collections/reverse(java.util.List)
org/eclipse/jgit/api/RebaseCommand/calculatePickList(org.eclipse.jgit.revwalk.RevCommit)#java/io/File/exists()
org/eclipse/jgit/api/RebaseCommand/calculatePickList(org.eclipse.jgit.revwalk.RevCommit)#org/eclipse/jgit/revwalk/RevCommit/getName()
org/eclipse/jgit/api/RebaseCommand/calculatePickList(org.eclipse.jgit.revwalk.RevCommit)#java/util/List/add(java.lang.Object)
org/eclipse/jgit/api/RebaseCommand/calculatePickList(org.eclipse.jgit.revwalk.RevCommit)#java/util/List/iterator()
org/eclipse/jgit/api/RebaseCommand/call()#org/eclipse/jgit/api/RebaseCommand/checkCallable()
org/eclipse/jgit/api/RebaseCommand/call()#java/io/IOException/getMessage()
org/eclipse/jgit/api/RebaseCommand/call()#org/eclipse/jgit/api/RebaseCommand$RebaseState/getFile(java.lang.String)
org/eclipse/jgit/api/RebaseCommand/call()#java/util/ArrayList/ArrayList()
org/eclipse/jgit/api/RebaseCommand/call()#org/eclipse/jgit/api/RebaseCommand$RebaseState/getPath(java.lang.String)
org/eclipse/jgit/api/RebaseCommand/call()#java/util/List/size()
org/eclipse/jgit/api/RebaseCommand/call()#java/io/File/exists()
org/eclipse/jgit/api/RebaseCommand/call()#java/util/List/addAll(java.util.Collection)
org/eclipse/jgit/api/RebaseCommand/call()#org/eclipse/jgit/api/RebaseCommand$RebaseState/getRewrittenDir()
org/eclipse/jgit/api/RebaseCommand/call()#org/eclipse/jgit/api/RebaseCommand$RebaseState/readFile(java.lang.String)
org/eclipse/jgit/api/RebaseCommand/call()#java/util/List/get(int)
org/eclipse/jgit/api/RebaseCommand/call()#org/eclipse/jgit/api/RebaseCommand$RebaseState/getDir()
org/eclipse/jgit/api/RebaseCommand/call()#org/eclipse/jgit/api/RebaseCommand$Operation/ordinal()
org/eclipse/jgit/api/RebaseCommand/call()#org/eclipse/jgit/api/RebaseCommand$InteractiveHandler/prepareSteps(java.util.List)
org/eclipse/jgit/api/RebaseCommand/checkSteps(java.util.List)#java/lang/String/trim()
org/eclipse/jgit/api/RebaseCommand/checkSteps(java.util.List)#java/io/File/exists()
org/eclipse/jgit/api/RebaseCommand/checkSteps(java.util.List)#org/eclipse/jgit/api/RebaseCommand$RebaseState/readFile(java.lang.String)
org/eclipse/jgit/api/RebaseCommand/checkSteps(java.util.List)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/api/RebaseCommand/checkSteps(java.util.List)#org/eclipse/jgit/lib/RebaseTodoLine$Action/equals(java.lang.Object)
org/eclipse/jgit/api/RebaseCommand/checkSteps(java.util.List)#org/eclipse/jgit/api/RebaseCommand$RebaseState/getFile(java.lang.String)
org/eclipse/jgit/api/RebaseCommand/checkSteps(java.util.List)#java/util/List/isEmpty()
org/eclipse/jgit/api/RebaseCommand/checkSteps(java.util.List)#java/lang/String/length()
org/eclipse/jgit/api/RebaseCommand/checkSteps(java.util.List)#org/eclipse/jgit/lib/RebaseTodoLine$Action/name()
org/eclipse/jgit/api/RebaseCommand/checkSteps(java.util.List)#java/util/List/get(int)
org/eclipse/jgit/api/RebaseCommand/tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)#java/io/IOException/IOException(java.lang.String)
org/eclipse/jgit/api/RebaseCommand/tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)#org/eclipse/jgit/api/errors/RefAlreadyExistsException/getMessage()
org/eclipse/jgit/api/RebaseCommand/tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)#org/eclipse/jgit/revwalk/RevCommit/name()
org/eclipse/jgit/api/RebaseCommand/tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/api/RebaseCommand/tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)#org/eclipse/jgit/api/errors/CheckoutConflictException/getMessage()
org/eclipse/jgit/api/RebaseCommand/tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)#org/eclipse/jgit/lib/RefUpdate$Result/ordinal()
org/eclipse/jgit/api/RebaseCommand/tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/api/RebaseCommand/tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)#org/eclipse/jgit/api/errors/InvalidRefNameException/getMessage()
org/eclipse/jgit/api/RebaseCommand/tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/api/RebaseCommand/tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)#org/eclipse/jgit/api/errors/RefNotFoundException/getMessage()
org/eclipse/jgit/api/RebaseCommand/tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)#java/lang/StringBuilder/toString()
org/eclipse/jgit/api/RebaseCommand/tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)#org/eclipse/jgit/revwalk/RevCommit/equals(org.eclipse.jgit.lib.AnyObjectId)
org/eclipse/jgit/api/RebaseCommand/initFilesAndRewind()#java/util/ArrayList/ArrayList()
org/eclipse/jgit/api/RebaseCommand/initFilesAndRewind()#java/util/Iterator/hasNext()
org/eclipse/jgit/api/RebaseCommand/initFilesAndRewind()#org/eclipse/jgit/lib/ObjectId/name()
org/eclipse/jgit/api/RebaseCommand/initFilesAndRewind()#org/eclipse/jgit/api/RebaseCommand$RebaseState/createFile(java.lang.String,java.lang.String)
org/eclipse/jgit/api/RebaseCommand/initFilesAndRewind()#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/api/RebaseCommand/initFilesAndRewind()#org/eclipse/jgit/api/RebaseCommand$RebaseState/getPath(java.lang.String)
org/eclipse/jgit/api/RebaseCommand/initFilesAndRewind()#java/util/Iterator/next()
org/eclipse/jgit/api/RebaseCommand/initFilesAndRewind()#java/util/ArrayList/add(java.lang.Object)
org/eclipse/jgit/api/RebaseCommand/initFilesAndRewind()#org/eclipse/jgit/revwalk/RevCommit/name()
org/eclipse/jgit/api/RebaseCommand/initFilesAndRewind()#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/api/RebaseCommand/initFilesAndRewind()#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/api/RebaseCommand/initFilesAndRewind()#java/util/List/iterator()
org/eclipse/jgit/api/RebaseCommand/initFilesAndRewind()#org/eclipse/jgit/api/RebaseCommand$RebaseState/getDir()
org/eclipse/jgit/api/RebaseCommand/initFilesAndRewind()#java/lang/StringBuilder/toString()
org/eclipse/jgit/api/RebaseCommand/initFilesAndRewind()#org/eclipse/jgit/revwalk/RevCommit/getId()
org/eclipse/jgit/api/RebaseCommand/stripCommentLines(java.lang.String)#java/lang/String/split(java.lang.String)
org/eclipse/jgit/api/RebaseCommand/stripCommentLines(java.lang.String)#java/lang/StringBuilder/deleteCharAt(int)
org/eclipse/jgit/api/RebaseCommand/stripCommentLines(java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/api/RebaseCommand/stripCommentLines(java.lang.String)#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/api/RebaseCommand/stripCommentLines(java.lang.String)#java/lang/StringBuilder/length()
org/eclipse/jgit/api/RebaseCommand/stripCommentLines(java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/api/RebaseCommand/stripCommentLines(java.lang.String)#java/lang/String/trim()
org/eclipse/jgit/api/RebaseCommand/stripCommentLines(java.lang.String)#java/lang/StringBuilder/toString()
org/eclipse/jgit/api/RebaseCommand/stripCommentLines(java.lang.String)#java/lang/String/endsWith(java.lang.String)
org/eclipse/jgit/transport/BasePackPushConnection/readStatusReport(java.util.Map)#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/BasePackPushConnection/readStatusReport(java.util.Map)#java/util/Iterator/next()
org/eclipse/jgit/transport/BasePackPushConnection/readStatusReport(java.util.Map)#java/lang/String/equals(java.lang.Object)
org/eclipse/jgit/transport/BasePackPushConnection/readStatusReport(java.util.Map)#java/lang/String/substring(int)
org/eclipse/jgit/transport/BasePackPushConnection/readStatusReport(java.util.Map)#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/transport/BasePackPushConnection/readStatusReport(java.util.Map)#java/lang/String/length()
org/eclipse/jgit/transport/BasePackPushConnection/readStatusReport(java.util.Map)#java/util/Map/get(java.lang.Object)
org/eclipse/jgit/transport/BasePackPushConnection/readStatusReport(java.util.Map)#java/util/Map/values()
org/eclipse/jgit/transport/BasePackPushConnection/readStatusReport(java.util.Map)#java/lang/String/indexOf(java.lang.String,int)
org/eclipse/jgit/transport/BasePackPushConnection/readStatusReport(java.util.Map)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/transport/BasePackPushConnection/readStatusReport(java.util.Map)#java/lang/String/substring(int,int)
org/eclipse/jgit/transport/BasePackPushConnection/readStatusReport(java.util.Map)#java/util/Collection/iterator()
org/eclipse/jgit/transport/BasePackPushConnection/writePack(java.util.Map,org.eclipse.jgit.lib.ProgressMonitor)#org/eclipse/jgit/lib/ObjectId/equals(org.eclipse.jgit.lib.AnyObjectId)
org/eclipse/jgit/transport/BasePackPushConnection/writePack(java.util.Map,org.eclipse.jgit.lib.ProgressMonitor)#java/util/Set/addAll(java.util.Collection)
org/eclipse/jgit/transport/BasePackPushConnection/writePack(java.util.Map,org.eclipse.jgit.lib.ProgressMonitor)#org/eclipse/jgit/internal/storage/pack/PackWriter$Statistics/getTimeWriting()
org/eclipse/jgit/transport/BasePackPushConnection/writePack(java.util.Map,org.eclipse.jgit.lib.ProgressMonitor)#java/util/Map/values()
org/eclipse/jgit/transport/BasePackPushConnection/writePack(java.util.Map,org.eclipse.jgit.lib.ProgressMonitor)#java/util/Collection/iterator()
org/eclipse/jgit/transport/BasePackPushConnection/writePack(java.util.Map,org.eclipse.jgit.lib.ProgressMonitor)#java/util/HashSet/HashSet()
org/eclipse/jgit/transport/BasePackPushConnection/writePack(java.util.Map,org.eclipse.jgit.lib.ProgressMonitor)#java/util/Set/add(java.lang.Object)
org/eclipse/jgit/transport/BasePackPushConnection/writePack(java.util.Map,org.eclipse.jgit.lib.ProgressMonitor)#org/eclipse/jgit/transport/BasePackPushConnection/getRefs()
org/eclipse/jgit/transport/BasePackPushConnection/writePack(java.util.Map,org.eclipse.jgit.lib.ProgressMonitor)#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/BasePackPushConnection/writePack(java.util.Map,org.eclipse.jgit.lib.ProgressMonitor)#java/util/Iterator/next()
org/eclipse/jgit/transport/BasePackPushConnection/writeCommands(java.util.Collection,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)#org/eclipse/jgit/transport/BasePackPushConnection/getRef(java.lang.String)
org/eclipse/jgit/transport/BasePackPushConnection/writeCommands(java.util.Collection,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/BasePackPushConnection/writeCommands(java.util.Collection,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)#java/lang/StringBuilder/append(char)
org/eclipse/jgit/transport/BasePackPushConnection/writeCommands(java.util.Collection,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)#java/util/Collection/iterator()
org/eclipse/jgit/transport/BasePackPushConnection/writeCommands(java.util.Collection,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)#org/eclipse/jgit/lib/ObjectId/name()
org/eclipse/jgit/transport/BasePackPushConnection/writeCommands(java.util.Collection,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/BasePackPushConnection/writeCommands(java.util.Collection,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/BasePackPushConnection/writeCommands(java.util.Collection,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)#java/util/Iterator/next()
org/eclipse/jgit/transport/BasePackPushConnection/writeCommands(java.util.Collection,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/submodule/SubmoduleWalk/getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)#java/io/IOException/IOException(java.lang.String)
org/eclipse/jgit/submodule/SubmoduleWalk/getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)#java/lang/String/length()
org/eclipse/jgit/submodule/SubmoduleWalk/getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)#java/lang/StringBuilder/append(char)
org/eclipse/jgit/submodule/SubmoduleWalk/getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/submodule/SubmoduleWalk/getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)#java/lang/StringBuilder/toString()
org/eclipse/jgit/submodule/SubmoduleWalk/getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/submodule/SubmoduleWalk/getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)#java/lang/String/charAt(int)
org/eclipse/jgit/submodule/SubmoduleWalk/getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)#org/eclipse/jgit/lib/StoredConfig/getString(java.lang.String,java.lang.String,java.lang.String)
org/eclipse/jgit/submodule/SubmoduleWalk/getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/submodule/SubmoduleWalk/getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)#java/lang/String/substring(int,int)
org/eclipse/jgit/submodule/SubmoduleWalk/getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/submodule/SubmoduleWalk/getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)#java/lang/String/lastIndexOf(int)
org/eclipse/jgit/submodule/SubmoduleWalk/getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)#java/io/File/getAbsolutePath()
org/eclipse/jgit/submodule/SubmoduleWalk/getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)#java/lang/String/substring(int)
org/eclipse/jgit/submodule/SubmoduleWalk/getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)#java/lang/String/replace(char,char)
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/readRef(java.util.TreeMap,java.lang.String,java.lang.String)#java/util/TreeMap/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/readRef(java.util.TreeMap,java.lang.String,java.lang.String)#java/io/IOException/getMessage()
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/readRef(java.util.TreeMap,java.lang.String,java.lang.String)#java/util/TreeMap/get(java.lang.Object)
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/readRef(java.util.TreeMap,java.lang.String,java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/readRef(java.util.TreeMap,java.lang.String,java.lang.String)#java/lang/String/substring(int)
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/readRef(java.util.TreeMap,java.lang.String,java.lang.String)#java/io/BufferedReader/readLine()
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/readRef(java.util.TreeMap,java.lang.String,java.lang.String)#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/readRef(java.util.TreeMap,java.lang.String,java.lang.String)#org/eclipse/jgit/lib/ObjectIdRef$Unpeeled/Unpeeled(org.eclipse.jgit.lib.Ref$Storage,java.lang.String,org.eclipse.jgit.lib.ObjectId)
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/readRef(java.util.TreeMap,java.lang.String,java.lang.String)#java/io/BufferedReader/close()
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/readRef(java.util.TreeMap,java.lang.String,java.lang.String)#org/eclipse/jgit/transport/TransportSftp$SftpObjectDB/loose(org.eclipse.jgit.lib.Ref)
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/readRef(java.util.TreeMap,java.lang.String,java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/readRef(java.util.TreeMap,java.lang.String,java.lang.String)#org/eclipse/jgit/transport/TransportSftp$SftpObjectDB/readRef(java.util.TreeMap,java.lang.String,java.lang.String)
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/readRef(java.util.TreeMap,java.lang.String,java.lang.String)#java/lang/String/length()
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/readRef(java.util.TreeMap,java.lang.String,java.lang.String)#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/readRef(java.util.TreeMap,java.lang.String,java.lang.String)#org/eclipse/jgit/transport/TransportSftp$SftpObjectDB/openReader(java.lang.String)
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/open(java.lang.String)#com/jcraft/jsch/SftpATTRS/getSize()
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/open(java.lang.String)#com/jcraft/jsch/ChannelSftp/lstat(java.lang.String)
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/open(java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/open(java.lang.String)#com/jcraft/jsch/SftpException/getMessage()
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/open(java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/open(java.lang.String)#org/eclipse/jgit/transport/WalkRemoteObjectDatabase$FileStream/FileStream(java.io.InputStream,long)
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/open(java.lang.String)#com/jcraft/jsch/ChannelSftp/get(java.lang.String)
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/open(java.lang.String)#java/io/FileNotFoundException/FileNotFoundException(java.lang.String)
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/open(java.lang.String)#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)#org/eclipse/jgit/transport/TransportSftp$SftpObjectDB/readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)#org/eclipse/jgit/transport/TransportSftp$SftpObjectDB/readRef(java.util.TreeMap,java.lang.String,java.lang.String)
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)#com/jcraft/jsch/ChannelSftp/ls(java.lang.String)
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)#java/util/Collection/iterator()
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)#com/jcraft/jsch/SftpATTRS/isDir()
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)#com/jcraft/jsch/ChannelSftp$LsEntry/getFilename()
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)#java/util/Iterator/next()
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)#com/jcraft/jsch/SftpException/getMessage()
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)#java/lang/String/equals(java.lang.Object)
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)#com/jcraft/jsch/ChannelSftp$LsEntry/getAttrs()
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/getPackNames()#java/util/ArrayList/ArrayList()
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/getPackNames()#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/getPackNames()#java/lang/String/length()
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/getPackNames()#com/jcraft/jsch/ChannelSftp$LsEntry/getFilename()
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/getPackNames()#com/jcraft/jsch/ChannelSftp/ls(java.lang.String)
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/getPackNames()#com/jcraft/jsch/ChannelSftp$LsEntry/getAttrs()
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/getPackNames()#java/lang/String/substring(int,int)
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/getPackNames()#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/getPackNames()#java/util/List/add(java.lang.Object)
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/getPackNames()#java/util/Collection/iterator()
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/getPackNames()#org/eclipse/jgit/transport/TransportSftp$SftpObjectDB$1/1(org.eclipse.jgit.transport.TransportSftp$SftpObjectDB,java.util.HashMap)
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/getPackNames()#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/getPackNames()#java/util/HashMap/containsKey(java.lang.Object)
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/getPackNames()#com/jcraft/jsch/SftpATTRS/getMTime()
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/getPackNames()#java/util/Collections/sort(java.util.List,java.util.Comparator)
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/getPackNames()#java/util/HashMap/HashMap()
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/getPackNames()#java/util/HashMap/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/getPackNames()#java/util/Iterator/next()
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/getPackNames()#com/jcraft/jsch/SftpException/getMessage()
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/getPackNames()#java/lang/Integer/valueOf(int)
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/getPackNames()#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/getPackNames()#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/TransportSftp/SftpObjectDB/getPackNames()#java/lang/String/endsWith(java.lang.String)
org/eclipse/jgit/merge/MergeFormatter/formatMerge(java.io.OutputStream,org.eclipse.jgit.merge.MergeResult,java.util.List,java.lang.String)#java/util/Iterator/hasNext()
org/eclipse/jgit/merge/MergeFormatter/formatMerge(java.io.OutputStream,org.eclipse.jgit.merge.MergeResult,java.util.List,java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/merge/MergeFormatter/formatMerge(java.io.OutputStream,org.eclipse.jgit.merge.MergeResult,java.util.List,java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/merge/MergeFormatter/formatMerge(java.io.OutputStream,org.eclipse.jgit.merge.MergeResult,java.util.List,java.lang.String)#java/lang/String/getBytes(java.lang.String)
org/eclipse/jgit/merge/MergeFormatter/formatMerge(java.io.OutputStream,org.eclipse.jgit.merge.MergeResult,java.util.List,java.lang.String)#java/util/List/get(int)
org/eclipse/jgit/merge/MergeFormatter/formatMerge(java.io.OutputStream,org.eclipse.jgit.merge.MergeResult,java.util.List,java.lang.String)#java/util/List/size()
org/eclipse/jgit/merge/MergeFormatter/formatMerge(java.io.OutputStream,org.eclipse.jgit.merge.MergeResult,java.util.List,java.lang.String)#java/util/Iterator/next()
org/eclipse/jgit/merge/MergeFormatter/formatMerge(java.io.OutputStream,org.eclipse.jgit.merge.MergeResult,java.util.List,java.lang.String)#java/io/OutputStream/write(int)
org/eclipse/jgit/merge/MergeFormatter/formatMerge(java.io.OutputStream,org.eclipse.jgit.merge.MergeResult,java.util.List,java.lang.String)#java/io/OutputStream/write(byte[])
org/eclipse/jgit/merge/MergeFormatter/formatMerge(java.io.OutputStream,org.eclipse.jgit.merge.MergeResult,java.util.List,java.lang.String)#java/lang/StringBuilder/toString()
org/eclipse/jgit/internal/storage/file/GC/getStatistics()#java/io/File/File(java.io.File,java.lang.String)
org/eclipse/jgit/internal/storage/file/GC/getStatistics()#java/util/Iterator/hasNext()
org/eclipse/jgit/internal/storage/file/GC/getStatistics()#org/eclipse/jgit/internal/storage/file/GC$RepoStatistics/RepoStatistics(org.eclipse.jgit.internal.storage.file.GC)
org/eclipse/jgit/internal/storage/file/GC/getStatistics()#java/util/Iterator/next()
org/eclipse/jgit/internal/storage/file/GC/getStatistics()#java/io/File/list()
org/eclipse/jgit/internal/storage/file/GC/getStatistics()#java/io/File/length()
org/eclipse/jgit/internal/storage/file/GC/getStatistics()#java/io/File/listFiles()
org/eclipse/jgit/internal/storage/file/GC/getStatistics()#java/io/File/getName()
org/eclipse/jgit/internal/storage/file/GC/getStatistics()#java/lang/String/length()
org/eclipse/jgit/internal/storage/file/GC/getStatistics()#java/util/Map/values()
org/eclipse/jgit/internal/storage/file/GC/getStatistics()#java/util/Collection/iterator()
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/util/Set/iterator()
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/nio/channels/FileChannel/force(boolean)
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/io/FileOutputStream/close()
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/io/OutputStream/close()
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/io/File/createNewFile()
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/io/File/getName()
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/io/File/File(java.io.File,java.lang.String)
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/io/IOException/IOException(java.lang.String)
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/util/Iterator/hasNext()
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#org/eclipse/jgit/lib/ObjectId/getName()
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#org/eclipse/jgit/internal/storage/file/GC$1/1(org.eclipse.jgit.internal.storage.file.GC)
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/io/File/setReadOnly()
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/io/File/createTempFile(java.lang.String,java.lang.String,java.io.File)
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/util/Map$Entry/getKey()
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/io/File/exists()
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/util/Map/values()
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/util/Iterator/next()
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/nio/channels/Channels/newOutputStream(java.nio.channels.WritableByteChannel)
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/lang/String/equals(java.lang.Object)
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/lang/String/substring(int,int)
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/io/File/renameTo(java.io.File)
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/lang/String/lastIndexOf(int)
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/util/Map$Entry/getValue()
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/util/TreeMap/TreeMap(java.util.Comparator)
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/util/Collection/iterator()
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/util/List/iterator()
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/util/Map/entrySet()
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/io/File/delete()
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/io/File/getPath()
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/io/FileOutputStream/FileOutputStream(java.io.File)
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/lang/StringBuilder/toString()
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/io/FileOutputStream/getChannel()
org/eclipse/jgit/internal/storage/file/GC/writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)#java/io/File/getParentFile()
org/eclipse/jgit/internal/storage/file/GC/prunePacked()#java/io/File/File(java.io.File,java.lang.String)
org/eclipse/jgit/internal/storage/file/GC/prunePacked()#java/util/Iterator/hasNext()
org/eclipse/jgit/internal/storage/file/GC/prunePacked()#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/internal/storage/file/GC/prunePacked()#java/lang/String/length()
org/eclipse/jgit/internal/storage/file/GC/prunePacked()#java/util/Iterator/next()
org/eclipse/jgit/internal/storage/file/GC/prunePacked()#java/io/File/list()
org/eclipse/jgit/internal/storage/file/GC/prunePacked()#java/util/Collection/iterator()
org/eclipse/jgit/internal/storage/file/GC/prunePacked()#java/lang/StringBuilder/toString()
org/eclipse/jgit/internal/storage/file/GC/prunePacked()#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/internal/storage/file/GC/repack()#java/util/ArrayList/ArrayList(int)
org/eclipse/jgit/internal/storage/file/GC/repack()#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/internal/storage/file/GC/repack()#java/util/Set/add(java.lang.Object)
org/eclipse/jgit/internal/storage/file/GC/repack()#java/util/Iterator/hasNext()
org/eclipse/jgit/internal/storage/file/GC/repack()#java/util/Set/addAll(java.util.Collection)
org/eclipse/jgit/internal/storage/file/GC/repack()#java/util/Collections/emptySet()
org/eclipse/jgit/internal/storage/file/GC/repack()#java/util/Map/values()
org/eclipse/jgit/internal/storage/file/GC/repack()#java/util/Iterator/next()
org/eclipse/jgit/internal/storage/file/GC/repack()#java/util/Set/isEmpty()
org/eclipse/jgit/internal/storage/file/GC/repack()#java/util/LinkedList/LinkedList()
org/eclipse/jgit/internal/storage/file/GC/repack()#java/util/List/add(java.lang.Object)
org/eclipse/jgit/internal/storage/file/GC/repack()#java/util/List/add(int,java.lang.Object)
org/eclipse/jgit/internal/storage/file/GC/repack()#java/lang/System/currentTimeMillis()
org/eclipse/jgit/internal/storage/file/GC/repack()#java/util/Collection/iterator()
org/eclipse/jgit/internal/storage/file/GC/repack()#java/util/HashSet/HashSet()
org/eclipse/jgit/internal/storage/file/GC/listNonHEADIndexObjects()#java/lang/Integer/valueOf(int)
org/eclipse/jgit/internal/storage/file/GC/listNonHEADIndexObjects()#org/eclipse/jgit/internal/storage/file/FileRepository/getIndexFile()
org/eclipse/jgit/internal/storage/file/GC/listNonHEADIndexObjects()#org/eclipse/jgit/internal/storage/file/FileRepository/resolve(java.lang.String)
org/eclipse/jgit/internal/storage/file/GC/listNonHEADIndexObjects()#java/io/IOException/IOException(java.lang.String)
org/eclipse/jgit/internal/storage/file/GC/listNonHEADIndexObjects()#java/util/Collections/emptySet()
org/eclipse/jgit/internal/storage/file/GC/listNonHEADIndexObjects()#org/eclipse/jgit/internal/storage/file/FileRepository/readDirCache()
org/eclipse/jgit/internal/storage/file/GC/listNonHEADIndexObjects()#java/lang/String/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/internal/storage/file/GC/listNonHEADIndexObjects()#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/internal/storage/file/GC/listNonHEADIndexObjects()#org/eclipse/jgit/lib/ObjectId/name()
org/eclipse/jgit/internal/storage/file/GC/listNonHEADIndexObjects()#java/util/HashSet/HashSet()
org/eclipse/jgit/internal/storage/file/GC/listNonHEADIndexObjects()#java/util/Set/add(java.lang.Object)
org/eclipse/jgit/internal/storage/file/GC/listRefLogObjects(org.eclipse.jgit.lib.Ref,long)#java/util/Iterator/hasNext()
org/eclipse/jgit/internal/storage/file/GC/listRefLogObjects(org.eclipse.jgit.lib.Ref,long)#org/eclipse/jgit/lib/ObjectId/equals(org.eclipse.jgit.lib.AnyObjectId)
org/eclipse/jgit/internal/storage/file/GC/listRefLogObjects(org.eclipse.jgit.lib.Ref,long)#java/util/Collections/emptySet()
org/eclipse/jgit/internal/storage/file/GC/listRefLogObjects(org.eclipse.jgit.lib.Ref,long)#java/util/List/isEmpty()
org/eclipse/jgit/internal/storage/file/GC/listRefLogObjects(org.eclipse.jgit.lib.Ref,long)#java/util/List/iterator()
org/eclipse/jgit/internal/storage/file/GC/listRefLogObjects(org.eclipse.jgit.lib.Ref,long)#java/util/Set/add(java.lang.Object)
org/eclipse/jgit/internal/storage/file/GC/listRefLogObjects(org.eclipse.jgit.lib.Ref,long)#java/util/Iterator/next()
org/eclipse/jgit/internal/storage/file/GC/listRefLogObjects(org.eclipse.jgit.lib.Ref,long)#java/util/Date/getTime()
org/eclipse/jgit/internal/storage/file/GC/listRefLogObjects(org.eclipse.jgit.lib.Ref,long)#java/util/HashSet/HashSet()
org/eclipse/jgit/internal/storage/file/GC/prune(java.util.Set)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/internal/storage/file/GC/prune(java.util.Set)#java/io/File/list()
org/eclipse/jgit/internal/storage/file/GC/prune(java.util.Set)#java/util/Set/iterator()
org/eclipse/jgit/internal/storage/file/GC/prune(java.util.Set)#java/io/File/delete()
org/eclipse/jgit/internal/storage/file/GC/prune(java.util.Set)#java/lang/StringBuilder/toString()
org/eclipse/jgit/internal/storage/file/GC/prune(java.util.Set)#java/io/File/getName()
org/eclipse/jgit/internal/storage/file/GC/prune(java.util.Set)#java/io/File/File(java.io.File,java.lang.String)
org/eclipse/jgit/internal/storage/file/GC/prune(java.util.Set)#java/util/Iterator/hasNext()
org/eclipse/jgit/internal/storage/file/GC/prune(java.util.Set)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/internal/storage/file/GC/prune(java.util.Set)#java/util/Map$Entry/getKey()
org/eclipse/jgit/internal/storage/file/GC/prune(java.util.Set)#java/lang/String/length()
org/eclipse/jgit/internal/storage/file/GC/prune(java.util.Set)#java/util/Map/isEmpty()
org/eclipse/jgit/internal/storage/file/GC/prune(java.util.Set)#java/util/Map/get(java.lang.Object)
org/eclipse/jgit/internal/storage/file/GC/prune(java.util.Set)#java/util/Map/values()
org/eclipse/jgit/internal/storage/file/GC/prune(java.util.Set)#java/util/Iterator/next()
org/eclipse/jgit/internal/storage/file/GC/prune(java.util.Set)#java/util/HashMap/HashMap()
org/eclipse/jgit/internal/storage/file/GC/prune(java.util.Set)#java/io/File/lastModified()
org/eclipse/jgit/internal/storage/file/GC/prune(java.util.Set)#java/util/Set/contains(java.lang.Object)
org/eclipse/jgit/internal/storage/file/GC/prune(java.util.Set)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/internal/storage/file/GC/prune(java.util.Set)#java/util/Map$Entry/getValue()
org/eclipse/jgit/internal/storage/file/GC/prune(java.util.Set)#java/lang/System/currentTimeMillis()
org/eclipse/jgit/internal/storage/file/GC/prune(java.util.Set)#org/eclipse/jgit/revwalk/ObjectWalk/parseAny(org.eclipse.jgit.lib.AnyObjectId)
org/eclipse/jgit/internal/storage/file/GC/prune(java.util.Set)#java/util/Collection/iterator()
org/eclipse/jgit/internal/storage/file/GC/prune(java.util.Set)#java/util/Date/getTime()
org/eclipse/jgit/internal/storage/file/GC/prune(java.util.Set)#java/io/File/listFiles()
org/eclipse/jgit/internal/storage/file/GC/prune(java.util.Set)#java/util/Map/entrySet()
org/eclipse/jgit/internal/storage/file/GC/prune(java.util.Set)#org/eclipse/jgit/storage/file/FileBasedConfig/getString(java.lang.String,java.lang.String,java.lang.String)
org/eclipse/jgit/util/IO/readFully(java.io.File,int)#java/io/IOException/IOException(java.lang.String)
org/eclipse/jgit/util/IO/readFully(java.io.File,int)#java/io/FileInputStream/read()
org/eclipse/jgit/util/IO/readFully(java.io.File,int)#java/lang/Math/max(long,long)
org/eclipse/jgit/util/IO/readFully(java.io.File,int)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/util/IO/readFully(java.io.File,int)#java/io/FileInputStream/close()
org/eclipse/jgit/util/IO/readFully(java.io.File,int)#java/io/File/length()
org/eclipse/jgit/util/IO/readFully(java.io.File,int)#java/io/FileInputStream/FileInputStream(java.io.File)
org/eclipse/jgit/util/IO/readFully(java.io.File,int)#java/io/FileInputStream/read(byte[],int,int)
org/eclipse/jgit/util/IO/readFully(java.io.File,int)#java/lang/Math/min(int,int)
org/eclipse/jgit/util/IO/readFully(java.io.File,int)#java/lang/System/arraycopy(java.lang.Object,int,java.lang.Object,int,int)
org/eclipse/jgit/util/IO/readWholeStream(java.io.InputStream,int)#java/io/InputStream/read(byte[],int,int)
org/eclipse/jgit/util/IO/readWholeStream(java.io.InputStream,int)#org/eclipse/jgit/util/TemporaryBuffer$Heap/copy(java.io.InputStream)
org/eclipse/jgit/util/IO/readWholeStream(java.io.InputStream,int)#java/io/InputStream/read()
org/eclipse/jgit/util/IO/readWholeStream(java.io.InputStream,int)#java/nio/ByteBuffer/wrap(byte[],int,int)
org/eclipse/jgit/util/IO/readWholeStream(java.io.InputStream,int)#org/eclipse/jgit/util/TemporaryBuffer$Heap/write(int)
org/eclipse/jgit/util/IO/readWholeStream(java.io.InputStream,int)#org/eclipse/jgit/util/TemporaryBuffer$Heap/write(byte[])
org/eclipse/jgit/util/IO/readWholeStream(java.io.InputStream,int)#org/eclipse/jgit/util/TemporaryBuffer$Heap/Heap(int)
org/eclipse/jgit/util/IO/readWholeStream(java.io.InputStream,int)#org/eclipse/jgit/util/TemporaryBuffer$Heap/toByteArray()
org/eclipse/jgit/util/IO/readWholeStream(java.io.InputStream,int)#java/nio/ByteBuffer/wrap(byte[])
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/getPackNames()#org/eclipse/jgit/transport/TransportHttp$HttpObjectDB/invalidAdvertisement(java.lang.String)
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/getPackNames()#java/io/BufferedReader/close()
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/getPackNames()#java/util/ArrayList/ArrayList()
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/getPackNames()#java/lang/String/length()
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/getPackNames()#java/lang/String/substring(int)
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/getPackNames()#java/lang/String/startsWith(java.lang.String)
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/getPackNames()#java/io/BufferedReader/readLine()
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/getPackNames()#java/util/Collection/add(java.lang.Object)
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/getPackNames()#org/eclipse/jgit/transport/TransportHttp$HttpObjectDB/openReader(java.lang.String)
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/getPackNames()#java/lang/String/endsWith(java.lang.String)
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/open(java.lang.String)#java/net/URL/URL(java.net.URL,java.lang.String)
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/open(java.lang.String)#java/io/IOException/IOException(java.lang.String)
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/open(java.lang.String)#java/net/URL/toString()
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/open(java.lang.String)#org/eclipse/jgit/transport/WalkRemoteObjectDatabase$FileStream/FileStream(java.io.InputStream,long)
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/open(java.lang.String)#java/io/FileNotFoundException/FileNotFoundException(java.lang.String)
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/open(java.lang.String)#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/open(java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/open(java.lang.String)#java/lang/StringBuilder/append(int)
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/open(java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/readAdvertisedImpl(java.io.BufferedReader)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/readAdvertisedImpl(java.io.BufferedReader)#java/util/TreeMap/get(java.lang.Object)
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/readAdvertisedImpl(java.io.BufferedReader)#java/lang/String/substring(int,int)
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/readAdvertisedImpl(java.io.BufferedReader)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/readAdvertisedImpl(java.io.BufferedReader)#java/io/BufferedReader/readLine()
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/readAdvertisedImpl(java.io.BufferedReader)#org/eclipse/jgit/lib/ObjectIdRef$PeeledNonTag/PeeledNonTag(org.eclipse.jgit.lib.Ref$Storage,java.lang.String,org.eclipse.jgit.lib.ObjectId)
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/readAdvertisedImpl(java.io.BufferedReader)#java/lang/String/indexOf(int)
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/readAdvertisedImpl(java.io.BufferedReader)#org/eclipse/jgit/transport/TransportHttp$HttpObjectDB/invalidAdvertisement(java.lang.String)
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/readAdvertisedImpl(java.io.BufferedReader)#java/util/TreeMap/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/readAdvertisedImpl(java.io.BufferedReader)#org/eclipse/jgit/transport/TransportHttp$HttpObjectDB/duplicateAdvertisement(java.lang.String)
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/readAdvertisedImpl(java.io.BufferedReader)#java/lang/String/length()
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/readAdvertisedImpl(java.io.BufferedReader)#java/util/TreeMap/TreeMap()
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/readAdvertisedImpl(java.io.BufferedReader)#org/eclipse/jgit/lib/ObjectIdRef$PeeledTag/PeeledTag(org.eclipse.jgit.lib.Ref$Storage,java.lang.String,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.ObjectId)
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/readAdvertisedImpl(java.io.BufferedReader)#org/eclipse/jgit/transport/TransportHttp$HttpObjectDB/outOfOrderAdvertisement(java.lang.String)
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/readAdvertisedImpl(java.io.BufferedReader)#java/lang/String/substring(int)
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/readAdvertisedImpl(java.io.BufferedReader)#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/TransportHttp/HttpObjectDB/readAdvertisedImpl(java.io.BufferedReader)#java/lang/String/endsWith(java.lang.String)
org/eclipse/jgit/transport/AmazonS3/error(java.lang.String,java.lang.String,java.net.HttpURLConnection)#java/io/IOException/IOException(java.lang.String)
org/eclipse/jgit/transport/AmazonS3/error(java.lang.String,java.lang.String,java.net.HttpURLConnection)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/AmazonS3/error(java.lang.String,java.lang.String,java.net.HttpURLConnection)#java/io/ByteArrayOutputStream/write(byte[],int,int)
org/eclipse/jgit/transport/AmazonS3/error(java.lang.String,java.lang.String,java.net.HttpURLConnection)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/transport/AmazonS3/error(java.lang.String,java.lang.String,java.net.HttpURLConnection)#java/net/HttpURLConnection/getResponseMessage()
org/eclipse/jgit/transport/AmazonS3/error(java.lang.String,java.lang.String,java.net.HttpURLConnection)#java/net/HttpURLConnection/getErrorStream()
org/eclipse/jgit/transport/AmazonS3/error(java.lang.String,java.lang.String,java.net.HttpURLConnection)#java/lang/Integer/valueOf(int)
org/eclipse/jgit/transport/AmazonS3/error(java.lang.String,java.lang.String,java.net.HttpURLConnection)#java/io/ByteArrayOutputStream/toByteArray()
org/eclipse/jgit/transport/AmazonS3/error(java.lang.String,java.lang.String,java.net.HttpURLConnection)#java/io/ByteArrayOutputStream/ByteArrayOutputStream()
org/eclipse/jgit/transport/AmazonS3/error(java.lang.String,java.lang.String,java.net.HttpURLConnection)#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/AmazonS3/error(java.lang.String,java.lang.String,java.net.HttpURLConnection)#java/io/InputStream/read(byte[])
org/eclipse/jgit/transport/AmazonS3/error(java.lang.String,java.lang.String,java.net.HttpURLConnection)#java/io/IOException/initCause(java.lang.Throwable)
org/eclipse/jgit/transport/AmazonS3/error(java.lang.String,java.lang.String,java.net.HttpURLConnection)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/AmazonS3/error(java.lang.String,java.lang.String,java.net.HttpURLConnection)#java/lang/String/String(byte[])
org/eclipse/jgit/transport/AmazonS3/open(java.lang.String,java.lang.String,java.lang.String,java.util.Map)#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/AmazonS3/open(java.lang.String,java.lang.String,java.lang.String,java.util.Map)#java/net/HttpURLConnection/setRequestMethod(java.lang.String)
org/eclipse/jgit/transport/AmazonS3/open(java.lang.String,java.lang.String,java.lang.String,java.util.Map)#java/util/Iterator/next()
org/eclipse/jgit/transport/AmazonS3/open(java.lang.String,java.lang.String,java.lang.String,java.util.Map)#java/net/URL/openConnection(java.net.Proxy)
org/eclipse/jgit/transport/AmazonS3/open(java.lang.String,java.lang.String,java.lang.String,java.util.Map)#java/net/HttpURLConnection/setRequestProperty(java.lang.String,java.lang.String)
org/eclipse/jgit/transport/AmazonS3/open(java.lang.String,java.lang.String,java.lang.String,java.util.Map)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/AmazonS3/open(java.lang.String,java.lang.String,java.lang.String,java.util.Map)#java/util/Set/iterator()
org/eclipse/jgit/transport/AmazonS3/open(java.lang.String,java.lang.String,java.lang.String,java.util.Map)#java/lang/StringBuilder/append(char)
org/eclipse/jgit/transport/AmazonS3/open(java.lang.String,java.lang.String,java.lang.String,java.util.Map)#java/util/Map$Entry/getValue()
org/eclipse/jgit/transport/AmazonS3/open(java.lang.String,java.lang.String,java.lang.String,java.util.Map)#java/util/Map/entrySet()
org/eclipse/jgit/transport/AmazonS3/open(java.lang.String,java.lang.String,java.lang.String,java.util.Map)#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/AmazonS3/open(java.lang.String,java.lang.String,java.lang.String,java.util.Map)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/AmazonS3/open(java.lang.String,java.lang.String,java.lang.String,java.util.Map)#java/util/Map$Entry/getKey()
org/eclipse/jgit/transport/AmazonS3/open(java.lang.String,java.lang.String,java.lang.String,java.util.Map)#java/lang/String/length()
org/eclipse/jgit/transport/AmazonS3/open(java.lang.String,java.lang.String,java.lang.String,java.util.Map)#java/util/Map/isEmpty()
org/eclipse/jgit/transport/AmazonS3/open(java.lang.String,java.lang.String,java.lang.String,java.util.Map)#java/net/URL/URL(java.lang.String)
org/eclipse/jgit/transport/AmazonS3/authorize(java.net.HttpURLConnection)#javax/crypto/Mac/getInstance(java.lang.String)
org/eclipse/jgit/transport/AmazonS3/authorize(java.net.HttpURLConnection)#java/net/HttpURLConnection/getRequestProperties()
org/eclipse/jgit/transport/AmazonS3/authorize(java.net.HttpURLConnection)#java/security/NoSuchAlgorithmException/getMessage()
org/eclipse/jgit/transport/AmazonS3/authorize(java.net.HttpURLConnection)#java/lang/StringBuilder/append(char)
org/eclipse/jgit/transport/AmazonS3/authorize(java.net.HttpURLConnection)#java/util/Map/entrySet()
org/eclipse/jgit/transport/AmazonS3/authorize(java.net.HttpURLConnection)#java/io/IOException/IOException(java.lang.String)
org/eclipse/jgit/transport/AmazonS3/authorize(java.net.HttpURLConnection)#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/AmazonS3/authorize(java.net.HttpURLConnection)#javax/crypto/Mac/doFinal(byte[])
org/eclipse/jgit/transport/AmazonS3/authorize(java.net.HttpURLConnection)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/AmazonS3/authorize(java.net.HttpURLConnection)#java/util/Map$Entry/getKey()
org/eclipse/jgit/transport/AmazonS3/authorize(java.net.HttpURLConnection)#javax/crypto/Mac/init(java.security.Key)
org/eclipse/jgit/transport/AmazonS3/authorize(java.net.HttpURLConnection)#java/lang/String/length()
org/eclipse/jgit/transport/AmazonS3/authorize(java.net.HttpURLConnection)#java/util/TreeMap/TreeMap()
org/eclipse/jgit/transport/AmazonS3/authorize(java.net.HttpURLConnection)#java/util/Iterator/next()
org/eclipse/jgit/transport/AmazonS3/authorize(java.net.HttpURLConnection)#java/net/HttpURLConnection/setRequestProperty(java.lang.String,java.lang.String)
org/eclipse/jgit/transport/AmazonS3/authorize(java.net.HttpURLConnection)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/transport/AmazonS3/authorize(java.net.HttpURLConnection)#java/lang/String/substring(int,int)
org/eclipse/jgit/transport/AmazonS3/authorize(java.net.HttpURLConnection)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/AmazonS3/authorize(java.net.HttpURLConnection)#java/security/InvalidKeyException/getMessage()
org/eclipse/jgit/transport/AmazonS3/authorize(java.net.HttpURLConnection)#java/util/Set/iterator()
org/eclipse/jgit/transport/AmazonS3/authorize(java.net.HttpURLConnection)#java/lang/String/getBytes(java.lang.String)
org/eclipse/jgit/transport/AmazonS3/authorize(java.net.HttpURLConnection)#java/net/URL/getPath()
org/eclipse/jgit/transport/AmazonS3/authorize(java.net.HttpURLConnection)#java/net/URL/getHost()
org/eclipse/jgit/transport/AmazonS3/authorize(java.net.HttpURLConnection)#java/util/Map$Entry/getValue()
org/eclipse/jgit/transport/AmazonS3/authorize(java.net.HttpURLConnection)#java/util/SortedMap/entrySet()
org/eclipse/jgit/transport/AmazonS3/authorize(java.net.HttpURLConnection)#java/net/HttpURLConnection/getURL()
org/eclipse/jgit/transport/AmazonS3/authorize(java.net.HttpURLConnection)#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/AmazonS3/authorize(java.net.HttpURLConnection)#java/net/HttpURLConnection/getRequestMethod()
org/eclipse/jgit/transport/AmazonS3/authorize(java.net.HttpURLConnection)#java/util/SortedMap/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/transport/AmazonS3/toCleanString(java.util.List)#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/AmazonS3/toCleanString(java.util.List)#java/lang/String/replaceAll(java.lang.String,java.lang.String)
org/eclipse/jgit/transport/AmazonS3/toCleanString(java.util.List)#java/util/Iterator/next()
org/eclipse/jgit/transport/AmazonS3/toCleanString(java.util.List)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/AmazonS3/toCleanString(java.util.List)#java/lang/StringBuilder/append(char)
org/eclipse/jgit/transport/AmazonS3/toCleanString(java.util.List)#java/lang/StringBuilder/length()
org/eclipse/jgit/transport/AmazonS3/toCleanString(java.util.List)#java/util/List/iterator()
org/eclipse/jgit/transport/AmazonS3/toCleanString(java.util.List)#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/AmazonS3/toCleanString(java.util.List)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/AmazonS3/toCleanString(java.util.List)#java/lang/String/trim()
org/eclipse/jgit/api/RebaseCommand/1/<clinit>()#org/eclipse/jgit/lib/RefUpdate$Result/ordinal()
org/eclipse/jgit/api/RebaseCommand/1/<clinit>()#org/eclipse/jgit/lib/RepositoryState/values()
org/eclipse/jgit/api/RebaseCommand/1/<clinit>()#org/eclipse/jgit/lib/RepositoryState/ordinal()
org/eclipse/jgit/api/RebaseCommand/1/<clinit>()#org/eclipse/jgit/lib/RefUpdate$Result/values()
org/eclipse/jgit/api/RebaseCommand/1/<clinit>()#org/eclipse/jgit/lib/RebaseTodoLine$Action/values()
org/eclipse/jgit/api/RebaseCommand/1/<clinit>()#org/eclipse/jgit/lib/RebaseTodoLine$Action/ordinal()
org/eclipse/jgit/api/RebaseCommand/1/<clinit>()#org/eclipse/jgit/api/RebaseCommand$Operation/values()
org/eclipse/jgit/api/RebaseCommand/1/<clinit>()#org/eclipse/jgit/api/CherryPickResult$CherryPickStatus/ordinal()
org/eclipse/jgit/api/RebaseCommand/1/<clinit>()#org/eclipse/jgit/api/RebaseCommand$Operation/ordinal()
org/eclipse/jgit/api/RebaseCommand/1/<clinit>()#org/eclipse/jgit/api/CherryPickResult$CherryPickStatus/values()
org/eclipse/jgit/transport/JschConfigSessionFactory/getJSch(org.eclipse.jgit.transport.OpenSshConfig$Host,org.eclipse.jgit.util.FS)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/transport/JschConfigSessionFactory/getJSch(org.eclipse.jgit.transport.OpenSshConfig$Host,org.eclipse.jgit.util.FS)#org/eclipse/jgit/transport/OpenSshConfig$Host/getIdentityFile()
org/eclipse/jgit/transport/JschConfigSessionFactory/getJSch(org.eclipse.jgit.transport.OpenSshConfig$Host,org.eclipse.jgit.util.FS)#java/util/Iterator/hasNext()
org/eclipse/jgit/transport/JschConfigSessionFactory/getJSch(org.eclipse.jgit.transport.OpenSshConfig$Host,org.eclipse.jgit.util.FS)#com/jcraft/jsch/JSch/addIdentity(java.lang.String)
org/eclipse/jgit/transport/JschConfigSessionFactory/getJSch(org.eclipse.jgit.transport.OpenSshConfig$Host,org.eclipse.jgit.util.FS)#java/util/Map/get(java.lang.Object)
org/eclipse/jgit/transport/JschConfigSessionFactory/getJSch(org.eclipse.jgit.transport.OpenSshConfig$Host,org.eclipse.jgit.util.FS)#java/util/Iterator/next()
org/eclipse/jgit/transport/JschConfigSessionFactory/getJSch(org.eclipse.jgit.transport.OpenSshConfig$Host,org.eclipse.jgit.util.FS)#com/jcraft/jsch/JSch/getHostKeyRepository()
org/eclipse/jgit/transport/JschConfigSessionFactory/getJSch(org.eclipse.jgit.transport.OpenSshConfig$Host,org.eclipse.jgit.util.FS)#com/jcraft/jsch/JSch/setHostKeyRepository(com.jcraft.jsch.HostKeyRepository)
org/eclipse/jgit/transport/JschConfigSessionFactory/getJSch(org.eclipse.jgit.transport.OpenSshConfig$Host,org.eclipse.jgit.util.FS)#java/io/File/getAbsolutePath()
org/eclipse/jgit/transport/JschConfigSessionFactory/getJSch(org.eclipse.jgit.transport.OpenSshConfig$Host,org.eclipse.jgit.util.FS)#java/util/Vector/iterator()
org/eclipse/jgit/transport/JschConfigSessionFactory/getJSch(org.eclipse.jgit.transport.OpenSshConfig$Host,org.eclipse.jgit.util.FS)#com/jcraft/jsch/JSch/getIdentityNames()
org/eclipse/jgit/transport/JschConfigSessionFactory/getJSch(org.eclipse.jgit.transport.OpenSshConfig$Host,org.eclipse.jgit.util.FS)#com/jcraft/jsch/JSch/JSch()
org/eclipse/jgit/transport/JschConfigSessionFactory/getSession(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.util.FS,int)#java/lang/Thread/sleep(long)
org/eclipse/jgit/transport/JschConfigSessionFactory/getSession(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.util.FS,int)#org/eclipse/jgit/transport/OpenSshConfig$Host/getPort()
org/eclipse/jgit/transport/JschConfigSessionFactory/getSession(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.util.FS,int)#com/jcraft/jsch/Session/isConnected()
org/eclipse/jgit/transport/JschConfigSessionFactory/getSession(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.util.FS,int)#java/lang/Throwable/getMessage()
org/eclipse/jgit/transport/JschConfigSessionFactory/getSession(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.util.FS,int)#com/jcraft/jsch/JSchException/getMessage()
org/eclipse/jgit/transport/JschConfigSessionFactory/getSession(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.util.FS,int)#com/jcraft/jsch/JSchException/getCause()
org/eclipse/jgit/transport/JschConfigSessionFactory/getSession(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.util.FS,int)#org/eclipse/jgit/transport/OpenSshConfig$Host/getHostName()
org/eclipse/jgit/transport/JschConfigSessionFactory/getSession(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.util.FS,int)#com/jcraft/jsch/Session/connect(int)
org/eclipse/jgit/transport/JschConfigSessionFactory/getSession(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.util.FS,int)#com/jcraft/jsch/Session/disconnect()
org/eclipse/jgit/transport/JschConfigSessionFactory/getSession(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.util.FS,int)#org/eclipse/jgit/transport/OpenSshConfig$Host/getConnectionAttempts()
org/eclipse/jgit/transport/JschConfigSessionFactory/getSession(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.util.FS,int)#org/eclipse/jgit/transport/OpenSshConfig$Host/getUser()
org/eclipse/jgit/transport/TransportGitSsh/ExtSession/exec(java.lang.String,int)#java/lang/String/toLowerCase()
org/eclipse/jgit/transport/TransportGitSsh/ExtSession/exec(java.lang.String,int)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/transport/TransportGitSsh/ExtSession/exec(java.lang.String,int)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/transport/TransportGitSsh/ExtSession/exec(java.lang.String,int)#org/eclipse/jgit/transport/TransportGitSsh/getURI()
org/eclipse/jgit/transport/TransportGitSsh/ExtSession/exec(java.lang.String,int)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/jgit/transport/TransportGitSsh/ExtSession/exec(java.lang.String,int)#java/util/ArrayList/ArrayList()
org/eclipse/jgit/transport/TransportGitSsh/ExtSession/exec(java.lang.String,int)#java/io/IOException/getMessage()
org/eclipse/jgit/transport/TransportGitSsh/ExtSession/exec(java.lang.String,int)#java/lang/ProcessBuilder/start()
org/eclipse/jgit/transport/TransportGitSsh/ExtSession/exec(java.lang.String,int)#java/util/List/add(java.lang.Object)
org/eclipse/jgit/transport/TransportGitSsh/ExtSession/exec(java.lang.String,int)#java/lang/ProcessBuilder/ProcessBuilder(java.lang.String[])
org/eclipse/jgit/transport/TransportGitSsh/ExtSession/exec(java.lang.String,int)#java/lang/ProcessBuilder/command(java.util.List)
org/eclipse/jgit/transport/TransportGitSsh/ExtSession/exec(java.lang.String,int)#java/lang/String/contains(java.lang.CharSequence)
org/eclipse/jgit/transport/TransportGitSsh/ExtSession/exec(java.lang.String,int)#java/lang/ProcessBuilder/environment()
org/eclipse/jgit/transport/TransportGitSsh/ExtSession/exec(java.lang.String,int)#java/io/File/getPath()
org/eclipse/jgit/transport/TransportGitSsh/ExtSession/exec(java.lang.String,int)#java/lang/StringBuilder/toString()
org/eclipse/jgit/transport/TransportGitSsh/ExtSession/exec(java.lang.String,int)#java/lang/String/valueOf(int)
org/eclipse/jgit/errors/MissingBundlePrerequisiteException/format(java.util.Map)#java/util/Iterator/hasNext()
org/eclipse/jgit/errors/MissingBundlePrerequisiteException/format(java.util.Map)#java/util/Iterator/next()
org/eclipse/jgit/errors/MissingBundlePrerequisiteException/format(java.util.Map)#java/util/Set/iterator()
org/eclipse/jgit/errors/MissingBundlePrerequisiteException/format(java.util.Map)#java/util/Map$Entry/getValue()
org/eclipse/jgit/errors/MissingBundlePrerequisiteException/format(java.util.Map)#org/eclipse/jgit/lib/ObjectId/name()
org/eclipse/jgit/errors/MissingBundlePrerequisiteException/format(java.util.Map)#java/util/Map/entrySet()
org/eclipse/jgit/errors/MissingBundlePrerequisiteException/format(java.util.Map)#java/lang/StringBuilder/toString()
org/eclipse/jgit/errors/MissingBundlePrerequisiteException/format(java.util.Map)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/errors/MissingBundlePrerequisiteException/format(java.util.Map)#java/util/Map$Entry/getKey()
org/eclipse/jgit/errors/MissingBundlePrerequisiteException/format(java.util.Map)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/dircache/DirCacheCheckout/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)#org/eclipse/jgit/treewalk/CanonicalTreeParser/getEntryObjectId()
org/eclipse/jgit/dircache/DirCacheCheckout/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)#org/eclipse/jgit/treewalk/CanonicalTreeParser/getEntryFileMode()
org/eclipse/jgit/dircache/DirCacheCheckout/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)#java/util/ArrayList/add(java.lang.Object)
org/eclipse/jgit/dircache/DirCacheCheckout/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)#java/util/ArrayList/remove(java.lang.Object)
org/eclipse/jgit/dircache/DirCacheCheckout/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)#org/eclipse/jgit/treewalk/CanonicalTreeParser/idEqual(org.eclipse.jgit.treewalk.AbstractTreeIterator)
org/eclipse/jgit/dircache/DirCacheCheckout/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)#java/lang/Object/equals(java.lang.Object)
org/eclipse/jgit/dircache/DirCacheCheckout/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)#org/eclipse/jgit/dircache/DirCacheBuildIterator/getDirCacheEntry()
org/eclipse/jgit/dircache/DirCacheCheckout/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)#org/eclipse/jgit/treewalk/NameConflictTreeWalk/getPathString()
org/eclipse/jgit/dircache/DirCacheCheckout/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)#org/eclipse/jgit/dircache/DirCacheBuildIterator/getEntryPathString()
org/eclipse/jgit/dircache/DirCacheCheckout/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)#org/eclipse/jgit/treewalk/WorkingTreeIterator/getEntryFileMode()
org/eclipse/jgit/dircache/DirCacheCheckout/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)#org/eclipse/jgit/treewalk/NameConflictTreeWalk/getObjectReader()
org/eclipse/jgit/dircache/DirCacheCheckout/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)#org/eclipse/jgit/treewalk/CanonicalTreeParser/getEntryPathString()
org/eclipse/jgit/dircache/DirCacheCheckout/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)#org/eclipse/jgit/treewalk/CanonicalTreeParser/getEntryObjectId()
org/eclipse/jgit/dircache/DirCacheCheckout/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)#org/eclipse/jgit/treewalk/CanonicalTreeParser/getEntryFileMode()
org/eclipse/jgit/dircache/DirCacheCheckout/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)#org/eclipse/jgit/dircache/DirCacheBuildIterator/getEntryFileMode()
org/eclipse/jgit/dircache/DirCacheCheckout/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)#java/lang/Object/equals(java.lang.Object)
org/eclipse/jgit/dircache/DirCacheCheckout/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)#org/eclipse/jgit/dircache/DirCacheBuildIterator/getDirCacheEntry()
org/eclipse/jgit/dircache/DirCacheCheckout/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)#org/eclipse/jgit/treewalk/NameConflictTreeWalk/getPathString()
org/eclipse/jgit/dircache/DirCacheCheckout/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)#org/eclipse/jgit/treewalk/WorkingTreeIterator/getEntryObjectId()
org/eclipse/jgit/dircache/DirCacheCheckout/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)#org/eclipse/jgit/treewalk/WorkingTreeIterator/getEntryFileMode()
org/eclipse/jgit/dircache/DirCacheCheckout/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)#org/eclipse/jgit/treewalk/NameConflictTreeWalk/getObjectReader()
org/eclipse/jgit/dircache/DirCacheCheckout/processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)#org/eclipse/jgit/dircache/DirCacheBuildIterator/getEntryObjectId()
org/eclipse/jgit/dircache/DirCacheCheckout/doCheckout()#java/util/Iterator/hasNext()
org/eclipse/jgit/dircache/DirCacheCheckout/doCheckout()#java/util/ArrayList/toArray(java.lang.Object[])
org/eclipse/jgit/dircache/DirCacheCheckout/doCheckout()#java/util/Iterator/next()
org/eclipse/jgit/dircache/DirCacheCheckout/doCheckout()#java/util/ArrayList/clear()
org/eclipse/jgit/dircache/DirCacheCheckout/doCheckout()#java/util/ArrayList/size()
org/eclipse/jgit/dircache/DirCacheCheckout/doCheckout()#java/io/File/mkdirs()
org/eclipse/jgit/dircache/DirCacheCheckout/doCheckout()#java/util/ArrayList/get(int)
org/eclipse/jgit/dircache/DirCacheCheckout/doCheckout()#java/io/File/getParentFile()
org/eclipse/jgit/dircache/DirCacheCheckout/doCheckout()#java/io/File/File(java.io.File,java.lang.String)
org/eclipse/jgit/dircache/DirCacheCheckout/doCheckout()#java/util/ArrayList/isEmpty()
org/eclipse/jgit/dircache/DirCacheCheckout/doCheckout()#java/util/ArrayList/add(java.lang.Object)
org/eclipse/jgit/dircache/DirCacheCheckout/doCheckout()#java/util/Set/iterator()
org/eclipse/jgit/dircache/DirCacheCheckout/doCheckout()#java/io/File/delete()
org/eclipse/jgit/dircache/DirCacheCheckout/doCheckout()#java/util/HashMap/keySet()
org/eclipse/jgit/dircache/DirCacheCheckout/checkoutEntry(org.eclipse.jgit.lib.Repository,java.io.File,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)#java/io/IOException/IOException(java.lang.String)
org/eclipse/jgit/dircache/DirCacheCheckout/checkoutEntry(org.eclipse.jgit.lib.Repository,java.io.File,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/dircache/DirCacheCheckout/checkoutEntry(org.eclipse.jgit.lib.Repository,java.io.File,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/dircache/DirCacheCheckout/checkoutEntry(org.eclipse.jgit.lib.Repository,java.io.File,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)#java/io/OutputStream/close()
org/eclipse/jgit/dircache/DirCacheCheckout/checkoutEntry(org.eclipse.jgit.lib.Repository,java.io.File,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)#org/eclipse/jgit/lib/StoredConfig/get(org.eclipse.jgit.lib.Config$SectionParser)
org/eclipse/jgit/dircache/DirCacheCheckout/checkoutEntry(org.eclipse.jgit.lib.Repository,java.io.File,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)#java/io/File/getName()
org/eclipse/jgit/dircache/DirCacheCheckout/checkoutEntry(org.eclipse.jgit.lib.Repository,java.io.File,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)#java/io/File/createTempFile(java.lang.String,java.lang.String,java.io.File)
org/eclipse/jgit/dircache/DirCacheCheckout/checkoutEntry(org.eclipse.jgit.lib.Repository,java.io.File,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)#java/io/File/lastModified()
org/eclipse/jgit/dircache/DirCacheCheckout/checkoutEntry(org.eclipse.jgit.lib.Repository,java.io.File,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/dircache/DirCacheCheckout/checkoutEntry(org.eclipse.jgit.lib.Repository,java.io.File,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)#java/io/File/mkdirs()
org/eclipse/jgit/dircache/DirCacheCheckout/checkoutEntry(org.eclipse.jgit.lib.Repository,java.io.File,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)#java/io/File/length()
org/eclipse/jgit/dircache/DirCacheCheckout/checkoutEntry(org.eclipse.jgit.lib.Repository,java.io.File,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)#java/io/File/getPath()
org/eclipse/jgit/dircache/DirCacheCheckout/checkoutEntry(org.eclipse.jgit.lib.Repository,java.io.File,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)#java/io/FileOutputStream/FileOutputStream(java.io.File)
org/eclipse/jgit/dircache/DirCacheCheckout/checkoutEntry(org.eclipse.jgit.lib.Repository,java.io.File,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)#java/lang/StringBuilder/toString()
org/eclipse/jgit/dircache/DirCacheCheckout/checkoutEntry(org.eclipse.jgit.lib.Repository,java.io.File,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)#java/io/File/getParentFile()
org/eclipse/jgit/merge/RecursiveMerger/mockAuthor(java.util.List)#java/lang/Class/getSimpleName()
org/eclipse/jgit/merge/RecursiveMerger/mockAuthor(java.util.List)#java/util/Iterator/hasNext()
org/eclipse/jgit/merge/RecursiveMerger/mockAuthor(java.util.List)#java/lang/Math/max(int,int)
org/eclipse/jgit/merge/RecursiveMerger/mockAuthor(java.util.List)#java/util/TimeZone/getTimeZone(java.lang.String)
org/eclipse/jgit/merge/RecursiveMerger/mockAuthor(java.util.List)#java/util/Iterator/next()
org/eclipse/jgit/merge/RecursiveMerger/mockAuthor(java.util.List)#java/lang/StringBuilder/StringBuilder()
org/eclipse/jgit/merge/RecursiveMerger/mockAuthor(java.util.List)#java/util/Date/Date(long)
org/eclipse/jgit/merge/RecursiveMerger/mockAuthor(java.util.List)#java/util/List/iterator()
org/eclipse/jgit/merge/RecursiveMerger/mockAuthor(java.util.List)#java/lang/StringBuilder/toString()
org/eclipse/jgit/merge/RecursiveMerger/mockAuthor(java.util.List)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/jgit/merge/RecursiveMerger/getBaseCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,int)#org/eclipse/jgit/merge/RecursiveMerger/openTree(org.eclipse.jgit.lib.AnyObjectId)
org/eclipse/jgit/merge/RecursiveMerger/getBaseCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,int)#org/eclipse/jgit/merge/RecursiveMerger/mergeTrees(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.revwalk.RevTree,org.eclipse.jgit.revwalk.RevTree,boolean)
org/eclipse/jgit/merge/RecursiveMerger/getBaseCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,int)#java/util/List/add(java.lang.Object)
org/eclipse/jgit/merge/RecursiveMerger/getBaseCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,int)#java/lang/Integer/valueOf(int)
org/eclipse/jgit/merge/RecursiveMerger/getBaseCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,int)#java/util/ArrayList/get(int)
org/eclipse/jgit/merge/RecursiveMerger/getBaseCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,int)#java/util/ArrayList/ArrayList()
org/eclipse/jgit/merge/RecursiveMerger/getBaseCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,int)#java/util/ArrayList/isEmpty()
org/eclipse/jgit/merge/RecursiveMerger/getBaseCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,int)#org/eclipse/jgit/revwalk/RevCommit/getName()
org/eclipse/jgit/merge/RecursiveMerger/getBaseCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,int)#java/util/ArrayList/add(java.lang.Object)
org/eclipse/jgit/merge/RecursiveMerger/getBaseCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,int)#org/eclipse/jgit/revwalk/RevCommit/name()
org/eclipse/jgit/merge/RecursiveMerger/getBaseCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,int)#java/util/ArrayList/size()
org/eclipse/jgit/merge/RecursiveMerger/getBaseCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,int)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/eclipse/jgit/merge/RecursiveMerger/getBaseCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,int)#java/util/List/clear()
org/eclipse/jgit/merge/RecursiveMerger/getBaseCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,int)#java/util/Map/clear()
