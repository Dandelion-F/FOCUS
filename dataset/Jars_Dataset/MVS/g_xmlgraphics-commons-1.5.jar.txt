org/apache/xmlgraphics/ps/PSImageUtils/populateImageDictionary(java.awt.Dimension,java.awt.image.ColorModel,org.apache.xmlgraphics.ps.PSDictionary)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/ps/PSImageUtils/populateImageDictionary(java.awt.Dimension,java.awt.image.ColorModel,org.apache.xmlgraphics.ps.PSDictionary)#java/lang/StringBuilder/append(int)
org/apache/xmlgraphics/ps/PSImageUtils/populateImageDictionary(java.awt.Dimension,java.awt.image.ColorModel,org.apache.xmlgraphics.ps.PSDictionary)#java/awt/image/ColorModel/getNumColorComponents()
org/apache/xmlgraphics/ps/PSImageUtils/populateImageDictionary(java.awt.Dimension,java.awt.image.ColorModel,org.apache.xmlgraphics.ps.PSDictionary)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/ps/PSImageUtils/populateImageDictionary(java.awt.Dimension,java.awt.image.ColorModel,org.apache.xmlgraphics.ps.PSDictionary)#java/lang/UnsupportedOperationException/UnsupportedOperationException(java.lang.String)
org/apache/xmlgraphics/ps/PSImageUtils/populateImageDictionary(java.awt.Dimension,java.awt.image.ColorModel,org.apache.xmlgraphics.ps.PSDictionary)#java/awt/image/IndexColorModel/getPixelSize()
org/apache/xmlgraphics/ps/PSImageUtils/populateImageDictionary(java.awt.Dimension,java.awt.image.ColorModel,org.apache.xmlgraphics.ps.PSDictionary)#java/lang/Math/pow(double,double)
org/apache/xmlgraphics/ps/PSImageUtils/populateImageDictionary(java.awt.Dimension,java.awt.image.ColorModel,org.apache.xmlgraphics.ps.PSDictionary)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/ps/PSImageUtils/populateImageDictionary(java.awt.Dimension,java.awt.image.ColorModel,org.apache.xmlgraphics.ps.PSDictionary)#java/lang/Integer/toString(int)
org/apache/xmlgraphics/ps/PSImageUtils/populateImageDictionary(java.awt.Dimension,java.awt.image.ColorModel,org.apache.xmlgraphics.ps.PSDictionary)#java/awt/image/IndexColorModel/getMapSize()
org/apache/xmlgraphics/ps/PSImageUtils/populateImageDictionary(java.awt.Dimension,java.awt.image.ColorModel,org.apache.xmlgraphics.ps.PSDictionary)#org/apache/xmlgraphics/ps/PSDictionary/put(java.lang.Object,java.lang.Object)
org/apache/xmlgraphics/ps/PSImageUtils/populateImageDictionary(java.awt.Dimension,java.awt.image.ColorModel,org.apache.xmlgraphics.ps.PSDictionary)#java/awt/image/ColorModel/getComponentSize(int)
org/apache/xmlgraphics/ps/PSImageUtils/getRGB(java.awt.image.RenderedImage,int,int,int,int,int[],int,int)#java/awt/image/DataBuffer/getDataType()
org/apache/xmlgraphics/ps/PSImageUtils/getRGB(java.awt.image.RenderedImage,int,int,int,int,int[],int,int)#java/awt/image/Raster/getDataElements(int,int,java.lang.Object)
org/apache/xmlgraphics/ps/PSImageUtils/getRGB(java.awt.image.RenderedImage,int,int,int,int,int[],int,int)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/ps/PSImageUtils/getRGB(java.awt.image.RenderedImage,int,int,int,int,int[],int,int)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/ps/PSImageUtils/getRGB(java.awt.image.RenderedImage,int,int,int,int,int[],int,int)#java/awt/image/ColorModel/getRGB(java.lang.Object)
org/apache/xmlgraphics/ps/PSImageUtils/getRGB(java.awt.image.RenderedImage,int,int,int,int,int[],int,int)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/apache/xmlgraphics/ps/PSImageUtils/getRGB(java.awt.image.RenderedImage,int,int,int,int,int[],int,int)#java/awt/image/RenderedImage/getColorModel()
org/apache/xmlgraphics/ps/PSImageUtils/getRGB(java.awt.image.RenderedImage,int,int,int,int,int[],int,int)#java/awt/image/Raster/getDataBuffer()
org/apache/xmlgraphics/ps/PSImageUtils/getRGB(java.awt.image.RenderedImage,int,int,int,int,int[],int,int)#java/awt/image/Raster/getNumBands()
org/apache/xmlgraphics/ps/PSImageUtils/getRGB(java.awt.image.RenderedImage,int,int,int,int,int[],int,int)#java/lang/StringBuilder/append(int)
org/apache/xmlgraphics/ps/PSImageUtils/getRGB(java.awt.image.RenderedImage,int,int,int,int,int[],int,int)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/ps/PSImageUtils/getRGB(java.awt.image.RenderedImage,int,int,int,int,int[],int,int)#java/awt/image/RenderedImage/getData()
org/apache/xmlgraphics/ps/PSImageUtils/translateAndScale(org.apache.xmlgraphics.ps.PSGenerator,java.awt.geom.Dimension2D,java.awt.geom.Rectangle2D)#java/awt/geom/Rectangle2D/getY()
org/apache/xmlgraphics/ps/PSImageUtils/translateAndScale(org.apache.xmlgraphics.ps.PSGenerator,java.awt.geom.Dimension2D,java.awt.geom.Rectangle2D)#java/awt/Dimension/Dimension(int,int)
org/apache/xmlgraphics/ps/PSImageUtils/translateAndScale(org.apache.xmlgraphics.ps.PSGenerator,java.awt.geom.Dimension2D,java.awt.geom.Rectangle2D)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/ps/PSImageUtils/translateAndScale(org.apache.xmlgraphics.ps.PSGenerator,java.awt.geom.Dimension2D,java.awt.geom.Rectangle2D)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/ps/PSImageUtils/translateAndScale(org.apache.xmlgraphics.ps.PSGenerator,java.awt.geom.Dimension2D,java.awt.geom.Rectangle2D)#java/awt/geom/Rectangle2D/getWidth()
org/apache/xmlgraphics/ps/PSImageUtils/translateAndScale(org.apache.xmlgraphics.ps.PSGenerator,java.awt.geom.Dimension2D,java.awt.geom.Rectangle2D)#java/awt/geom/Dimension2D/getHeight()
org/apache/xmlgraphics/ps/PSImageUtils/translateAndScale(org.apache.xmlgraphics.ps.PSGenerator,java.awt.geom.Dimension2D,java.awt.geom.Rectangle2D)#java/awt/geom/Rectangle2D/getHeight()
org/apache/xmlgraphics/ps/PSImageUtils/translateAndScale(org.apache.xmlgraphics.ps.PSGenerator,java.awt.geom.Dimension2D,java.awt.geom.Rectangle2D)#java/awt/geom/Dimension2D/getWidth()
org/apache/xmlgraphics/ps/PSImageUtils/translateAndScale(org.apache.xmlgraphics.ps.PSGenerator,java.awt.geom.Dimension2D,java.awt.geom.Rectangle2D)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/ps/PSImageUtils/translateAndScale(org.apache.xmlgraphics.ps.PSGenerator,java.awt.geom.Dimension2D,java.awt.geom.Rectangle2D)#java/awt/geom/Rectangle2D/getX()
org/apache/xmlgraphics/ps/PSDictionary/toString()#java/lang/Object/toString()
org/apache/xmlgraphics/ps/PSDictionary/toString()#java/util/Iterator/hasNext()
org/apache/xmlgraphics/ps/PSDictionary/toString()#java/util/List/size()
org/apache/xmlgraphics/ps/PSDictionary/toString()#java/lang/StringBuffer/toString()
org/apache/xmlgraphics/ps/PSDictionary/toString()#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/ps/PSDictionary/toString()#java/util/Set/iterator()
org/apache/xmlgraphics/ps/PSDictionary/toString()#java/util/List/get(int)
org/apache/xmlgraphics/ps/PSDictionary/toString()#java/lang/StringBuffer/StringBuffer(java.lang.String)
org/apache/xmlgraphics/ps/PSDictionary/toString()#java/lang/StringBuilder/append(java.lang.Object)
org/apache/xmlgraphics/ps/PSDictionary/toString()#java/lang/StringBuffer/append(java.lang.String)
org/apache/xmlgraphics/ps/PSDictionary/toString()#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/ps/PSDictionary/toString()#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/ps/PSDictionary/toString()#java/lang/String/trim()
org/apache/xmlgraphics/ps/PSDictionary/toString()#org/apache/xmlgraphics/ps/PSDictionary/isEmpty()
org/apache/xmlgraphics/ps/PSDictionary/toString()#java/util/Iterator/next()
org/apache/xmlgraphics/ps/PSDictionary/toString()#java/util/HashMap/get(java.lang.Object)
org/apache/xmlgraphics/ps/PSDictionary/toString()#java/util/HashMap/keySet()
org/apache/xmlgraphics/util/ClasspathResource/loadManifests()#java/util/jar/Manifest/getEntries()
org/apache/xmlgraphics/util/ClasspathResource/loadManifests()#java/net/URL/openStream()
org/apache/xmlgraphics/util/ClasspathResource/loadManifests()#java/util/Iterator/hasNext()
org/apache/xmlgraphics/util/ClasspathResource/loadManifests()#java/util/Iterator/next()
org/apache/xmlgraphics/util/ClasspathResource/loadManifests()#java/util/jar/Attributes/getValue(java.lang.String)
org/apache/xmlgraphics/util/ClasspathResource/loadManifests()#java/lang/ClassLoader/getResources(java.lang.String)
org/apache/xmlgraphics/util/ClasspathResource/loadManifests()#java/util/jar/Manifest/Manifest(java.io.InputStream)
org/apache/xmlgraphics/util/ClasspathResource/loadManifests()#java/util/Map$Entry/getKey()
org/apache/xmlgraphics/util/ClasspathResource/loadManifests()#java/util/Set/iterator()
org/apache/xmlgraphics/util/ClasspathResource/loadManifests()#java/util/Map$Entry/getValue()
org/apache/xmlgraphics/util/ClasspathResource/loadManifests()#java/util/Enumeration/hasMoreElements()
org/apache/xmlgraphics/util/ClasspathResource/loadManifests()#java/util/Map/entrySet()
org/apache/xmlgraphics/util/ClasspathResource/loadManifests()#java/util/Enumeration/nextElement()
org/apache/xmlgraphics/image/loader/impl/imageio/PreloaderImageIO/preloadImage(java.lang.String,javax.xml.transform.Source,org.apache.xmlgraphics.image.loader.ImageContext)#javax/imageio/ImageReader/dispose()
org/apache/xmlgraphics/image/loader/impl/imageio/PreloaderImageIO/preloadImage(java.lang.String,javax.xml.transform.Source,org.apache.xmlgraphics.image.loader.ImageContext)#java/util/Iterator/hasNext()
org/apache/xmlgraphics/image/loader/impl/imageio/PreloaderImageIO/preloadImage(java.lang.String,javax.xml.transform.Source,org.apache.xmlgraphics.image.loader.ImageContext)#java/io/IOException/getMessage()
org/apache/xmlgraphics/image/loader/impl/imageio/PreloaderImageIO/preloadImage(java.lang.String,javax.xml.transform.Source,org.apache.xmlgraphics.image.loader.ImageContext)#java/util/Iterator/next()
org/apache/xmlgraphics/image/loader/impl/imageio/PreloaderImageIO/preloadImage(java.lang.String,javax.xml.transform.Source,org.apache.xmlgraphics.image.loader.ImageContext)#javax/imageio/ImageReader/getImageMetadata(int)
org/apache/xmlgraphics/image/loader/impl/imageio/PreloaderImageIO/preloadImage(java.lang.String,javax.xml.transform.Source,org.apache.xmlgraphics.image.loader.ImageContext)#javax/imageio/stream/ImageInputStream/reset()
org/apache/xmlgraphics/image/loader/impl/imageio/PreloaderImageIO/preloadImage(java.lang.String,javax.xml.transform.Source,org.apache.xmlgraphics.image.loader.ImageContext)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/loader/impl/imageio/PreloaderImageIO/preloadImage(java.lang.String,javax.xml.transform.Source,org.apache.xmlgraphics.image.loader.ImageContext)#javax/imageio/spi/ImageReaderSpi/getMIMETypes()
org/apache/xmlgraphics/image/loader/impl/imageio/PreloaderImageIO/preloadImage(java.lang.String,javax.xml.transform.Source,org.apache.xmlgraphics.image.loader.ImageContext)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/apache/xmlgraphics/image/loader/impl/imageio/PreloaderImageIO/preloadImage(java.lang.String,javax.xml.transform.Source,org.apache.xmlgraphics.image.loader.ImageContext)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/loader/impl/imageio/PreloaderImageIO/preloadImage(java.lang.String,javax.xml.transform.Source,org.apache.xmlgraphics.image.loader.ImageContext)#javax/imageio/ImageReader/setInput(java.lang.Object,boolean,boolean)
org/apache/xmlgraphics/image/loader/impl/imageio/PreloaderImageIO/preloadImage(java.lang.String,javax.xml.transform.Source,org.apache.xmlgraphics.image.loader.ImageContext)#javax/imageio/ImageReader/getWidth(int)
org/apache/xmlgraphics/image/loader/impl/imageio/PreloaderImageIO/preloadImage(java.lang.String,javax.xml.transform.Source,org.apache.xmlgraphics.image.loader.ImageContext)#javax/imageio/ImageReader/getHeight(int)
org/apache/xmlgraphics/image/loader/impl/imageio/PreloaderImageIO/preloadImage(java.lang.String,javax.xml.transform.Source,org.apache.xmlgraphics.image.loader.ImageContext)#javax/imageio/ImageReader/getOriginatingProvider()
org/apache/xmlgraphics/image/loader/impl/imageio/PreloaderImageIO/preloadImage(java.lang.String,javax.xml.transform.Source,org.apache.xmlgraphics.image.loader.ImageContext)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/loader/impl/imageio/PreloaderImageIO/preloadImage(java.lang.String,javax.xml.transform.Source,org.apache.xmlgraphics.image.loader.ImageContext)#javax/imageio/stream/ImageInputStream/mark()
org/apache/xmlgraphics/image/loader/impl/imageio/PreloaderImageIO/preloadImage(java.lang.String,javax.xml.transform.Source,org.apache.xmlgraphics.image.loader.ImageContext)#javax/imageio/ImageIO/getImageReaders(java.lang.Object)
org/apache/xmlgraphics/image/loader/pipeline/ImageProviderPipeline/forceCaching(org.apache.xmlgraphics.image.loader.Image)#org/apache/commons/logging/Log/debug(java.lang.Object)
org/apache/xmlgraphics/image/loader/pipeline/ImageProviderPipeline/forceCaching(org.apache.xmlgraphics.image.loader.Image)#org/apache/commons/io/IOUtils/copy(java.io.InputStream,java.io.OutputStream)
org/apache/xmlgraphics/image/loader/pipeline/ImageProviderPipeline/forceCaching(org.apache.xmlgraphics.image.loader.Image)#org/apache/commons/io/IOUtils/closeQuietly(java.io.InputStream)
org/apache/xmlgraphics/image/loader/pipeline/ImageProviderPipeline/forceCaching(org.apache.xmlgraphics.image.loader.Image)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/loader/pipeline/ImageProviderPipeline/forceCaching(org.apache.xmlgraphics.image.loader.Image)#org/apache/commons/logging/Log/isDebugEnabled()
org/apache/xmlgraphics/image/loader/pipeline/ImageProviderPipeline/forceCaching(org.apache.xmlgraphics.image.loader.Image)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/loader/pipeline/ImageProviderPipeline/forceCaching(org.apache.xmlgraphics.image.loader.Image)#java/io/ByteArrayOutputStream/toByteArray()
org/apache/xmlgraphics/image/loader/pipeline/ImageProviderPipeline/forceCaching(org.apache.xmlgraphics.image.loader.Image)#java/lang/StringBuilder/append(java.lang.Object)
org/apache/xmlgraphics/image/loader/pipeline/ImageProviderPipeline/forceCaching(org.apache.xmlgraphics.image.loader.Image)#org/apache/xmlgraphics/image/loader/impl/ImageRawStream$ByteArrayStreamFactory/ByteArrayStreamFactory(byte[])
org/apache/xmlgraphics/image/loader/pipeline/ImageProviderPipeline/forceCaching(org.apache.xmlgraphics.image.loader.Image)#java/io/ByteArrayOutputStream/ByteArrayOutputStream()
org/apache/xmlgraphics/image/loader/pipeline/ImageProviderPipeline/forceCaching(org.apache.xmlgraphics.image.loader.Image)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/loader/pipeline/ImageProviderPipeline/execute(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.Image,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/util/List/size()
org/apache/xmlgraphics/image/loader/pipeline/ImageProviderPipeline/execute(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.Image,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/lang/StringBuilder/append(long)
org/apache/xmlgraphics/image/loader/pipeline/ImageProviderPipeline/execute(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.Image,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/loader/pipeline/ImageProviderPipeline/execute(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.Image,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/loader/pipeline/ImageProviderPipeline/execute(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.Image,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/loader/pipeline/ImageProviderPipeline/execute(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.Image,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#org/apache/commons/logging/Log/trace(java.lang.Object)
org/apache/xmlgraphics/image/loader/pipeline/ImageProviderPipeline/execute(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.Image,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/lang/StringBuilder/append(java.lang.Object)
org/apache/xmlgraphics/image/loader/pipeline/ImageProviderPipeline/execute(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.Image,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/lang/System/currentTimeMillis()
org/apache/xmlgraphics/image/loader/pipeline/ImageProviderPipeline/execute(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.Image,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#org/apache/commons/logging/Log/isTraceEnabled()
org/apache/xmlgraphics/image/GraphicsUtil/copyData_FALLBACK(java.awt.image.Raster,java.awt.image.WritableRaster)#java/awt/image/WritableRaster/setPixels(int,int,int,int,int[])
org/apache/xmlgraphics/image/GraphicsUtil/copyData_FALLBACK(java.awt.image.Raster,java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getWidth()
org/apache/xmlgraphics/image/GraphicsUtil/copyData_FALLBACK(java.awt.image.Raster,java.awt.image.WritableRaster)#java/awt/image/Raster/getPixels(int,int,int,int,int[])
org/apache/xmlgraphics/image/GraphicsUtil/copyData_FALLBACK(java.awt.image.Raster,java.awt.image.WritableRaster)#java/awt/image/Raster/getWidth()
org/apache/xmlgraphics/image/GraphicsUtil/copyData_FALLBACK(java.awt.image.Raster,java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getMinX()
org/apache/xmlgraphics/image/GraphicsUtil/copyData_FALLBACK(java.awt.image.Raster,java.awt.image.WritableRaster)#java/awt/image/Raster/getMinX()
org/apache/xmlgraphics/image/GraphicsUtil/copyData_FALLBACK(java.awt.image.Raster,java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getMinY()
org/apache/xmlgraphics/image/GraphicsUtil/copyData_FALLBACK(java.awt.image.Raster,java.awt.image.WritableRaster)#java/awt/image/Raster/getHeight()
org/apache/xmlgraphics/image/GraphicsUtil/copyData_FALLBACK(java.awt.image.Raster,java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getHeight()
org/apache/xmlgraphics/image/GraphicsUtil/copyData_FALLBACK(java.awt.image.Raster,java.awt.image.WritableRaster)#java/awt/image/Raster/getMinY()
org/apache/xmlgraphics/image/GraphicsUtil/mult_BYTE_COMP_Data(java.awt.image.WritableRaster)#java/awt/image/ComponentSampleModel/getScanlineStride()
org/apache/xmlgraphics/image/GraphicsUtil/mult_BYTE_COMP_Data(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getSampleModel()
org/apache/xmlgraphics/image/GraphicsUtil/mult_BYTE_COMP_Data(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getSampleModelTranslateY()
org/apache/xmlgraphics/image/GraphicsUtil/mult_BYTE_COMP_Data(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getMinX()
org/apache/xmlgraphics/image/GraphicsUtil/mult_BYTE_COMP_Data(java.awt.image.WritableRaster)#java/awt/image/DataBufferByte/getOffset()
org/apache/xmlgraphics/image/GraphicsUtil/mult_BYTE_COMP_Data(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getDataBuffer()
org/apache/xmlgraphics/image/GraphicsUtil/mult_BYTE_COMP_Data(java.awt.image.WritableRaster)#java/awt/image/ComponentSampleModel/getPixelStride()
org/apache/xmlgraphics/image/GraphicsUtil/mult_BYTE_COMP_Data(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getWidth()
org/apache/xmlgraphics/image/GraphicsUtil/mult_BYTE_COMP_Data(java.awt.image.WritableRaster)#java/awt/image/ComponentSampleModel/getBandOffsets()
org/apache/xmlgraphics/image/GraphicsUtil/mult_BYTE_COMP_Data(java.awt.image.WritableRaster)#java/awt/image/ComponentSampleModel/getOffset(int,int)
org/apache/xmlgraphics/image/GraphicsUtil/mult_BYTE_COMP_Data(java.awt.image.WritableRaster)#java/awt/image/DataBufferByte/getBankData()
org/apache/xmlgraphics/image/GraphicsUtil/mult_BYTE_COMP_Data(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getSampleModelTranslateX()
org/apache/xmlgraphics/image/GraphicsUtil/mult_BYTE_COMP_Data(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getMinY()
org/apache/xmlgraphics/image/GraphicsUtil/mult_BYTE_COMP_Data(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getHeight()
org/apache/xmlgraphics/image/GraphicsUtil/divide_INT_PACK_Data(java.awt.image.WritableRaster)#java/awt/image/DataBufferInt/getOffset()
org/apache/xmlgraphics/image/GraphicsUtil/divide_INT_PACK_Data(java.awt.image.WritableRaster)#java/awt/image/SinglePixelPackedSampleModel/getScanlineStride()
org/apache/xmlgraphics/image/GraphicsUtil/divide_INT_PACK_Data(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getWidth()
org/apache/xmlgraphics/image/GraphicsUtil/divide_INT_PACK_Data(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getSampleModelTranslateX()
org/apache/xmlgraphics/image/GraphicsUtil/divide_INT_PACK_Data(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getSampleModelTranslateY()
org/apache/xmlgraphics/image/GraphicsUtil/divide_INT_PACK_Data(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getMinX()
org/apache/xmlgraphics/image/GraphicsUtil/divide_INT_PACK_Data(java.awt.image.WritableRaster)#java/awt/image/DataBufferInt/getBankData()
org/apache/xmlgraphics/image/GraphicsUtil/divide_INT_PACK_Data(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getDataBuffer()
org/apache/xmlgraphics/image/GraphicsUtil/divide_INT_PACK_Data(java.awt.image.WritableRaster)#java/awt/image/SinglePixelPackedSampleModel/getOffset(int,int)
org/apache/xmlgraphics/image/GraphicsUtil/divide_INT_PACK_Data(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getSampleModel()
org/apache/xmlgraphics/image/GraphicsUtil/divide_INT_PACK_Data(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getMinY()
org/apache/xmlgraphics/image/GraphicsUtil/divide_INT_PACK_Data(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getHeight()
org/apache/xmlgraphics/image/GraphicsUtil/copyData_INT_PACK(java.awt.image.Raster,java.awt.image.WritableRaster)#java/awt/image/DataBufferInt/getOffset()
org/apache/xmlgraphics/image/GraphicsUtil/copyData_INT_PACK(java.awt.image.Raster,java.awt.image.WritableRaster)#java/awt/image/SinglePixelPackedSampleModel/getScanlineStride()
org/apache/xmlgraphics/image/GraphicsUtil/copyData_INT_PACK(java.awt.image.Raster,java.awt.image.WritableRaster)#java/awt/image/DataBufferInt/getBankData()
org/apache/xmlgraphics/image/GraphicsUtil/copyData_INT_PACK(java.awt.image.Raster,java.awt.image.WritableRaster)#java/lang/System/arraycopy(java.lang.Object,int,java.lang.Object,int,int)
org/apache/xmlgraphics/image/GraphicsUtil/copyData_INT_PACK(java.awt.image.Raster,java.awt.image.WritableRaster)#java/awt/image/Raster/getSampleModel()
org/apache/xmlgraphics/image/GraphicsUtil/copyData_INT_PACK(java.awt.image.Raster,java.awt.image.WritableRaster)#java/awt/image/SinglePixelPackedSampleModel/getOffset(int,int)
org/apache/xmlgraphics/image/GraphicsUtil/copyData_INT_PACK(java.awt.image.Raster,java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getSampleModel()
org/apache/xmlgraphics/image/GraphicsUtil/copyData_INT_PACK(java.awt.image.Raster,java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getWidth()
org/apache/xmlgraphics/image/GraphicsUtil/copyData_INT_PACK(java.awt.image.Raster,java.awt.image.WritableRaster)#java/awt/image/Raster/getWidth()
org/apache/xmlgraphics/image/GraphicsUtil/copyData_INT_PACK(java.awt.image.Raster,java.awt.image.WritableRaster)#java/awt/image/Raster/getSampleModelTranslateX()
org/apache/xmlgraphics/image/GraphicsUtil/copyData_INT_PACK(java.awt.image.Raster,java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getSampleModelTranslateX()
org/apache/xmlgraphics/image/GraphicsUtil/copyData_INT_PACK(java.awt.image.Raster,java.awt.image.WritableRaster)#java/awt/image/Raster/getSampleModelTranslateY()
org/apache/xmlgraphics/image/GraphicsUtil/copyData_INT_PACK(java.awt.image.Raster,java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getSampleModelTranslateY()
org/apache/xmlgraphics/image/GraphicsUtil/copyData_INT_PACK(java.awt.image.Raster,java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getMinX()
org/apache/xmlgraphics/image/GraphicsUtil/copyData_INT_PACK(java.awt.image.Raster,java.awt.image.WritableRaster)#java/awt/image/Raster/getMinX()
org/apache/xmlgraphics/image/GraphicsUtil/copyData_INT_PACK(java.awt.image.Raster,java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getMinY()
org/apache/xmlgraphics/image/GraphicsUtil/copyData_INT_PACK(java.awt.image.Raster,java.awt.image.WritableRaster)#java/awt/image/Raster/getHeight()
org/apache/xmlgraphics/image/GraphicsUtil/copyData_INT_PACK(java.awt.image.Raster,java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getHeight()
org/apache/xmlgraphics/image/GraphicsUtil/copyData_INT_PACK(java.awt.image.Raster,java.awt.image.WritableRaster)#java/awt/image/Raster/getMinY()
org/apache/xmlgraphics/image/GraphicsUtil/copyData_INT_PACK(java.awt.image.Raster,java.awt.image.WritableRaster)#java/awt/image/Raster/getDataBuffer()
org/apache/xmlgraphics/image/GraphicsUtil/copyData_INT_PACK(java.awt.image.Raster,java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getDataBuffer()
org/apache/xmlgraphics/image/GraphicsUtil/divide_BYTE_COMP_Data(java.awt.image.WritableRaster)#java/awt/image/ComponentSampleModel/getScanlineStride()
org/apache/xmlgraphics/image/GraphicsUtil/divide_BYTE_COMP_Data(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getSampleModel()
org/apache/xmlgraphics/image/GraphicsUtil/divide_BYTE_COMP_Data(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getSampleModelTranslateY()
org/apache/xmlgraphics/image/GraphicsUtil/divide_BYTE_COMP_Data(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getMinX()
org/apache/xmlgraphics/image/GraphicsUtil/divide_BYTE_COMP_Data(java.awt.image.WritableRaster)#java/awt/image/DataBufferByte/getOffset()
org/apache/xmlgraphics/image/GraphicsUtil/divide_BYTE_COMP_Data(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getDataBuffer()
org/apache/xmlgraphics/image/GraphicsUtil/divide_BYTE_COMP_Data(java.awt.image.WritableRaster)#java/awt/image/ComponentSampleModel/getPixelStride()
org/apache/xmlgraphics/image/GraphicsUtil/divide_BYTE_COMP_Data(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getWidth()
org/apache/xmlgraphics/image/GraphicsUtil/divide_BYTE_COMP_Data(java.awt.image.WritableRaster)#java/awt/image/ComponentSampleModel/getBandOffsets()
org/apache/xmlgraphics/image/GraphicsUtil/divide_BYTE_COMP_Data(java.awt.image.WritableRaster)#java/awt/image/ComponentSampleModel/getOffset(int,int)
org/apache/xmlgraphics/image/GraphicsUtil/divide_BYTE_COMP_Data(java.awt.image.WritableRaster)#java/awt/image/DataBufferByte/getBankData()
org/apache/xmlgraphics/image/GraphicsUtil/divide_BYTE_COMP_Data(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getSampleModelTranslateX()
org/apache/xmlgraphics/image/GraphicsUtil/divide_BYTE_COMP_Data(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getMinY()
org/apache/xmlgraphics/image/GraphicsUtil/divide_BYTE_COMP_Data(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getHeight()
org/apache/xmlgraphics/image/GraphicsUtil/makeRasterWritable(java.awt.image.Raster,int,int)#java/awt/image/Raster/getSampleModel()
org/apache/xmlgraphics/image/GraphicsUtil/makeRasterWritable(java.awt.image.Raster,int,int)#java/awt/image/WritableRaster/createWritableChild(int,int,int,int,int,int,int[])
org/apache/xmlgraphics/image/GraphicsUtil/makeRasterWritable(java.awt.image.Raster,int,int)#java/awt/image/Raster/getWidth()
org/apache/xmlgraphics/image/GraphicsUtil/makeRasterWritable(java.awt.image.Raster,int,int)#java/awt/image/Raster/getSampleModelTranslateX()
org/apache/xmlgraphics/image/GraphicsUtil/makeRasterWritable(java.awt.image.Raster,int,int)#java/awt/image/Raster/createWritableRaster(java.awt.image.SampleModel,java.awt.image.DataBuffer,java.awt.Point)
org/apache/xmlgraphics/image/GraphicsUtil/makeRasterWritable(java.awt.image.Raster,int,int)#java/awt/image/Raster/getMinX()
org/apache/xmlgraphics/image/GraphicsUtil/makeRasterWritable(java.awt.image.Raster,int,int)#java/awt/image/Raster/getDataBuffer()
org/apache/xmlgraphics/image/GraphicsUtil/makeRasterWritable(java.awt.image.Raster,int,int)#java/awt/image/Raster/getSampleModelTranslateY()
org/apache/xmlgraphics/image/GraphicsUtil/makeRasterWritable(java.awt.image.Raster,int,int)#java/awt/Point/Point(int,int)
org/apache/xmlgraphics/image/GraphicsUtil/makeRasterWritable(java.awt.image.Raster,int,int)#java/awt/image/Raster/getHeight()
org/apache/xmlgraphics/image/GraphicsUtil/makeRasterWritable(java.awt.image.Raster,int,int)#java/awt/image/Raster/getMinY()
org/apache/xmlgraphics/image/GraphicsUtil/mult_INT_PACK_Data(java.awt.image.WritableRaster)#java/awt/image/DataBufferInt/getOffset()
org/apache/xmlgraphics/image/GraphicsUtil/mult_INT_PACK_Data(java.awt.image.WritableRaster)#java/awt/image/SinglePixelPackedSampleModel/getScanlineStride()
org/apache/xmlgraphics/image/GraphicsUtil/mult_INT_PACK_Data(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getWidth()
org/apache/xmlgraphics/image/GraphicsUtil/mult_INT_PACK_Data(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getSampleModelTranslateX()
org/apache/xmlgraphics/image/GraphicsUtil/mult_INT_PACK_Data(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getSampleModelTranslateY()
org/apache/xmlgraphics/image/GraphicsUtil/mult_INT_PACK_Data(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getMinX()
org/apache/xmlgraphics/image/GraphicsUtil/mult_INT_PACK_Data(java.awt.image.WritableRaster)#java/awt/image/DataBufferInt/getBankData()
org/apache/xmlgraphics/image/GraphicsUtil/mult_INT_PACK_Data(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getDataBuffer()
org/apache/xmlgraphics/image/GraphicsUtil/mult_INT_PACK_Data(java.awt.image.WritableRaster)#java/awt/image/SinglePixelPackedSampleModel/getOffset(int,int)
org/apache/xmlgraphics/image/GraphicsUtil/mult_INT_PACK_Data(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getSampleModel()
org/apache/xmlgraphics/image/GraphicsUtil/mult_INT_PACK_Data(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getMinY()
org/apache/xmlgraphics/image/GraphicsUtil/mult_INT_PACK_Data(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getHeight()
org/apache/xmlgraphics/image/GraphicsUtil/copyRaster(java.awt.image.Raster,int,int)#java/awt/image/DataBuffer/getSize()
org/apache/xmlgraphics/image/GraphicsUtil/copyRaster(java.awt.image.Raster,int,int)#java/awt/image/DataBufferByte/getData(int)
org/apache/xmlgraphics/image/GraphicsUtil/copyRaster(java.awt.image.Raster,int,int)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/GraphicsUtil/copyRaster(java.awt.image.Raster,int,int)#java/awt/image/DataBufferShort/getData(int)
org/apache/xmlgraphics/image/GraphicsUtil/copyRaster(java.awt.image.Raster,int,int)#java/awt/image/Raster/getSampleModelTranslateX()
org/apache/xmlgraphics/image/GraphicsUtil/copyRaster(java.awt.image.Raster,int,int)#java/awt/image/DataBuffer/getNumBanks()
org/apache/xmlgraphics/image/GraphicsUtil/copyRaster(java.awt.image.Raster,int,int)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/GraphicsUtil/copyRaster(java.awt.image.Raster,int,int)#java/lang/UnsupportedOperationException/UnsupportedOperationException(java.lang.String)
org/apache/xmlgraphics/image/GraphicsUtil/copyRaster(java.awt.image.Raster,int,int)#java/awt/image/DataBuffer/getOffsets()
org/apache/xmlgraphics/image/GraphicsUtil/copyRaster(java.awt.image.Raster,int,int)#java/awt/image/Raster/getMinX()
org/apache/xmlgraphics/image/GraphicsUtil/copyRaster(java.awt.image.Raster,int,int)#java/lang/System/arraycopy(java.lang.Object,int,java.lang.Object,int,int)
org/apache/xmlgraphics/image/GraphicsUtil/copyRaster(java.awt.image.Raster,int,int)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/GraphicsUtil/copyRaster(java.awt.image.Raster,int,int)#java/awt/image/Raster/getSampleModel()
org/apache/xmlgraphics/image/GraphicsUtil/copyRaster(java.awt.image.Raster,int,int)#java/awt/image/DataBuffer/getDataType()
org/apache/xmlgraphics/image/GraphicsUtil/copyRaster(java.awt.image.Raster,int,int)#java/awt/image/Raster/createWritableRaster(java.awt.image.SampleModel,java.awt.Point)
org/apache/xmlgraphics/image/GraphicsUtil/copyRaster(java.awt.image.Raster,int,int)#java/awt/image/DataBufferUShort/getData(int)
org/apache/xmlgraphics/image/GraphicsUtil/copyRaster(java.awt.image.Raster,int,int)#java/awt/image/WritableRaster/createWritableChild(int,int,int,int,int,int,int[])
org/apache/xmlgraphics/image/GraphicsUtil/copyRaster(java.awt.image.Raster,int,int)#java/lang/StringBuilder/append(int)
org/apache/xmlgraphics/image/GraphicsUtil/copyRaster(java.awt.image.Raster,int,int)#java/awt/image/Raster/getWidth()
org/apache/xmlgraphics/image/GraphicsUtil/copyRaster(java.awt.image.Raster,int,int)#java/awt/image/Raster/getSampleModelTranslateY()
org/apache/xmlgraphics/image/GraphicsUtil/copyRaster(java.awt.image.Raster,int,int)#java/awt/Point/Point(int,int)
org/apache/xmlgraphics/image/GraphicsUtil/copyRaster(java.awt.image.Raster,int,int)#java/awt/image/Raster/getHeight()
org/apache/xmlgraphics/image/GraphicsUtil/copyRaster(java.awt.image.Raster,int,int)#java/awt/image/Raster/getMinY()
org/apache/xmlgraphics/image/GraphicsUtil/copyRaster(java.awt.image.Raster,int,int)#java/awt/image/DataBufferInt/getData(int)
org/apache/xmlgraphics/image/GraphicsUtil/copyRaster(java.awt.image.Raster,int,int)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/apache/xmlgraphics/image/GraphicsUtil/copyRaster(java.awt.image.Raster,int,int)#java/awt/image/Raster/getDataBuffer()
org/apache/xmlgraphics/image/GraphicsUtil/copyRaster(java.awt.image.Raster,int,int)#java/awt/image/WritableRaster/getDataBuffer()
org/apache/xmlgraphics/ps/PSProcSets/StdProcSet/writeTo(org.apache.xmlgraphics.ps.PSGenerator)#java/util/Iterator/hasNext()
org/apache/xmlgraphics/ps/PSProcSets/StdProcSet/writeTo(org.apache.xmlgraphics.ps.PSGenerator)#org/apache/xmlgraphics/ps/PSProcSets$StdProcSet/getVersion()
org/apache/xmlgraphics/ps/PSProcSets/StdProcSet/writeTo(org.apache.xmlgraphics.ps.PSGenerator)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/ps/PSProcSets/StdProcSet/writeTo(org.apache.xmlgraphics.ps.PSGenerator)#java/util/Set/iterator()
org/apache/xmlgraphics/ps/PSProcSets/StdProcSet/writeTo(org.apache.xmlgraphics.ps.PSGenerator)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/ps/PSProcSets/StdProcSet/writeTo(org.apache.xmlgraphics.ps.PSGenerator)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/ps/PSProcSets/StdProcSet/writeTo(org.apache.xmlgraphics.ps.PSGenerator)#java/util/Map$Entry/getKey()
org/apache/xmlgraphics/ps/PSProcSets/StdProcSet/writeTo(org.apache.xmlgraphics.ps.PSGenerator)#org/apache/xmlgraphics/ps/PSProcSets$StdProcSet/getName()
org/apache/xmlgraphics/ps/PSProcSets/StdProcSet/writeTo(org.apache.xmlgraphics.ps.PSGenerator)#java/lang/Integer/toString(int)
org/apache/xmlgraphics/ps/PSProcSets/StdProcSet/writeTo(org.apache.xmlgraphics.ps.PSGenerator)#java/util/Iterator/next()
org/apache/xmlgraphics/ps/PSProcSets/StdProcSet/writeTo(org.apache.xmlgraphics.ps.PSGenerator)#org/apache/xmlgraphics/ps/PSProcSets$StdProcSet/getRevision()
org/apache/xmlgraphics/ps/PSProcSets/StdProcSet/writeTo(org.apache.xmlgraphics.ps.PSGenerator)#java/lang/StringBuilder/append(java.lang.Object)
org/apache/xmlgraphics/ps/PSProcSets/StdProcSet/writeTo(org.apache.xmlgraphics.ps.PSGenerator)#java/util/Map$Entry/getValue()
org/apache/xmlgraphics/ps/PSProcSets/StdProcSet/writeTo(org.apache.xmlgraphics.ps.PSGenerator)#java/util/Map/entrySet()
org/apache/xmlgraphics/ps/PSProcSets/StdProcSet/writeTo(org.apache.xmlgraphics.ps.PSGenerator)#java/lang/Float/toString(float)
org/apache/xmlgraphics/xmp/Metadata/toSAX(org.xml.sax.ContentHandler)#org/xml/sax/helpers/AttributesImpl/AttributesImpl()
org/apache/xmlgraphics/xmp/Metadata/toSAX(org.xml.sax.ContentHandler)#org/xml/sax/helpers/AttributesImpl/clear()
org/apache/xmlgraphics/xmp/Metadata/toSAX(org.xml.sax.ContentHandler)#java/util/Map/values()
org/apache/xmlgraphics/xmp/Metadata/toSAX(org.xml.sax.ContentHandler)#java/lang/String/equals(java.lang.Object)
org/apache/xmlgraphics/xmp/Metadata/toSAX(org.xml.sax.ContentHandler)#java/util/Set/iterator()
org/apache/xmlgraphics/xmp/Metadata/toSAX(org.xml.sax.ContentHandler)#org/xml/sax/ContentHandler/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)
org/apache/xmlgraphics/xmp/Metadata/toSAX(org.xml.sax.ContentHandler)#java/util/Collection/iterator()
org/apache/xmlgraphics/xmp/Metadata/toSAX(org.xml.sax.ContentHandler)#java/util/HashSet/HashSet()
org/apache/xmlgraphics/xmp/Metadata/toSAX(org.xml.sax.ContentHandler)#java/util/Iterator/hasNext()
org/apache/xmlgraphics/xmp/Metadata/toSAX(org.xml.sax.ContentHandler)#org/xml/sax/ContentHandler/endPrefixMapping(java.lang.String)
org/apache/xmlgraphics/xmp/Metadata/toSAX(org.xml.sax.ContentHandler)#org/xml/sax/ContentHandler/startPrefixMapping(java.lang.String,java.lang.String)
org/apache/xmlgraphics/xmp/Metadata/toSAX(org.xml.sax.ContentHandler)#org/xml/sax/ContentHandler/endElement(java.lang.String,java.lang.String,java.lang.String)
org/apache/xmlgraphics/xmp/Metadata/toSAX(org.xml.sax.ContentHandler)#java/util/Iterator/next()
org/apache/xmlgraphics/xmp/Metadata/toSAX(org.xml.sax.ContentHandler)#java/util/Map/keySet()
org/apache/xmlgraphics/xmp/Metadata/toSAX(org.xml.sax.ContentHandler)#org/xml/sax/helpers/AttributesImpl/addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
org/apache/xmlgraphics/xmp/Metadata/toSAX(org.xml.sax.ContentHandler)#java/util/Set/add(java.lang.Object)
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/toFile(java.net.URL)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/toFile(java.net.URL)#java/net/URL/getProtocol()
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/toFile(java.net.URL)#java/lang/Character/toString(char)
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/toFile(java.net.URL)#java/lang/String/length()
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/toFile(java.net.URL)#java/net/URL/getFile()
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/toFile(java.net.URL)#java/io/File/File(java.lang.String)
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/toFile(java.net.URL)#java/lang/String/equals(java.lang.Object)
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/toFile(java.net.URL)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/toFile(java.net.URL)#java/lang/String/replace(char,char)
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/toFile(java.net.URL)#java/net/URLDecoder/decode(java.lang.String,java.lang.String)
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/toFile(java.net.URL)#java/lang/AssertionError/AssertionError()
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/toFile(java.net.URL)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/toFile(java.net.URL)#java/net/URL/getHost()
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/toFile(java.net.URL)#java/io/File/isFile()
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/newSource(java.lang.String)#org/apache/commons/logging/Log/debug(java.lang.Object)
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/newSource(java.lang.String)#javax/imageio/ImageIO/createImageInputStream(java.lang.Object)
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/newSource(java.lang.String)#java/io/IOException/getMessage()
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/newSource(java.lang.String)#java/io/FileNotFoundException/getMessage()
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/newSource(java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/newSource(java.lang.String)#org/apache/commons/logging/Log/error(java.lang.Object)
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/newSource(java.lang.String)#java/io/FileInputStream/FileInputStream(java.io.File)
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/newSource(java.lang.String)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/newSource(java.lang.String)#java/net/URL/openStream()
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/newSource(java.lang.String)#org/apache/commons/io/IOUtils/closeQuietly(java.io.InputStream)
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/newSource(java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/newSource(java.lang.String)#org/apache/commons/logging/Log/isDebugEnabled()
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/newSource(java.lang.String)#java/net/URL/URL(java.lang.String)
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/newSource(java.lang.String)#java/lang/StringBuilder/append(java.lang.Object)
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/newSource(java.lang.String)#javax/xml/transform/Source/getSystemId()
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/newSource(java.lang.String)#java/lang/AssertionError/AssertionError()
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/<clinit>()#java/lang/Boolean/valueOf(java.lang.String)
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/<clinit>()#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/<clinit>()#java/lang/Class/getName()
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/<clinit>()#java/lang/System/getProperty(java.lang.String)
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/<clinit>()#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/<clinit>()#java/lang/Boolean/booleanValue()
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/<clinit>()#org/apache/commons/logging/LogFactory/getLog(java.lang.Class)
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/<clinit>()#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/loader/impl/AbstractImageSessionContext/<clinit>()#java/lang/Class/desiredAssertionStatus()
org/apache/xmlgraphics/xmp/XMPHandler/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#org/xml/sax/Attributes/getValue(int)
org/apache/xmlgraphics/xmp/XMPHandler/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#java/lang/String/equals(java.lang.Object)
org/apache/xmlgraphics/xmp/XMPHandler/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#org/xml/sax/Attributes/getValue(java.lang.String,java.lang.String)
org/apache/xmlgraphics/xmp/XMPHandler/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#org/xml/sax/Attributes/getURI(int)
org/apache/xmlgraphics/xmp/XMPHandler/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#java/lang/StringBuilder/append(java.lang.Object)
org/apache/xmlgraphics/xmp/XMPHandler/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#java/util/Stack/peek()
org/apache/xmlgraphics/xmp/XMPHandler/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#java/lang/Object/equals(java.lang.Object)
org/apache/xmlgraphics/xmp/XMPHandler/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#org/xml/sax/helpers/AttributesImpl/AttributesImpl(org.xml.sax.Attributes)
org/apache/xmlgraphics/xmp/XMPHandler/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#org/xml/sax/SAXException/SAXException(java.lang.String)
org/apache/xmlgraphics/xmp/XMPHandler/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#org/xml/sax/Attributes/getQName(int)
org/apache/xmlgraphics/xmp/XMPHandler/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#org/xml/sax/Attributes/getLength()
org/apache/xmlgraphics/xmp/XMPHandler/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/xmp/XMPHandler/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#java/util/Stack/push(java.lang.Object)
org/apache/xmlgraphics/xmp/XMPHandler/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/xmp/XMPHandler/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#org/xml/sax/helpers/DefaultHandler/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)
org/apache/xmlgraphics/xmp/XMPHandler/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/xmp/XMPHandler/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)#java/lang/StringBuffer/setLength(int)
org/apache/xmlgraphics/xmp/XMPHandler/endElement(java.lang.String,java.lang.String,java.lang.String)#java/lang/String/trim()
org/apache/xmlgraphics/xmp/XMPHandler/endElement(java.lang.String,java.lang.String,java.lang.String)#java/lang/AssertionError/AssertionError(java.lang.Object)
org/apache/xmlgraphics/xmp/XMPHandler/endElement(java.lang.String,java.lang.String,java.lang.String)#org/xml/sax/Attributes/getValue(java.lang.String,java.lang.String)
org/apache/xmlgraphics/xmp/XMPHandler/endElement(java.lang.String,java.lang.String,java.lang.String)#java/lang/StringBuffer/setLength(int)
org/apache/xmlgraphics/xmp/XMPHandler/endElement(java.lang.String,java.lang.String,java.lang.String)#java/lang/IllegalStateException/IllegalStateException(java.lang.String)
org/apache/xmlgraphics/xmp/XMPHandler/endElement(java.lang.String,java.lang.String,java.lang.String)#java/util/Stack/pop()
org/apache/xmlgraphics/xmp/XMPHandler/endElement(java.lang.String,java.lang.String,java.lang.String)#java/net/URI/URI(java.lang.String)
org/apache/xmlgraphics/xmp/XMPHandler/endElement(java.lang.String,java.lang.String,java.lang.String)#org/xml/sax/helpers/DefaultHandler/endElement(java.lang.String,java.lang.String,java.lang.String)
org/apache/xmlgraphics/xmp/XMPHandler/endElement(java.lang.String,java.lang.String,java.lang.String)#java/lang/String/length()
org/apache/xmlgraphics/xmp/XMPHandler/endElement(java.lang.String,java.lang.String,java.lang.String)#java/lang/String/equals(java.lang.Object)
org/apache/xmlgraphics/xmp/XMPHandler/endElement(java.lang.String,java.lang.String,java.lang.String)#java/lang/StringBuffer/toString()
org/apache/xmlgraphics/xmp/XMPHandler/endElement(java.lang.String,java.lang.String,java.lang.String)#java/lang/UnsupportedOperationException/UnsupportedOperationException(java.lang.String)
org/apache/xmlgraphics/xmp/XMPHandler/endElement(java.lang.String,java.lang.String,java.lang.String)#org/xml/sax/SAXException/SAXException(java.lang.String,java.lang.Exception)
org/apache/xmlgraphics/image/loader/impl/ImageConverterBitmap2G2D/1/paint(java.awt.Graphics2D,java.awt.geom.Rectangle2D)#java/awt/geom/Rectangle2D/getY()
org/apache/xmlgraphics/image/loader/impl/ImageConverterBitmap2G2D/1/paint(java.awt.Graphics2D,java.awt.geom.Rectangle2D)#java/awt/Graphics2D/drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)
org/apache/xmlgraphics/image/loader/impl/ImageConverterBitmap2G2D/1/paint(java.awt.Graphics2D,java.awt.geom.Rectangle2D)#java/awt/geom/AffineTransform/scale(double,double)
org/apache/xmlgraphics/image/loader/impl/ImageConverterBitmap2G2D/1/paint(java.awt.Graphics2D,java.awt.geom.Rectangle2D)#java/awt/geom/Rectangle2D/getWidth()
org/apache/xmlgraphics/image/loader/impl/ImageConverterBitmap2G2D/1/paint(java.awt.Graphics2D,java.awt.geom.Rectangle2D)#java/awt/geom/Rectangle2D/getHeight()
org/apache/xmlgraphics/image/loader/impl/ImageConverterBitmap2G2D/1/paint(java.awt.Graphics2D,java.awt.geom.Rectangle2D)#java/awt/geom/AffineTransform/AffineTransform()
org/apache/xmlgraphics/image/loader/impl/ImageConverterBitmap2G2D/1/paint(java.awt.Graphics2D,java.awt.geom.Rectangle2D)#java/awt/image/RenderedImage/getHeight()
org/apache/xmlgraphics/image/loader/impl/ImageConverterBitmap2G2D/1/paint(java.awt.Graphics2D,java.awt.geom.Rectangle2D)#java/awt/geom/Rectangle2D/getX()
org/apache/xmlgraphics/image/loader/impl/ImageConverterBitmap2G2D/1/paint(java.awt.Graphics2D,java.awt.geom.Rectangle2D)#java/awt/geom/AffineTransform/translate(double,double)
org/apache/xmlgraphics/image/loader/impl/ImageConverterBitmap2G2D/1/paint(java.awt.Graphics2D,java.awt.geom.Rectangle2D)#java/awt/image/RenderedImage/getWidth()
org/apache/xmlgraphics/ps/PSGenerator/establishFallbackRGB(java.lang.StringBuffer,java.awt.Color)#java/awt/Color/getColorComponents(java.awt.color.ColorSpace,float[])
org/apache/xmlgraphics/ps/PSGenerator/establishFallbackRGB(java.lang.StringBuffer,java.awt.Color)#org/apache/commons/logging/Log/debug(java.lang.Object)
org/apache/xmlgraphics/ps/PSGenerator/establishFallbackRGB(java.lang.StringBuffer,java.awt.Color)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/ps/PSGenerator/establishFallbackRGB(java.lang.StringBuffer,java.awt.Color)#java/awt/Color/getColorSpace()
org/apache/xmlgraphics/ps/PSGenerator/establishFallbackRGB(java.lang.StringBuffer,java.awt.Color)#org/apache/commons/logging/Log/isDebugEnabled()
org/apache/xmlgraphics/ps/PSGenerator/establishFallbackRGB(java.lang.StringBuffer,java.awt.Color)#java/awt/color/ColorSpace/getInstance(int)
org/apache/xmlgraphics/ps/PSGenerator/establishFallbackRGB(java.lang.StringBuffer,java.awt.Color)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/ps/PSGenerator/establishFallbackRGB(java.lang.StringBuffer,java.awt.Color)#java/awt/color/ColorSpace/isCS_sRGB()
org/apache/xmlgraphics/ps/PSGenerator/establishFallbackRGB(java.lang.StringBuffer,java.awt.Color)#java/lang/StringBuilder/append(java.lang.Object)
org/apache/xmlgraphics/ps/PSGenerator/establishFallbackRGB(java.lang.StringBuffer,java.awt.Color)#java/lang/AssertionError/AssertionError()
org/apache/xmlgraphics/ps/PSGenerator/establishFallbackRGB(java.lang.StringBuffer,java.awt.Color)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/ps/PSGenerator/establishFallbackRGB(java.lang.StringBuffer,java.awt.Color)#java/awt/Color/getColorComponents(float[])
org/apache/xmlgraphics/ps/PSGenerator/writeDSCComment(java.lang.String,java.lang.Object[])#java/lang/Object/toString()
org/apache/xmlgraphics/ps/PSGenerator/writeDSCComment(java.lang.String,java.lang.Object[])#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/ps/PSGenerator/writeDSCComment(java.lang.String,java.lang.Object[])#java/lang/StringBuffer/append(java.lang.Object)
org/apache/xmlgraphics/ps/PSGenerator/writeDSCComment(java.lang.String,java.lang.Object[])#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/ps/PSGenerator/writeDSCComment(java.lang.String,java.lang.Object[])#java/text/SimpleDateFormat/SimpleDateFormat(java.lang.String)
org/apache/xmlgraphics/ps/PSGenerator/writeDSCComment(java.lang.String,java.lang.Object[])#java/lang/StringBuffer/append(java.lang.String)
org/apache/xmlgraphics/ps/PSGenerator/writeDSCComment(java.lang.String,java.lang.Object[])#java/lang/Double/doubleValue()
org/apache/xmlgraphics/ps/PSGenerator/writeDSCComment(java.lang.String,java.lang.Object[])#java/lang/Class/getName()
org/apache/xmlgraphics/ps/PSGenerator/writeDSCComment(java.lang.String,java.lang.Object[])#java/lang/StringBuffer/toString()
org/apache/xmlgraphics/ps/PSGenerator/writeDSCComment(java.lang.String,java.lang.Object[])#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/apache/xmlgraphics/ps/PSGenerator/writeDSCComment(java.lang.String,java.lang.Object[])#java/lang/Object/getClass()
org/apache/xmlgraphics/ps/PSGenerator/writeDSCComment(java.lang.String,java.lang.Object[])#java/text/DateFormat/format(java.util.Date)
org/apache/xmlgraphics/ps/PSGenerator/writeDSCComment(java.lang.String,java.lang.Object[])#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/ps/PSGenerator/writeDSCComment(java.lang.String,java.lang.Object[])#java/lang/StringBuffer/setLength(int)
org/apache/xmlgraphics/image/codec/png/PNGImage/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGChunk)#java/util/zip/Inflater/Inflater()
org/apache/xmlgraphics/image/codec/png/PNGImage/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGChunk)#java/lang/String/toLowerCase()
org/apache/xmlgraphics/image/codec/png/PNGImage/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGChunk)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/codec/png/PNGImage/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGChunk)#java/util/Collections/enumeration(java.util.Collection)
org/apache/xmlgraphics/image/codec/png/PNGImage/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGChunk)#java/awt/image/IndexColorModel/IndexColorModel(int,int,byte[],byte[],byte[],byte[])
org/apache/xmlgraphics/image/codec/png/PNGImage/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGChunk)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/codec/png/PNGImage/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGChunk)#java/lang/StringBuilder/append(char)
org/apache/xmlgraphics/image/codec/png/PNGImage/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGChunk)#java/util/List/get(int)
org/apache/xmlgraphics/image/codec/png/PNGImage/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGChunk)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/codec/png/PNGImage/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGChunk)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/apache/xmlgraphics/image/codec/png/PNGImage/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGChunk)#java/io/SequenceInputStream/SequenceInputStream(java.util.Enumeration)
org/apache/xmlgraphics/image/codec/png/PNGImage/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGChunk)#java/awt/image/WritableRaster/getSampleModel()
org/apache/xmlgraphics/image/codec/png/PNGImage/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGChunk)#java/lang/StringBuilder/append(int)
org/apache/xmlgraphics/image/codec/png/PNGImage/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGChunk)#java/awt/image/IndexColorModel/IndexColorModel(int,int,byte[],byte[],byte[])
org/apache/xmlgraphics/image/codec/png/PNGImage/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGChunk)#java/util/List/size()
org/apache/xmlgraphics/image/codec/png/PNGImage/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGChunk)#java/io/DataInputStream/DataInputStream(java.io.InputStream)
org/apache/xmlgraphics/image/codec/png/PNGImage/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGChunk)#java/util/zip/InflaterInputStream/InflaterInputStream(java.io.InputStream,java.util.zip.Inflater)
org/apache/xmlgraphics/image/codec/png/PNGImage/decodePass(java.awt.image.WritableRaster,int,int,int,int,int,int)#java/awt/image/DataBuffer/getDataType()
org/apache/xmlgraphics/image/codec/png/PNGImage/decodePass(java.awt.image.WritableRaster,int,int,int,int,int,int)#java/awt/image/DataBufferUShort/getData()
org/apache/xmlgraphics/image/codec/png/PNGImage/decodePass(java.awt.image.WritableRaster,int,int,int,int,int,int)#java/lang/Exception/printStackTrace()
org/apache/xmlgraphics/image/codec/png/PNGImage/decodePass(java.awt.image.WritableRaster,int,int,int,int,int,int)#java/lang/RuntimeException/RuntimeException(java.lang.String)
org/apache/xmlgraphics/image/codec/png/PNGImage/decodePass(java.awt.image.WritableRaster,int,int,int,int,int,int)#java/awt/image/WritableRaster/getDataBuffer()
org/apache/xmlgraphics/image/codec/png/PNGImage/decodePass(java.awt.image.WritableRaster,int,int,int,int,int,int)#java/awt/image/DataBufferByte/getData()
org/apache/xmlgraphics/image/codec/png/PNGImage/decodePass(java.awt.image.WritableRaster,int,int,int,int,int,int)#java/io/DataInputStream/readFully(byte[],int,int)
org/apache/xmlgraphics/image/codec/png/PNGImage/decodePass(java.awt.image.WritableRaster,int,int,int,int,int,int)#java/io/DataInputStream/read()
org/apache/xmlgraphics/image/codec/png/PNGImage/decodePass(java.awt.image.WritableRaster,int,int,int,int,int,int)#java/lang/System/arraycopy(java.lang.Object,int,java.lang.Object,int,int)
org/apache/xmlgraphics/image/writer/imageio/ImageIOTIFFImageWriter/createResolutionField(int,java.lang.String,org.apache.xmlgraphics.image.writer.ImageWriterParams)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/writer/imageio/ImageIOTIFFImageWriter/createResolutionField(int,java.lang.String,org.apache.xmlgraphics.image.writer.ImageWriterParams)#java/lang/StringBuilder/append(int)
org/apache/xmlgraphics/image/writer/imageio/ImageIOTIFFImageWriter/createResolutionField(int,java.lang.String,org.apache.xmlgraphics.image.writer.ImageWriterParams)#java/lang/Integer/toString(int)
org/apache/xmlgraphics/image/writer/imageio/ImageIOTIFFImageWriter/createResolutionField(int,java.lang.String,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/metadata/IIOMetadataNode/appendChild(org.w3c.dom.Node)
org/apache/xmlgraphics/image/writer/imageio/ImageIOTIFFImageWriter/createResolutionField(int,java.lang.String,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/metadata/IIOMetadataNode/setAttribute(java.lang.String,java.lang.String)
org/apache/xmlgraphics/image/writer/imageio/ImageIOTIFFImageWriter/createResolutionField(int,java.lang.String,org.apache.xmlgraphics.image.writer.ImageWriterParams)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/writer/imageio/ImageIOTIFFImageWriter/createResolutionField(int,java.lang.String,org.apache.xmlgraphics.image.writer.ImageWriterParams)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/writer/imageio/ImageIOTIFFImageWriter/createResolutionField(int,java.lang.String,org.apache.xmlgraphics.image.writer.ImageWriterParams)#java/lang/Integer/floatValue()
org/apache/xmlgraphics/image/writer/imageio/ImageIOTIFFImageWriter/createResolutionField(int,java.lang.String,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/metadata/IIOMetadataNode/IIOMetadataNode(java.lang.String)
org/apache/xmlgraphics/image/writer/imageio/ImageIOTIFFImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/writer/imageio/ImageIOTIFFImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/metadata/IIOMetadata/getNativeMetadataFormatName()
org/apache/xmlgraphics/image/writer/imageio/ImageIOTIFFImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#java/lang/String/equals(java.lang.Object)
org/apache/xmlgraphics/image/writer/imageio/ImageIOTIFFImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/metadata/IIOMetadataNode/appendChild(org.w3c.dom.Node)
org/apache/xmlgraphics/image/writer/imageio/ImageIOTIFFImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#java/lang/RuntimeException/RuntimeException(java.lang.String,java.lang.Throwable)
org/apache/xmlgraphics/image/writer/imageio/ImageIOTIFFImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/metadata/IIOMetadata/mergeTree(java.lang.String,org.w3c.dom.Node)
org/apache/xmlgraphics/image/writer/imageio/ImageIOTIFFImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/metadata/IIOMetadataNode/setAttribute(java.lang.String,java.lang.String)
org/apache/xmlgraphics/image/writer/imageio/ImageIOTIFFImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/writer/imageio/ImageIOTIFFImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#org/apache/xmlgraphics/image/writer/imageio/ImageIOTIFFImageWriter/getChildNode(org.w3c.dom.Node,java.lang.String)
org/apache/xmlgraphics/image/writer/imageio/ImageIOTIFFImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#java/lang/Integer/toString(int)
org/apache/xmlgraphics/image/writer/imageio/ImageIOTIFFImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/metadata/IIOInvalidTreeException/getMessage()
org/apache/xmlgraphics/image/writer/imageio/ImageIOTIFFImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/writer/imageio/ImageIOTIFFImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/metadata/IIOMetadataNode/IIOMetadataNode(java.lang.String)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#org/apache/commons/logging/Log/debug(java.lang.Object)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/awt/image/RenderedImage/copyData(java.awt.image.WritableRaster)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/awt/Color/Color(int,int,int)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#org/apache/commons/logging/Log/warn(java.lang.Object)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/awt/image/BufferedImage/BufferedImage(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/awt/image/RenderedImage/getSampleModel()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/awt/image/ColorModel/getTransferType()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#javax/imageio/ImageReader/dispose()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/awt/image/Raster/createWritableRaster(java.awt.image.SampleModel,java.awt.Point)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/awt/image/ComponentColorModel/ComponentColorModel(java.awt.color.ColorSpace,boolean,boolean,int,int)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/util/Iterator/hasNext()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#javax/imageio/ImageReader/read(int,javax.imageio.ImageReadParam)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/lang/StringBuilder/append(int)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/lang/String/length()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/util/Map/get(java.lang.Object)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/awt/image/ColorModel/getNumColorComponents()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#org/w3c/dom/Element/getAttribute(java.lang.String)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#javax/imageio/ImageReader/setInput(java.lang.Object,boolean,boolean)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#javax/imageio/ImageReader/getDefaultReadParam()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/util/Iterator/next()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#javax/imageio/metadata/IIOMetadata/isStandardMetadataFormatSupported()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#javax/imageio/metadata/IIOMetadata/getAsTree(java.lang.String)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#javax/imageio/ImageReader/getImageMetadata(int)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/awt/image/ColorModel/getTransparency()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/awt/image/ColorModel/isAlphaPremultiplied()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#javax/imageio/stream/ImageInputStream/reset()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/awt/image/ColorModel/hasAlpha()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#javax/imageio/IIOException/getMessage()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/lang/Integer/parseInt(java.lang.String)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#javax/imageio/ImageReader/getOriginatingProvider()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/util/StringTokenizer/nextToken()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/lang/StringBuilder/append(java.lang.Object)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/awt/color/ICC_ColorSpace/ICC_ColorSpace(java.awt.color.ICC_Profile)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/awt/image/RenderedImage/getColorModel()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/util/StringTokenizer/StringTokenizer(java.lang.String)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#javax/imageio/stream/ImageInputStream/mark()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#javax/imageio/ImageIO/getImageReaders(java.lang.Object)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/getFallbackBufferedImage(javax.imageio.ImageReader,int,javax.imageio.ImageReadParam)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/getFallbackBufferedImage(javax.imageio.ImageReader,int,javax.imageio.ImageReadParam)#java/lang/UnsupportedOperationException/UnsupportedOperationException(java.lang.String)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/getFallbackBufferedImage(javax.imageio.ImageReader,int,javax.imageio.ImageReadParam)#java/awt/image/WritableRaster/setRect(java.awt.image.Raster)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/getFallbackBufferedImage(javax.imageio.ImageReader,int,javax.imageio.ImageReadParam)#java/awt/image/Raster/getHeight()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/getFallbackBufferedImage(javax.imageio.ImageReader,int,javax.imageio.ImageReadParam)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/getFallbackBufferedImage(javax.imageio.ImageReader,int,javax.imageio.ImageReadParam)#javax/imageio/ImageReader/readRaster(int,javax.imageio.ImageReadParam)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/getFallbackBufferedImage(javax.imageio.ImageReader,int,javax.imageio.ImageReadParam)#java/awt/image/BufferedImage/BufferedImage(int,int,int)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/getFallbackBufferedImage(javax.imageio.ImageReader,int,javax.imageio.ImageReadParam)#java/awt/image/BufferedImage/getRaster()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/getFallbackBufferedImage(javax.imageio.ImageReader,int,javax.imageio.ImageReadParam)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/getFallbackBufferedImage(javax.imageio.ImageReader,int,javax.imageio.ImageReadParam)#java/awt/image/Raster/getNumBands()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/getFallbackBufferedImage(javax.imageio.ImageReader,int,javax.imageio.ImageReadParam)#java/lang/StringBuilder/append(int)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/getFallbackBufferedImage(javax.imageio.ImageReader,int,javax.imageio.ImageReadParam)#java/awt/image/Raster/getWidth()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/checkProviderIgnoresICC(javax.imageio.spi.IIOServiceProvider)#org/apache/commons/logging/Log/debug(java.lang.Object)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/checkProviderIgnoresICC(javax.imageio.spi.IIOServiceProvider)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/checkProviderIgnoresICC(javax.imageio.spi.IIOServiceProvider)#java/lang/StringBuffer/append(char)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/checkProviderIgnoresICC(javax.imageio.spi.IIOServiceProvider)#java/lang/StringBuffer/toString()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/checkProviderIgnoresICC(javax.imageio.spi.IIOServiceProvider)#java/util/Set/contains(java.lang.Object)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/checkProviderIgnoresICC(javax.imageio.spi.IIOServiceProvider)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/checkProviderIgnoresICC(javax.imageio.spi.IIOServiceProvider)#javax/imageio/spi/IIOServiceProvider/getVendorName()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/checkProviderIgnoresICC(javax.imageio.spi.IIOServiceProvider)#javax/imageio/spi/IIOServiceProvider/getDescription(java.util.Locale)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/checkProviderIgnoresICC(javax.imageio.spi.IIOServiceProvider)#java/lang/StringBuffer/StringBuffer(java.lang.String)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/checkProviderIgnoresICC(javax.imageio.spi.IIOServiceProvider)#java/lang/StringBuffer/append(java.lang.String)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/checkProviderIgnoresICC(javax.imageio.spi.IIOServiceProvider)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/checkProviderIgnoresICC(javax.imageio.spi.IIOServiceProvider)#org/apache/commons/logging/Log/isDebugEnabled()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/checkProviderIgnoresICC(javax.imageio.spi.IIOServiceProvider)#javax/imageio/spi/IIOServiceProvider/getVersion()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/tryToExctractICCProfileFromPNGMetadataNode(org.w3c.dom.Element)#java/util/zip/Inflater/inflate(byte[])
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/tryToExctractICCProfileFromPNGMetadataNode(org.w3c.dom.Element)#javax/imageio/metadata/IIOMetadataNode/getAttribute(java.lang.String)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/tryToExctractICCProfileFromPNGMetadataNode(org.w3c.dom.Element)#java/util/zip/Inflater/setInput(byte[])
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/tryToExctractICCProfileFromPNGMetadataNode(org.w3c.dom.Element)#java/io/ByteArrayOutputStream/toByteArray()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/tryToExctractICCProfileFromPNGMetadataNode(org.w3c.dom.Element)#java/io/ByteArrayOutputStream/ByteArrayOutputStream()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/tryToExctractICCProfileFromPNGMetadataNode(org.w3c.dom.Element)#java/util/zip/Inflater/end()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/tryToExctractICCProfileFromPNGMetadataNode(org.w3c.dom.Element)#java/lang/String/equalsIgnoreCase(java.lang.String)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/tryToExctractICCProfileFromPNGMetadataNode(org.w3c.dom.Element)#org/apache/commons/logging/Log/debug(java.lang.Object,java.lang.Throwable)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/tryToExctractICCProfileFromPNGMetadataNode(org.w3c.dom.Element)#org/apache/commons/logging/Log/debug(java.lang.Object)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/tryToExctractICCProfileFromPNGMetadataNode(org.w3c.dom.Element)#java/util/zip/Inflater/Inflater()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/tryToExctractICCProfileFromPNGMetadataNode(org.w3c.dom.Element)#java/util/zip/Inflater/finished()
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/tryToExctractICCProfileFromPNGMetadataNode(org.w3c.dom.Element)#java/io/ByteArrayOutputStream/write(byte[],int,int)
org/apache/xmlgraphics/image/loader/impl/imageio/ImageLoaderImageIO/tryToExctractICCProfileFromPNGMetadataNode(org.w3c.dom.Element)#javax/imageio/metadata/IIOMetadataNode/getUserObject()
org/apache/xmlgraphics/util/Service/getProviderNames(java.lang.Class,java.lang.ClassLoader)#java/util/ArrayList/ArrayList()
org/apache/xmlgraphics/util/Service/getProviderNames(java.lang.Class,java.lang.ClassLoader)#java/lang/String/trim()
org/apache/xmlgraphics/util/Service/getProviderNames(java.lang.Class,java.lang.ClassLoader)#java/lang/String/length()
org/apache/xmlgraphics/util/Service/getProviderNames(java.lang.Class,java.lang.ClassLoader)#java/io/InputStreamReader/InputStreamReader(java.io.InputStream,java.lang.String)
org/apache/xmlgraphics/util/Service/getProviderNames(java.lang.Class,java.lang.ClassLoader)#java/lang/String/substring(int,int)
org/apache/xmlgraphics/util/Service/getProviderNames(java.lang.Class,java.lang.ClassLoader)#org/apache/commons/io/IOUtils/closeQuietly(java.io.Reader)
org/apache/xmlgraphics/util/Service/getProviderNames(java.lang.Class,java.lang.ClassLoader)#java/util/Enumeration/hasMoreElements()
org/apache/xmlgraphics/util/Service/getProviderNames(java.lang.Class,java.lang.ClassLoader)#java/lang/ClassLoader/getResources(java.lang.String)
org/apache/xmlgraphics/util/Service/getProviderNames(java.lang.Class,java.lang.ClassLoader)#java/util/Enumeration/nextElement()
org/apache/xmlgraphics/util/Service/getProviderNames(java.lang.Class,java.lang.ClassLoader)#java/net/URL/openStream()
org/apache/xmlgraphics/util/Service/getProviderNames(java.lang.Class,java.lang.ClassLoader)#org/apache/commons/io/IOUtils/closeQuietly(java.io.InputStream)
org/apache/xmlgraphics/util/Service/getProviderNames(java.lang.Class,java.lang.ClassLoader)#java/util/List/add(java.lang.Object)
org/apache/xmlgraphics/util/Service/getProviderNames(java.lang.Class,java.lang.ClassLoader)#java/io/BufferedReader/BufferedReader(java.io.Reader)
org/apache/xmlgraphics/util/Service/getProviderNames(java.lang.Class,java.lang.ClassLoader)#java/io/BufferedReader/readLine()
org/apache/xmlgraphics/util/Service/getProviderNames(java.lang.Class,java.lang.ClassLoader)#java/lang/String/indexOf(int)
org/apache/xmlgraphics/util/Service/providers(java.lang.Class)#java/util/Map/get(java.lang.Object)
org/apache/xmlgraphics/util/Service/providers(java.lang.Class)#java/util/Iterator/next()
org/apache/xmlgraphics/util/Service/providers(java.lang.Class)#java/lang/ClassLoader/loadClass(java.lang.String)
org/apache/xmlgraphics/util/Service/providers(java.lang.Class)#java/util/List/add(java.lang.Object)
org/apache/xmlgraphics/util/Service/providers(java.lang.Class)#java/util/List/iterator()
org/apache/xmlgraphics/util/Service/providers(java.lang.Class)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/apache/xmlgraphics/util/Service/providers(java.lang.Class)#java/util/ArrayList/ArrayList()
org/apache/xmlgraphics/util/Service/providers(java.lang.Class)#java/util/Iterator/hasNext()
org/apache/xmlgraphics/util/Service/providers(java.lang.Class)#java/lang/Class/newInstance()
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/buildICCProfile(org.apache.xmlgraphics.image.loader.ImageInfo,java.awt.color.ColorSpace,org.apache.commons.io.output.ByteArrayOutputStream)#java/lang/Object/toString()
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/buildICCProfile(org.apache.xmlgraphics.image.loader.ImageInfo,java.awt.color.ColorSpace,org.apache.commons.io.output.ByteArrayOutputStream)#java/io/IOException/IOException(java.lang.String)
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/buildICCProfile(org.apache.xmlgraphics.image.loader.ImageInfo,java.awt.color.ColorSpace,org.apache.commons.io.output.ByteArrayOutputStream)#org/apache/commons/logging/Log/warn(java.lang.Object)
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/buildICCProfile(org.apache.xmlgraphics.image.loader.ImageInfo,java.awt.color.ColorSpace,org.apache.commons.io.output.ByteArrayOutputStream)#java/io/IOException/getMessage()
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/buildICCProfile(org.apache.xmlgraphics.image.loader.ImageInfo,java.awt.color.ColorSpace,org.apache.commons.io.output.ByteArrayOutputStream)#org/apache/commons/io/output/ByteArrayOutputStream/write(byte[])
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/buildICCProfile(org.apache.xmlgraphics.image.loader.ImageInfo,java.awt.color.ColorSpace,org.apache.commons.io.output.ByteArrayOutputStream)#org/apache/commons/io/output/ByteArrayOutputStream/toByteArray()
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/buildICCProfile(org.apache.xmlgraphics.image.loader.ImageInfo,java.awt.color.ColorSpace,org.apache.commons.io.output.ByteArrayOutputStream)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/buildICCProfile(org.apache.xmlgraphics.image.loader.ImageInfo,java.awt.color.ColorSpace,org.apache.commons.io.output.ByteArrayOutputStream)#org/apache/commons/io/output/ByteArrayOutputStream/size()
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/buildICCProfile(org.apache.xmlgraphics.image.loader.ImageInfo,java.awt.color.ColorSpace,org.apache.commons.io.output.ByteArrayOutputStream)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/buildICCProfile(org.apache.xmlgraphics.image.loader.ImageInfo,java.awt.color.ColorSpace,org.apache.commons.io.output.ByteArrayOutputStream)#java/awt/color/ColorSpace/getNumComponents()
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/buildICCProfile(org.apache.xmlgraphics.image.loader.ImageInfo,java.awt.color.ColorSpace,org.apache.commons.io.output.ByteArrayOutputStream)#org/apache/commons/logging/Log/debug(java.lang.Object)
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/buildICCProfile(org.apache.xmlgraphics.image.loader.ImageInfo,java.awt.color.ColorSpace,org.apache.commons.io.output.ByteArrayOutputStream)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/buildICCProfile(org.apache.xmlgraphics.image.loader.ImageInfo,java.awt.color.ColorSpace,org.apache.commons.io.output.ByteArrayOutputStream)#java/awt/color/ICC_Profile/getNumComponents()
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/buildICCProfile(org.apache.xmlgraphics.image.loader.ImageInfo,java.awt.color.ColorSpace,org.apache.commons.io.output.ByteArrayOutputStream)#java/lang/StringBuilder/append(int)
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/buildICCProfile(org.apache.xmlgraphics.image.loader.ImageInfo,java.awt.color.ColorSpace,org.apache.commons.io.output.ByteArrayOutputStream)#java/lang/IllegalArgumentException/getMessage()
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/buildICCProfile(org.apache.xmlgraphics.image.loader.ImageInfo,java.awt.color.ColorSpace,org.apache.commons.io.output.ByteArrayOutputStream)#org/apache/commons/logging/Log/isDebugEnabled()
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#org/apache/commons/logging/Log/debug(java.lang.Object)
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#javax/imageio/stream/ImageInputStream/readUnsignedByte()
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#javax/imageio/stream/ImageInputStream/skipBytes(int)
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#org/apache/commons/io/output/ByteArrayOutputStream/write(byte[])
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#javax/imageio/stream/ImageInputStream/reset()
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/awt/color/ColorSpace/getType()
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/lang/StringBuilder/append(int)
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/io/DataInputStream/readInt()
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/io/ByteArrayInputStream/ByteArrayInputStream(byte[])
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#org/apache/commons/logging/Log/isDebugEnabled()
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/io/DataInputStream/DataInputStream(java.io.InputStream)
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#javax/imageio/stream/ImageInputStream/readFully(byte[])
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/lang/Integer/toHexString(int)
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/lang/String/String(byte[],java.lang.String)
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/awt/color/ColorSpace/getInstance(int)
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/lang/String/equals(java.lang.Object)
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#org/apache/commons/logging/Log/trace(java.lang.Object)
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#org/apache/commons/io/output/ByteArrayOutputStream/ByteArrayOutputStream()
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/ignoreColorProfile(java.util.Map)
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/lang/StringBuilder/append(java.lang.Object)
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#org/apache/commons/logging/Log/isTraceEnabled()
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawJPEG/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#javax/imageio/stream/ImageInputStream/mark()
org/apache/xmlgraphics/java2d/ps/PSTilingPattern/toString()#java/awt/geom/Rectangle2D/getY()
org/apache/xmlgraphics/java2d/ps/PSTilingPattern/toString()#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/java2d/ps/PSTilingPattern/toString()#java/lang/StringBuilder/append(int)
org/apache/xmlgraphics/java2d/ps/PSTilingPattern/toString()#java/awt/image/BufferedImage/getRGB(int,int,int,int,int[],int,int)
org/apache/xmlgraphics/java2d/ps/PSTilingPattern/toString()#java/lang/StringBuffer/length()
org/apache/xmlgraphics/java2d/ps/PSTilingPattern/toString()#java/lang/Integer/toHexString(int)
org/apache/xmlgraphics/java2d/ps/PSTilingPattern/toString()#java/awt/image/BufferedImage/getWidth()
org/apache/xmlgraphics/java2d/ps/PSTilingPattern/toString()#java/lang/StringBuffer/StringBuffer(java.lang.String)
org/apache/xmlgraphics/java2d/ps/PSTilingPattern/toString()#java/lang/StringBuilder/append(double)
org/apache/xmlgraphics/java2d/ps/PSTilingPattern/toString()#java/awt/geom/Rectangle2D/getWidth()
org/apache/xmlgraphics/java2d/ps/PSTilingPattern/toString()#java/awt/TexturePaint/getImage()
org/apache/xmlgraphics/java2d/ps/PSTilingPattern/toString()#java/awt/image/BufferedImage/getHeight()
org/apache/xmlgraphics/java2d/ps/PSTilingPattern/toString()#java/lang/StringBuffer/toString()
org/apache/xmlgraphics/java2d/ps/PSTilingPattern/toString()#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/java2d/ps/PSTilingPattern/toString()#java/lang/StringBuffer/indexOf(java.lang.String)
org/apache/xmlgraphics/java2d/ps/PSTilingPattern/toString()#java/awt/geom/Rectangle2D/getHeight()
org/apache/xmlgraphics/java2d/ps/PSTilingPattern/toString()#java/lang/StringBuffer/substring(int)
org/apache/xmlgraphics/java2d/ps/PSTilingPattern/toString()#java/lang/StringBuffer/append(java.lang.StringBuffer)
org/apache/xmlgraphics/java2d/ps/PSTilingPattern/toString()#java/lang/StringBuffer/append(java.lang.String)
org/apache/xmlgraphics/java2d/ps/PSTilingPattern/toString()#java/lang/StringBuffer/insert(int,java.lang.String)
org/apache/xmlgraphics/java2d/ps/PSTilingPattern/toString()#java/awt/TexturePaint/getAnchorRect()
org/apache/xmlgraphics/java2d/ps/PSTilingPattern/toString()#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/java2d/ps/PSTilingPattern/toString()#java/awt/geom/Rectangle2D/getX()
org/apache/xmlgraphics/image/rendered/AbstractRed/init(java.util.List,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)#java/awt/image/ColorModel/createCompatibleSampleModel(int,int)
org/apache/xmlgraphics/image/rendered/AbstractRed/init(java.util.List,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)#java/util/Vector/addAll(java.util.Collection)
org/apache/xmlgraphics/image/rendered/AbstractRed/init(java.util.List,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)#java/util/Map/putAll(java.util.Map)
org/apache/xmlgraphics/image/rendered/AbstractRed/init(java.util.List,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)#java/util/List/size()
org/apache/xmlgraphics/image/rendered/AbstractRed/init(java.util.List,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)#java/util/HashMap/HashMap()
org/apache/xmlgraphics/image/rendered/AbstractRed/init(java.util.List,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)#java/util/List/get(int)
org/apache/xmlgraphics/image/rendered/AbstractRed/init(java.util.List,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)#org/apache/xmlgraphics/image/rendered/CachableRed/getColorModel()
org/apache/xmlgraphics/image/rendered/AbstractRed/init(java.util.List,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)#java/awt/image/ComponentColorModel/ComponentColorModel(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)
org/apache/xmlgraphics/image/rendered/AbstractRed/init(java.util.List,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)#org/apache/xmlgraphics/image/rendered/CachableRed/getSampleModel()
org/apache/xmlgraphics/image/rendered/AbstractRed/init(java.util.List,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)#java/awt/color/ColorSpace/getInstance(int)
org/apache/xmlgraphics/image/rendered/AbstractRed/init(java.util.List,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)#java/util/Vector/Vector()
org/apache/xmlgraphics/image/rendered/AbstractRed/copyBand(java.awt.image.Raster,int,java.awt.image.WritableRaster,int)#java/awt/image/WritableRaster/setSamples(int,int,int,int,int,int[])
org/apache/xmlgraphics/image/rendered/AbstractRed/copyBand(java.awt.image.Raster,int,java.awt.image.WritableRaster,int)#java/awt/Rectangle/intersection(java.awt.Rectangle)
org/apache/xmlgraphics/image/rendered/AbstractRed/copyBand(java.awt.image.Raster,int,java.awt.image.WritableRaster,int)#java/awt/Rectangle/Rectangle(int,int,int,int)
org/apache/xmlgraphics/image/rendered/AbstractRed/copyBand(java.awt.image.Raster,int,java.awt.image.WritableRaster,int)#java/awt/image/WritableRaster/getWidth()
org/apache/xmlgraphics/image/rendered/AbstractRed/copyBand(java.awt.image.Raster,int,java.awt.image.WritableRaster,int)#java/awt/image/Raster/getWidth()
org/apache/xmlgraphics/image/rendered/AbstractRed/copyBand(java.awt.image.Raster,int,java.awt.image.WritableRaster,int)#java/awt/image/WritableRaster/getMinX()
org/apache/xmlgraphics/image/rendered/AbstractRed/copyBand(java.awt.image.Raster,int,java.awt.image.WritableRaster,int)#java/awt/image/Raster/getMinX()
org/apache/xmlgraphics/image/rendered/AbstractRed/copyBand(java.awt.image.Raster,int,java.awt.image.WritableRaster,int)#java/awt/image/WritableRaster/getMinY()
org/apache/xmlgraphics/image/rendered/AbstractRed/copyBand(java.awt.image.Raster,int,java.awt.image.WritableRaster,int)#java/awt/image/Raster/getHeight()
org/apache/xmlgraphics/image/rendered/AbstractRed/copyBand(java.awt.image.Raster,int,java.awt.image.WritableRaster,int)#java/awt/image/WritableRaster/getHeight()
org/apache/xmlgraphics/image/rendered/AbstractRed/copyBand(java.awt.image.Raster,int,java.awt.image.WritableRaster,int)#java/awt/image/Raster/getSamples(int,int,int,int,int,int[])
org/apache/xmlgraphics/image/rendered/AbstractRed/copyBand(java.awt.image.Raster,int,java.awt.image.WritableRaster,int)#java/awt/image/Raster/getMinY()
org/apache/xmlgraphics/image/rendered/AbstractRed/makeTile(int,int)#java/awt/image/Raster/createWritableRaster(java.awt.image.SampleModel,java.awt.Point)
org/apache/xmlgraphics/image/rendered/AbstractRed/makeTile(int,int)#java/awt/image/WritableRaster/createWritableChild(int,int,int,int,int,int,int[])
org/apache/xmlgraphics/image/rendered/AbstractRed/makeTile(int,int)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/rendered/AbstractRed/makeTile(int,int)#java/lang/IndexOutOfBoundsException/IndexOutOfBoundsException(java.lang.String)
org/apache/xmlgraphics/image/rendered/AbstractRed/makeTile(int,int)#java/awt/Point/Point(int,int)
org/apache/xmlgraphics/image/rendered/AbstractRed/makeTile(int,int)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/rendered/AbstractRed/makeTile(int,int)#java/lang/StringBuilder/append(char)
org/apache/xmlgraphics/image/rendered/AbstractRed/makeTile(int,int)#java/awt/image/WritableRaster/getMinX()
org/apache/xmlgraphics/image/rendered/AbstractRed/makeTile(int,int)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/rendered/AbstractRed/makeTile(int,int)#java/lang/StringBuilder/append(int)
org/apache/xmlgraphics/image/rendered/AbstractRed/makeTile(int,int)#java/awt/image/WritableRaster/getWidth()
org/apache/xmlgraphics/image/rendered/AbstractRed/makeTile(int,int)#java/awt/image/WritableRaster/getMinY()
org/apache/xmlgraphics/image/rendered/AbstractRed/makeTile(int,int)#java/awt/image/WritableRaster/getHeight()
org/apache/xmlgraphics/image/rendered/AbstractRed/init(org.apache.xmlgraphics.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)#java/awt/image/ColorModel/createCompatibleSampleModel(int,int)
org/apache/xmlgraphics/image/rendered/AbstractRed/init(org.apache.xmlgraphics.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)#java/util/Map/putAll(java.util.Map)
org/apache/xmlgraphics/image/rendered/AbstractRed/init(org.apache.xmlgraphics.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)#java/util/HashMap/HashMap()
org/apache/xmlgraphics/image/rendered/AbstractRed/init(org.apache.xmlgraphics.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)#java/awt/color/ColorSpace/getInstance(int)
org/apache/xmlgraphics/image/rendered/AbstractRed/init(org.apache.xmlgraphics.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)#java/util/Vector/Vector(int)
org/apache/xmlgraphics/image/rendered/AbstractRed/init(org.apache.xmlgraphics.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)#org/apache/xmlgraphics/image/rendered/CachableRed/getColorModel()
org/apache/xmlgraphics/image/rendered/AbstractRed/init(org.apache.xmlgraphics.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)#java/util/Vector/add(java.lang.Object)
org/apache/xmlgraphics/image/rendered/AbstractRed/init(org.apache.xmlgraphics.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)#java/awt/image/ComponentColorModel/ComponentColorModel(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)
org/apache/xmlgraphics/image/rendered/AbstractRed/init(org.apache.xmlgraphics.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)#org/apache/xmlgraphics/image/rendered/CachableRed/getSampleModel()
org/apache/xmlgraphics/ps/dsc/events/AbstractResourceDSCComment/parseValue(java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/ps/dsc/events/AbstractResourceDSCComment/parseValue(java.lang.String)#java/util/Iterator/next()
org/apache/xmlgraphics/ps/dsc/events/AbstractResourceDSCComment/parseValue(java.lang.String)#java/lang/String/equals(java.lang.Object)
org/apache/xmlgraphics/ps/dsc/events/AbstractResourceDSCComment/parseValue(java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/ps/dsc/events/AbstractResourceDSCComment/parseValue(java.lang.String)#org/apache/xmlgraphics/ps/dsc/events/AbstractResourceDSCComment/splitParams(java.lang.String)
org/apache/xmlgraphics/ps/dsc/events/AbstractResourceDSCComment/parseValue(java.lang.String)#java/lang/Integer/parseInt(java.lang.String)
org/apache/xmlgraphics/ps/dsc/events/AbstractResourceDSCComment/parseValue(java.lang.String)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/apache/xmlgraphics/ps/dsc/events/AbstractResourceDSCComment/parseValue(java.lang.String)#java/util/List/iterator()
org/apache/xmlgraphics/ps/dsc/events/AbstractResourceDSCComment/parseValue(java.lang.String)#java/lang/Float/parseFloat(java.lang.String)
org/apache/xmlgraphics/ps/dsc/events/AbstractResourceDSCComment/parseValue(java.lang.String)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/applyLut_INT(java.awt.image.WritableRaster,int[])#java/awt/image/DataBufferInt/getOffset()
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/applyLut_INT(java.awt.image.WritableRaster,int[])#java/awt/image/SinglePixelPackedSampleModel/getScanlineStride()
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/applyLut_INT(java.awt.image.WritableRaster,int[])#java/awt/image/WritableRaster/getWidth()
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/applyLut_INT(java.awt.image.WritableRaster,int[])#java/awt/image/WritableRaster/getSampleModelTranslateX()
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/applyLut_INT(java.awt.image.WritableRaster,int[])#java/awt/image/WritableRaster/getSampleModelTranslateY()
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/applyLut_INT(java.awt.image.WritableRaster,int[])#java/awt/image/WritableRaster/getMinX()
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/applyLut_INT(java.awt.image.WritableRaster,int[])#java/awt/image/DataBufferInt/getBankData()
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/applyLut_INT(java.awt.image.WritableRaster,int[])#java/awt/image/WritableRaster/getDataBuffer()
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/applyLut_INT(java.awt.image.WritableRaster,int[])#java/awt/image/SinglePixelPackedSampleModel/getOffset(int,int)
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/applyLut_INT(java.awt.image.WritableRaster,int[])#java/awt/image/WritableRaster/getSampleModel()
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/applyLut_INT(java.awt.image.WritableRaster,int[])#java/awt/image/WritableRaster/getMinY()
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/applyLut_INT(java.awt.image.WritableRaster,int[])#java/awt/image/WritableRaster/getHeight()
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/copyData(java.awt.image.WritableRaster)#org/apache/xmlgraphics/image/rendered/CachableRed/getSampleModel()
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/color/ColorSpace/getNumComponents()
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/copyData(java.awt.image.WritableRaster)#org/apache/xmlgraphics/image/rendered/Any2sRGBRed/getSampleModel()
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/SampleModel/getNumBands()
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getBounds()
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/BufferedImage/getRaster()
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/copyData(java.awt.image.WritableRaster)#org/apache/xmlgraphics/image/rendered/Any2sRGBRed/copyBand(java.awt.image.Raster,int,java.awt.image.WritableRaster,int)
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/BandCombineOp/filter(java.awt.image.Raster,java.awt.image.WritableRaster)
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/color/ColorSpace/getInstance(int)
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/copyData(java.awt.image.WritableRaster)#java/util/Vector/get(int)
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/ColorModel/hasAlpha()
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/copyData(java.awt.image.WritableRaster)#org/apache/xmlgraphics/image/rendered/CachableRed/getColorModel()
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/copyData(java.awt.image.WritableRaster)#org/apache/xmlgraphics/image/rendered/Any2sRGBRed/getSources()
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/ColorModel/getColorSpace()
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/copyData(java.awt.image.WritableRaster)#java/lang/Throwable/printStackTrace()
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/copyData(java.awt.image.WritableRaster)#org/apache/xmlgraphics/image/rendered/CachableRed/copyData(java.awt.image.WritableRaster)
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getSampleModel()
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/copyData(java.awt.image.WritableRaster)#org/apache/xmlgraphics/image/rendered/CachableRed/getData(java.awt.Rectangle)
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/createWritableTranslatedChild(int,int)
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/BandCombineOp/BandCombineOp(float[][],java.awt.RenderingHints)
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/BufferedImage/BufferedImage(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/copyData(java.awt.image.WritableRaster)#org/apache/xmlgraphics/image/rendered/Any2sRGBRed/getColorModel()
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/ColorConvertOp/filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)
org/apache/xmlgraphics/image/rendered/Any2sRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/ColorConvertOp/ColorConvertOp(java.awt.color.ColorSpace,java.awt.RenderingHints)
org/apache/xmlgraphics/util/DateFormatUtil/formatDateToParse(java.lang.String,java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/util/DateFormatUtil/formatDateToParse(java.lang.String,java.lang.String)#java/lang/String/length()
org/apache/xmlgraphics/util/DateFormatUtil/formatDateToParse(java.lang.String,java.lang.String)#java/lang/String/substring(int,int)
org/apache/xmlgraphics/util/DateFormatUtil/formatDateToParse(java.lang.String,java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/util/DateFormatUtil/formatDateToParse(java.lang.String,java.lang.String)#java/lang/String/replace(java.lang.CharSequence,java.lang.CharSequence)
org/apache/xmlgraphics/util/DateFormatUtil/formatDateToParse(java.lang.String,java.lang.String)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/apache/xmlgraphics/util/DateFormatUtil/formatDateToParse(java.lang.String,java.lang.String)#java/lang/String/contains(java.lang.CharSequence)
org/apache/xmlgraphics/util/DateFormatUtil/formatDateToParse(java.lang.String,java.lang.String)#java/lang/String/lastIndexOf(java.lang.String)
org/apache/xmlgraphics/util/DateFormatUtil/formatDateToParse(java.lang.String,java.lang.String)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/ps/dsc/DSCParser/parseDSCLine(java.lang.String)#java/lang/String/length()
org/apache/xmlgraphics/ps/dsc/DSCParser/parseDSCLine(java.lang.String)#java/lang/String/equals(java.lang.Object)
org/apache/xmlgraphics/ps/dsc/DSCParser/parseDSCLine(java.lang.String)#java/lang/String/substring(int,int)
org/apache/xmlgraphics/ps/dsc/DSCParser/parseDSCLine(java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/ps/dsc/DSCParser/parseDSCLine(java.lang.String)#java/lang/String/substring(int)
org/apache/xmlgraphics/ps/dsc/DSCParser/parseDSCLine(java.lang.String)#java/io/BufferedReader/mark(int)
org/apache/xmlgraphics/ps/dsc/DSCParser/parseDSCLine(java.lang.String)#java/lang/String/indexOf(int)
org/apache/xmlgraphics/ps/dsc/DSCParser/parseDSCLine(java.lang.String)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/ps/dsc/DSCParser/parseDSCLine(java.lang.String)#java/lang/Object/toString()
org/apache/xmlgraphics/ps/dsc/DSCParser/parseDSCLine(java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/ps/dsc/DSCParser/parseDSCLine(java.lang.String)#java/lang/String/charAt(int)
org/apache/xmlgraphics/ps/dsc/DSCParser/parseDSCLine(java.lang.String)#java/lang/String/trim()
org/apache/xmlgraphics/ps/dsc/DSCParser/parseDSCLine(java.lang.String)#java/io/BufferedReader/reset()
org/apache/xmlgraphics/ps/dsc/DSCParser/parseDSCLine(java.lang.String)#java/lang/String/startsWith(java.lang.String)
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/getImageLoaderFactories(java.lang.String)#java/util/Iterator/hasNext()
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/getImageLoaderFactories(java.lang.String)#java/util/Set/size()
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/getImageLoaderFactories(java.lang.String)#java/util/Set/addAll(java.util.Collection)
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/getImageLoaderFactories(java.lang.String)#java/util/Map/get(java.lang.Object)
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/getImageLoaderFactories(java.lang.String)#java/util/Map/values()
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/getImageLoaderFactories(java.lang.String)#java/util/Iterator/next()
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/getImageLoaderFactories(java.lang.String)#java/util/Set/toArray(java.lang.Object[])
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/getImageLoaderFactories(java.lang.String)#java/util/Collection/iterator()
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/getImageLoaderFactories(java.lang.String)#java/util/HashSet/HashSet()
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/registerPreloader(org.apache.xmlgraphics.image.loader.spi.ImagePreloader)#org/apache/commons/logging/Log/debug(java.lang.Object)
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/registerPreloader(org.apache.xmlgraphics.image.loader.spi.ImagePreloader)#java/lang/StringBuilder/append(int)
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/registerPreloader(org.apache.xmlgraphics.image.loader.spi.ImagePreloader)#org/apache/commons/logging/Log/isDebugEnabled()
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/registerPreloader(org.apache.xmlgraphics.image.loader.spi.ImagePreloader)#java/lang/Class/getName()
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/registerPreloader(org.apache.xmlgraphics.image.loader.spi.ImagePreloader)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/registerPreloader(org.apache.xmlgraphics.image.loader.spi.ImagePreloader)#java/util/List/add(java.lang.Object)
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/registerPreloader(org.apache.xmlgraphics.image.loader.spi.ImagePreloader)#java/lang/Object/getClass()
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/registerPreloader(org.apache.xmlgraphics.image.loader.spi.ImagePreloader)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/registerPreloader(org.apache.xmlgraphics.image.loader.spi.ImagePreloader)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/registerLoaderFactory(org.apache.xmlgraphics.image.loader.spi.ImageLoaderFactory)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/registerLoaderFactory(org.apache.xmlgraphics.image.loader.spi.ImageLoaderFactory)#java/util/HashMap/HashMap()
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/registerLoaderFactory(org.apache.xmlgraphics.image.loader.spi.ImageLoaderFactory)#java/lang/Class/getName()
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/registerLoaderFactory(org.apache.xmlgraphics.image.loader.spi.ImageLoaderFactory)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/registerLoaderFactory(org.apache.xmlgraphics.image.loader.spi.ImageLoaderFactory)#java/util/List/add(java.lang.Object)
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/registerLoaderFactory(org.apache.xmlgraphics.image.loader.spi.ImageLoaderFactory)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/registerLoaderFactory(org.apache.xmlgraphics.image.loader.spi.ImageLoaderFactory)#org/apache/commons/logging/Log/debug(java.lang.Object)
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/registerLoaderFactory(org.apache.xmlgraphics.image.loader.spi.ImageLoaderFactory)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/registerLoaderFactory(org.apache.xmlgraphics.image.loader.spi.ImageLoaderFactory)#java/util/ArrayList/ArrayList()
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/registerLoaderFactory(org.apache.xmlgraphics.image.loader.spi.ImageLoaderFactory)#org/apache/commons/logging/Log/isDebugEnabled()
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/registerLoaderFactory(org.apache.xmlgraphics.image.loader.spi.ImageLoaderFactory)#java/util/Map/get(java.lang.Object)
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/registerLoaderFactory(org.apache.xmlgraphics.image.loader.spi.ImageLoaderFactory)#java/lang/StringBuilder/append(java.lang.Object)
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/registerLoaderFactory(org.apache.xmlgraphics.image.loader.spi.ImageLoaderFactory)#java/lang/Object/getClass()
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/getImageLoaderFactories(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor)#java/util/Map/get(java.lang.Object)
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/getImageLoaderFactories(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor)#java/util/Collection/toArray(java.lang.Object[])
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/getImageLoaderFactories(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor)#java/util/Collection/add(java.lang.Object)
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/getImageLoaderFactories(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor)#java/util/List/iterator()
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/getImageLoaderFactories(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor)#org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry$ImageLoaderFactoryComparator/ImageLoaderFactoryComparator(org.apache.xmlgraphics.image.loader.spi.ImageImplRegistry,org.apache.xmlgraphics.image.loader.ImageFlavor)
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/getImageLoaderFactories(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor)#java/util/Iterator/hasNext()
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/getImageLoaderFactories(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor)#java/util/TreeSet/TreeSet(java.util.Comparator)
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/getImageLoaderFactories(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor)#java/util/List/size()
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/getImageLoaderFactories(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor)#java/util/Collection/size()
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/getImageLoaderFactories(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor)#java/util/Iterator/next()
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/getImageLoaderFactories(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor)#java/util/Map/keySet()
org/apache/xmlgraphics/image/loader/spi/ImageImplRegistry/getImageLoaderFactories(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor)#java/util/Set/iterator()
org/apache/xmlgraphics/java2d/ps/AbstractPSDocumentGraphics2D/startPage()#java/lang/IllegalStateException/IllegalStateException(java.lang.String)
org/apache/xmlgraphics/java2d/ps/AbstractPSDocumentGraphics2D/startPage()#org/apache/xmlgraphics/java2d/ps/AbstractPSDocumentGraphics2D/getClip()
org/apache/xmlgraphics/java2d/ps/AbstractPSDocumentGraphics2D/startPage()#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/java2d/ps/AbstractPSDocumentGraphics2D/startPage()#org/apache/xmlgraphics/java2d/ps/AbstractPSDocumentGraphics2D/setClip(java.awt.Shape)
org/apache/xmlgraphics/java2d/ps/AbstractPSDocumentGraphics2D/startPage()#org/apache/xmlgraphics/java2d/ps/AbstractPSDocumentGraphics2D/setTransform(java.awt.geom.AffineTransform)
org/apache/xmlgraphics/java2d/ps/AbstractPSDocumentGraphics2D/startPage()#org/apache/xmlgraphics/java2d/ps/AbstractPSDocumentGraphics2D/getTransform()
org/apache/xmlgraphics/java2d/ps/AbstractPSDocumentGraphics2D/startPage()#java/awt/geom/AffineTransform/AffineTransform(float,float,float,float,float,float)
org/apache/xmlgraphics/java2d/ps/AbstractPSDocumentGraphics2D/startPage()#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/java2d/ps/AbstractPSDocumentGraphics2D/startPage()#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#org/apache/xmlgraphics/image/rendered/CachableRed/getSampleModel()
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/SinglePixelPackedSampleModel/getDataType()
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/SinglePixelPackedSampleModel/getHeight()
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/SampleModel/getNumBands()
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/SinglePixelPackedSampleModel/getScanlineStride()
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/ColorModel/hasAlpha()
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/BufferedImage/BufferedImage(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/SinglePixelPackedSampleModel/getWidth()
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/getSampleModel()
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/ColorModel/createCompatibleSampleModel(int,int)
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/Raster/createWritableRaster(java.awt.image.SampleModel,java.awt.Point)
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#org/apache/xmlgraphics/image/rendered/CachableRed/copyData(java.awt.image.WritableRaster)
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getSampleModel()
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getBounds()
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/createWritableChild(int,int,int,int,int,int,int[])
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getWidth()
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#org/apache/xmlgraphics/image/rendered/CachableRed/getData(java.awt.Rectangle)
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getSampleModelTranslateX()
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/createWritableTranslatedChild(int,int)
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getSampleModelTranslateY()
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/Point/Point(int,int)
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/BandCombineOp/BandCombineOp(float[][],java.awt.RenderingHints)
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/BandCombineOp/filter(java.awt.image.Raster,java.awt.image.WritableRaster)
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/Raster/createWritableRaster(java.awt.image.SampleModel,java.awt.image.DataBuffer,java.awt.Point)
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#java/util/Vector/get(int)
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/ColorModel/isAlphaPremultiplied()
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyBand(java.awt.image.Raster,int,java.awt.image.WritableRaster,int)
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getMinX()
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/SinglePixelPackedSampleModel/getBitMasks()
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getMinY()
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/getSources()
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/SinglePixelPackedSampleModel/SinglePixelPackedSampleModel(int,int,int,int,int[])
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getHeight()
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#org/apache/xmlgraphics/image/rendered/CachableRed/getColorModel()
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/ColorConvertOp/ColorConvertOp(java.awt.RenderingHints)
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/getColorModel()
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getDataBuffer()
org/apache/xmlgraphics/image/rendered/Any2LsRGBRed/copyData(java.awt.image.WritableRaster)#java/awt/image/ColorConvertOp/filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)
org/apache/xmlgraphics/util/DoubleFormatUtil/formatDoubleFast(double,int,int,java.lang.StringBuffer)#java/lang/Double/toString(double)
org/apache/xmlgraphics/util/DoubleFormatUtil/formatDoubleFast(double,int,int,java.lang.StringBuffer)#java/lang/Math/floor(double)
org/apache/xmlgraphics/util/DoubleFormatUtil/formatDoubleFast(double,int,int,java.lang.StringBuffer)#java/lang/Math/abs(double)
org/apache/xmlgraphics/util/DoubleFormatUtil/formatDoubleFast(double,int,int,java.lang.StringBuffer)#java/lang/StringBuffer/append(char)
org/apache/xmlgraphics/util/DoubleFormatUtil/formatDoubleFast(double,int,int,java.lang.StringBuffer)#java/lang/Double/isNaN(double)
org/apache/xmlgraphics/util/DoubleFormatUtil/formatDoubleFast(double,int,int,java.lang.StringBuffer)#java/lang/Double/isInfinite(double)
org/apache/xmlgraphics/util/DoubleFormatUtil/formatDoubleFast(double,int,int,java.lang.StringBuffer)#java/lang/StringBuffer/append(java.lang.String)
org/apache/xmlgraphics/util/DoubleFormatUtil/formatDoubleFast(double,int,int,java.lang.StringBuffer)#java/lang/StringBuffer/append(long)
org/apache/xmlgraphics/util/DoubleFormatUtil/formatDoubleFast(double,int,int,java.lang.StringBuffer)#java/lang/Math/round(double)
org/apache/xmlgraphics/util/DoubleFormatUtil/formatDoublePrecise(double,int,int,java.lang.StringBuffer)#java/lang/Double/toString(double)
org/apache/xmlgraphics/util/DoubleFormatUtil/formatDoublePrecise(double,int,int,java.lang.StringBuffer)#java/lang/StringBuffer/charAt(int)
org/apache/xmlgraphics/util/DoubleFormatUtil/formatDoublePrecise(double,int,int,java.lang.StringBuffer)#java/lang/StringBuffer/append(char)
org/apache/xmlgraphics/util/DoubleFormatUtil/formatDoublePrecise(double,int,int,java.lang.StringBuffer)#java/lang/Double/isNaN(double)
org/apache/xmlgraphics/util/DoubleFormatUtil/formatDoublePrecise(double,int,int,java.lang.StringBuffer)#java/lang/String/equals(java.lang.Object)
org/apache/xmlgraphics/util/DoubleFormatUtil/formatDoublePrecise(double,int,int,java.lang.StringBuffer)#java/lang/StringBuffer/append(java.lang.String)
org/apache/xmlgraphics/util/DoubleFormatUtil/formatDoublePrecise(double,int,int,java.lang.StringBuffer)#java/lang/StringBuffer/setLength(int)
org/apache/xmlgraphics/util/DoubleFormatUtil/formatDoublePrecise(double,int,int,java.lang.StringBuffer)#java/lang/Long/parseLong(java.lang.String)
org/apache/xmlgraphics/util/DoubleFormatUtil/formatDoublePrecise(double,int,int,java.lang.StringBuffer)#java/lang/String/length()
org/apache/xmlgraphics/util/DoubleFormatUtil/formatDoublePrecise(double,int,int,java.lang.StringBuffer)#java/lang/StringBuffer/length()
org/apache/xmlgraphics/util/DoubleFormatUtil/formatDoublePrecise(double,int,int,java.lang.StringBuffer)#java/lang/Double/isInfinite(double)
org/apache/xmlgraphics/util/DoubleFormatUtil/formatDoublePrecise(double,int,int,java.lang.StringBuffer)#java/lang/String/substring(int,int)
org/apache/xmlgraphics/util/DoubleFormatUtil/formatDoublePrecise(double,int,int,java.lang.StringBuffer)#java/lang/String/substring(int)
org/apache/xmlgraphics/util/DoubleFormatUtil/formatDoublePrecise(double,int,int,java.lang.StringBuffer)#java/lang/Integer/parseInt(java.lang.String)
org/apache/xmlgraphics/util/DoubleFormatUtil/formatDoublePrecise(double,int,int,java.lang.StringBuffer)#java/lang/AssertionError/AssertionError()
org/apache/xmlgraphics/util/DoubleFormatUtil/formatDoublePrecise(double,int,int,java.lang.StringBuffer)#java/lang/String/indexOf(int)
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/encode(java.awt.image.RenderedImage)#java/awt/image/SampleModel/getNumBands()
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/encode(java.awt.image.RenderedImage)#java/awt/image/RenderedImage/getWidth()
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/encode(java.awt.image.RenderedImage)#org/apache/xmlgraphics/image/codec/png/PNGEncodeParam$RGB/RGB()
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/encode(java.awt.image.RenderedImage)#org/apache/xmlgraphics/image/codec/png/PNGEncodeParam$Palette/getPalette()
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/encode(java.awt.image.RenderedImage)#java/io/DataOutputStream/flush()
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/encode(java.awt.image.RenderedImage)#org/apache/xmlgraphics/image/codec/png/PNGEncodeParam$Gray/getBitDepth()
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/encode(java.awt.image.RenderedImage)#java/awt/image/RenderedImage/getColorModel()
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/encode(java.awt.image.RenderedImage)#java/awt/image/RenderedImage/getHeight()
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/encode(java.awt.image.RenderedImage)#java/awt/image/RenderedImage/getSampleModel()
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/encode(java.awt.image.RenderedImage)#org/apache/xmlgraphics/image/codec/png/PNGEncodeParam$Palette/Palette()
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/encode(java.awt.image.RenderedImage)#java/io/DataOutputStream/close()
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/encode(java.awt.image.RenderedImage)#java/awt/image/IndexColorModel/getMapSize()
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/encode(java.awt.image.RenderedImage)#java/awt/image/IndexColorModel/getGreens(byte[])
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/encode(java.awt.image.RenderedImage)#org/apache/xmlgraphics/image/codec/png/PNGEncodeParam$Gray/isBitDepthSet()
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/encode(java.awt.image.RenderedImage)#org/apache/xmlgraphics/image/codec/png/PNGEncodeParam$Gray/isBitShiftSet()
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/encode(java.awt.image.RenderedImage)#java/awt/image/IndexColorModel/getAlphas(byte[])
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/encode(java.awt.image.RenderedImage)#org/apache/xmlgraphics/image/codec/png/PNGEncodeParam$Gray/Gray()
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/encode(java.awt.image.RenderedImage)#java/awt/image/SampleModel/getSampleSize()
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/encode(java.awt.image.RenderedImage)#org/apache/xmlgraphics/image/codec/png/PNGEncodeParam$Gray/getBitShift()
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/encode(java.awt.image.RenderedImage)#java/lang/RuntimeException/RuntimeException(java.lang.String)
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/encode(java.awt.image.RenderedImage)#java/awt/image/IndexColorModel/getBlues(byte[])
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/encode(java.awt.image.RenderedImage)#org/apache/xmlgraphics/image/codec/png/PNGEncodeParam$Palette/isPaletteSet()
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/encode(java.awt.image.RenderedImage)#java/awt/image/IndexColorModel/getReds(byte[])
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/writeIDAT()#java/util/zip/Deflater/Deflater(int)
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/writeIDAT()#java/util/zip/DeflaterOutputStream/finish()
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/writeIDAT()#java/awt/image/RenderedImage/getData(java.awt.Rectangle)
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/writeIDAT()#java/util/zip/DeflaterOutputStream/DeflaterOutputStream(java.io.OutputStream,java.util.zip.Deflater)
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/writeIDAT()#java/awt/image/RenderedImage/getMinX()
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/writeIDAT()#java/awt/image/RenderedImage/getWidth()
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/writeIDAT()#java/awt/image/Raster/createChild(int,int,int,int,int,int,int[])
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/writeIDAT()#java/awt/image/Raster/getNumBands()
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/writeIDAT()#java/awt/Rectangle/Rectangle(int,int,int,int)
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/writeIDAT()#java/awt/image/Raster/getWidth()
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/writeIDAT()#java/util/zip/DeflaterOutputStream/close()
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/writeIDAT()#java/awt/image/Raster/getHeight()
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/writeIDAT()#java/awt/image/RenderedImage/getHeight()
org/apache/xmlgraphics/image/codec/png/PNGImageEncoder/writeIDAT()#java/awt/image/RenderedImage/getMinY()
org/apache/xmlgraphics/image/loader/util/ImageUtil/getPageIndexFromURI(java.lang.String)#java/net/URI/URI(java.lang.String)
org/apache/xmlgraphics/image/loader/util/ImageUtil/getPageIndexFromURI(java.lang.String)#java/lang/StringBuffer/append(char)
org/apache/xmlgraphics/image/loader/util/ImageUtil/getPageIndexFromURI(java.lang.String)#java/net/URISyntaxException/getLocalizedMessage()
org/apache/xmlgraphics/image/loader/util/ImageUtil/getPageIndexFromURI(java.lang.String)#java/lang/StringBuffer/toString()
org/apache/xmlgraphics/image/loader/util/ImageUtil/getPageIndexFromURI(java.lang.String)#java/lang/Integer/parseInt(java.lang.String)
org/apache/xmlgraphics/image/loader/util/ImageUtil/getPageIndexFromURI(java.lang.String)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/apache/xmlgraphics/image/loader/util/ImageUtil/getPageIndexFromURI(java.lang.String)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/loader/util/ImageUtil/getPageIndexFromURI(java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/loader/util/ImageUtil/getPageIndexFromURI(java.lang.String)#java/lang/String/charAt(int)
org/apache/xmlgraphics/image/loader/util/ImageUtil/getPageIndexFromURI(java.lang.String)#java/lang/Math/max(int,int)
org/apache/xmlgraphics/image/loader/util/ImageUtil/getPageIndexFromURI(java.lang.String)#java/lang/Integer/Integer(int)
org/apache/xmlgraphics/image/loader/util/ImageUtil/getPageIndexFromURI(java.lang.String)#java/lang/String/length()
org/apache/xmlgraphics/image/loader/util/ImageUtil/getPageIndexFromURI(java.lang.String)#java/lang/StringBuffer/length()
org/apache/xmlgraphics/image/loader/util/ImageUtil/getPageIndexFromURI(java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/loader/util/ImageUtil/getPageIndexFromURI(java.lang.String)#java/lang/String/indexOf(java.lang.String)
org/apache/xmlgraphics/image/loader/util/ImageUtil/getPageIndexFromURI(java.lang.String)#java/lang/String/indexOf(int)
org/apache/xmlgraphics/image/loader/util/ImageUtil/getPageIndexFromURI(java.lang.String)#java/lang/StringBuffer/StringBuffer()
org/apache/xmlgraphics/image/loader/util/ImageUtil/getPageIndexFromURI(java.lang.String)#java/net/URI/getFragment()
org/apache/xmlgraphics/image/loader/util/ImageUtil/closeQuietly(javax.xml.transform.Source)#org/xml/sax/InputSource/setByteStream(java.io.InputStream)
org/apache/xmlgraphics/image/loader/util/ImageUtil/closeQuietly(javax.xml.transform.Source)#org/apache/commons/io/IOUtils/closeQuietly(java.io.InputStream)
org/apache/xmlgraphics/image/loader/util/ImageUtil/closeQuietly(javax.xml.transform.Source)#javax/xml/transform/stream/StreamSource/getInputStream()
org/apache/xmlgraphics/image/loader/util/ImageUtil/closeQuietly(javax.xml.transform.Source)#org/xml/sax/InputSource/getByteStream()
org/apache/xmlgraphics/image/loader/util/ImageUtil/closeQuietly(javax.xml.transform.Source)#javax/xml/transform/stream/StreamSource/setReader(java.io.Reader)
org/apache/xmlgraphics/image/loader/util/ImageUtil/closeQuietly(javax.xml.transform.Source)#javax/xml/transform/sax/SAXSource/getInputSource()
org/apache/xmlgraphics/image/loader/util/ImageUtil/closeQuietly(javax.xml.transform.Source)#javax/xml/transform/stream/StreamSource/setInputStream(java.io.InputStream)
org/apache/xmlgraphics/image/loader/util/ImageUtil/closeQuietly(javax.xml.transform.Source)#org/xml/sax/InputSource/setCharacterStream(java.io.Reader)
org/apache/xmlgraphics/image/loader/util/ImageUtil/closeQuietly(javax.xml.transform.Source)#org/apache/commons/io/IOUtils/closeQuietly(java.io.Reader)
org/apache/xmlgraphics/image/loader/util/ImageUtil/closeQuietly(javax.xml.transform.Source)#javax/imageio/stream/ImageInputStream/close()
org/apache/xmlgraphics/image/loader/util/ImageUtil/closeQuietly(javax.xml.transform.Source)#javax/xml/transform/stream/StreamSource/getReader()
org/apache/xmlgraphics/image/loader/util/ImageUtil/closeQuietly(javax.xml.transform.Source)#org/xml/sax/InputSource/getCharacterStream()
org/apache/xmlgraphics/ps/ImageEncodingHelper/encodeAlpha(java.io.OutputStream)#java/lang/IllegalStateException/IllegalStateException(java.lang.String)
org/apache/xmlgraphics/ps/ImageEncodingHelper/encodeAlpha(java.io.OutputStream)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/ps/ImageEncodingHelper/encodeAlpha(java.io.OutputStream)#java/awt/image/DataBufferByte/getData()
org/apache/xmlgraphics/ps/ImageEncodingHelper/encodeAlpha(java.io.OutputStream)#java/lang/Class/getName()
org/apache/xmlgraphics/ps/ImageEncodingHelper/encodeAlpha(java.io.OutputStream)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/ps/ImageEncodingHelper/encodeAlpha(java.io.OutputStream)#java/lang/UnsupportedOperationException/UnsupportedOperationException(java.lang.String)
org/apache/xmlgraphics/ps/ImageEncodingHelper/encodeAlpha(java.io.OutputStream)#java/awt/image/Raster/getDataBuffer()
org/apache/xmlgraphics/ps/ImageEncodingHelper/encodeAlpha(java.io.OutputStream)#java/io/OutputStream/write(byte[])
org/apache/xmlgraphics/ps/ImageEncodingHelper/encodeAlpha(java.io.OutputStream)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/ps/ImageEncodingHelper/encodeAlpha(java.io.OutputStream)#java/lang/Object/getClass()
org/apache/xmlgraphics/ps/ImageEncodingHelper/determineEncodedColorModel()#java/awt/image/ColorModel/getTransferType()
org/apache/xmlgraphics/ps/ImageEncodingHelper/determineEncodedColorModel()#java/awt/image/Raster/getSampleModel()
org/apache/xmlgraphics/ps/ImageEncodingHelper/determineEncodedColorModel()#java/awt/color/ColorSpace/getType()
org/apache/xmlgraphics/ps/ImageEncodingHelper/determineEncodedColorModel()#java/awt/image/DataBuffer/getNumBanks()
org/apache/xmlgraphics/ps/ImageEncodingHelper/determineEncodedColorModel()#java/awt/image/RenderedImage/getTile(int,int)
org/apache/xmlgraphics/ps/ImageEncodingHelper/determineEncodedColorModel()#java/awt/image/DataBuffer/getOffset()
org/apache/xmlgraphics/ps/ImageEncodingHelper/determineEncodedColorModel()#java/awt/image/ColorModel/hasAlpha()
org/apache/xmlgraphics/ps/ImageEncodingHelper/determineEncodedColorModel()#java/awt/image/PixelInterleavedSampleModel/getBandOffsets()
org/apache/xmlgraphics/ps/ImageEncodingHelper/determineEncodedColorModel()#java/awt/image/ColorModel/getNumComponents()
org/apache/xmlgraphics/ps/ImageEncodingHelper/determineEncodedColorModel()#java/awt/image/RenderedImage/getColorModel()
org/apache/xmlgraphics/ps/ImageEncodingHelper/determineEncodedColorModel()#java/awt/image/Raster/getDataBuffer()
org/apache/xmlgraphics/ps/ImageEncodingHelper/determineEncodedColorModel()#java/awt/image/ColorModel/getColorSpace()
org/apache/xmlgraphics/ps/ImageEncodingHelper/encodeRenderedImageAsRGB(java.awt.image.RenderedImage,java.io.OutputStream)#java/awt/image/DataBuffer/getDataType()
org/apache/xmlgraphics/ps/ImageEncodingHelper/encodeRenderedImageAsRGB(java.awt.image.RenderedImage,java.io.OutputStream)#java/awt/image/Raster/getDataElements(int,int,java.lang.Object)
org/apache/xmlgraphics/ps/ImageEncodingHelper/encodeRenderedImageAsRGB(java.awt.image.RenderedImage,java.io.OutputStream)#java/awt/image/RenderedImage/getWidth()
org/apache/xmlgraphics/ps/ImageEncodingHelper/encodeRenderedImageAsRGB(java.awt.image.RenderedImage,java.io.OutputStream)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/ps/ImageEncodingHelper/encodeRenderedImageAsRGB(java.awt.image.RenderedImage,java.io.OutputStream)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/ps/ImageEncodingHelper/encodeRenderedImageAsRGB(java.awt.image.RenderedImage,java.io.OutputStream)#java/awt/image/ColorModel/getRGB(java.lang.Object)
org/apache/xmlgraphics/ps/ImageEncodingHelper/encodeRenderedImageAsRGB(java.awt.image.RenderedImage,java.io.OutputStream)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/apache/xmlgraphics/ps/ImageEncodingHelper/encodeRenderedImageAsRGB(java.awt.image.RenderedImage,java.io.OutputStream)#java/awt/image/RenderedImage/getColorModel()
org/apache/xmlgraphics/ps/ImageEncodingHelper/encodeRenderedImageAsRGB(java.awt.image.RenderedImage,java.io.OutputStream)#java/io/OutputStream/write(byte[])
org/apache/xmlgraphics/ps/ImageEncodingHelper/encodeRenderedImageAsRGB(java.awt.image.RenderedImage,java.io.OutputStream)#java/awt/image/Raster/getNumBands()
org/apache/xmlgraphics/ps/ImageEncodingHelper/encodeRenderedImageAsRGB(java.awt.image.RenderedImage,java.io.OutputStream)#java/lang/StringBuilder/append(int)
org/apache/xmlgraphics/ps/ImageEncodingHelper/encodeRenderedImageAsRGB(java.awt.image.RenderedImage,java.io.OutputStream)#java/awt/image/RenderedImage/getHeight()
org/apache/xmlgraphics/ps/ImageEncodingHelper/encodeRenderedImageAsRGB(java.awt.image.RenderedImage,java.io.OutputStream)#java/awt/image/Raster/getDataBuffer()
org/apache/xmlgraphics/ps/ImageEncodingHelper/encodeRenderedImageAsRGB(java.awt.image.RenderedImage,java.io.OutputStream)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/ps/ImageEncodingHelper/encodeRenderedImageAsRGB(java.awt.image.RenderedImage,java.io.OutputStream)#java/awt/image/RenderedImage/getData()
org/apache/xmlgraphics/xmp/XMPSerializer/writeXML(org.apache.xmlgraphics.xmp.Metadata,javax.xml.transform.Result,boolean,boolean)#javax/xml/transform/sax/SAXTransformerFactory/newTransformerHandler()
org/apache/xmlgraphics/xmp/XMPSerializer/writeXML(org.apache.xmlgraphics.xmp.Metadata,javax.xml.transform.Result,boolean,boolean)#javax/xml/transform/sax/TransformerHandler/setResult(javax.xml.transform.Result)
org/apache/xmlgraphics/xmp/XMPSerializer/writeXML(org.apache.xmlgraphics.xmp.Metadata,javax.xml.transform.Result,boolean,boolean)#java/lang/StringBuffer/StringBuffer(int)
org/apache/xmlgraphics/xmp/XMPSerializer/writeXML(org.apache.xmlgraphics.xmp.Metadata,javax.xml.transform.Result,boolean,boolean)#javax/xml/transform/sax/TransformerHandler/endDocument()
org/apache/xmlgraphics/xmp/XMPSerializer/writeXML(org.apache.xmlgraphics.xmp.Metadata,javax.xml.transform.Result,boolean,boolean)#javax/xml/transform/sax/TransformerHandler/characters(char[],int,int)
org/apache/xmlgraphics/xmp/XMPSerializer/writeXML(org.apache.xmlgraphics.xmp.Metadata,javax.xml.transform.Result,boolean,boolean)#javax/xml/transform/Transformer/setOutputProperty(java.lang.String,java.lang.String)
org/apache/xmlgraphics/xmp/XMPSerializer/writeXML(org.apache.xmlgraphics.xmp.Metadata,javax.xml.transform.Result,boolean,boolean)#java/lang/String/toCharArray()
org/apache/xmlgraphics/xmp/XMPSerializer/writeXML(org.apache.xmlgraphics.xmp.Metadata,javax.xml.transform.Result,boolean,boolean)#java/lang/StringBuffer/append(java.lang.String)
org/apache/xmlgraphics/xmp/XMPSerializer/writeXML(org.apache.xmlgraphics.xmp.Metadata,javax.xml.transform.Result,boolean,boolean)#javax/xml/transform/sax/SAXTransformerFactory/newInstance()
org/apache/xmlgraphics/xmp/XMPSerializer/writeXML(org.apache.xmlgraphics.xmp.Metadata,javax.xml.transform.Result,boolean,boolean)#javax/xml/transform/sax/TransformerHandler/getTransformer()
org/apache/xmlgraphics/xmp/XMPSerializer/writeXML(org.apache.xmlgraphics.xmp.Metadata,javax.xml.transform.Result,boolean,boolean)#java/lang/StringBuffer/append(char)
org/apache/xmlgraphics/xmp/XMPSerializer/writeXML(org.apache.xmlgraphics.xmp.Metadata,javax.xml.transform.Result,boolean,boolean)#javax/xml/transform/sax/TransformerHandler/processingInstruction(java.lang.String,java.lang.String)
org/apache/xmlgraphics/xmp/XMPSerializer/writeXML(org.apache.xmlgraphics.xmp.Metadata,javax.xml.transform.Result,boolean,boolean)#javax/xml/transform/sax/TransformerHandler/startDocument()
org/apache/xmlgraphics/xmp/XMPSerializer/writeXML(org.apache.xmlgraphics.xmp.Metadata,javax.xml.transform.Result,boolean,boolean)#java/lang/StringBuffer/toString()
org/apache/xmlgraphics/java2d/ps/PSGraphics2D/drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)#java/awt/Image/getHeight(java.awt.image.ImageObserver)
org/apache/xmlgraphics/java2d/ps/PSGraphics2D/drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)#java/awt/Rectangle/Rectangle(int,int,int,int)
org/apache/xmlgraphics/java2d/ps/PSGraphics2D/drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)#java/awt/image/BufferedImage/getHeight()
org/apache/xmlgraphics/java2d/ps/PSGraphics2D/drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)#java/awt/Image/getWidth(java.awt.image.ImageObserver)
org/apache/xmlgraphics/java2d/ps/PSGraphics2D/drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)#java/awt/Graphics2D/drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)
org/apache/xmlgraphics/java2d/ps/PSGraphics2D/drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)#java/awt/Color/Color(int,int,int,int)
org/apache/xmlgraphics/java2d/ps/PSGraphics2D/drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)#java/awt/Dimension/Dimension(int,int)
org/apache/xmlgraphics/java2d/ps/PSGraphics2D/drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)#java/awt/Graphics2D/dispose()
org/apache/xmlgraphics/java2d/ps/PSGraphics2D/drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)#org/apache/xmlgraphics/java2d/ps/PSGraphics2D/getClip()
org/apache/xmlgraphics/java2d/ps/PSGraphics2D/drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)#java/awt/Graphics2D/setPaint(java.awt.Paint)
org/apache/xmlgraphics/java2d/ps/PSGraphics2D/drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)#java/awt/Graphics2D/setComposite(java.awt.Composite)
org/apache/xmlgraphics/java2d/ps/PSGraphics2D/drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)#java/awt/image/BufferedImage/createGraphics()
org/apache/xmlgraphics/java2d/ps/PSGraphics2D/drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)#org/apache/xmlgraphics/java2d/ps/PSGraphics2D/getTransform()
org/apache/xmlgraphics/java2d/ps/PSGraphics2D/drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)#java/awt/image/BufferedImage/getWidth()
org/apache/xmlgraphics/java2d/ps/PSGraphics2D/drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)#java/awt/Graphics2D/setBackground(java.awt.Color)
org/apache/xmlgraphics/java2d/ps/PSGraphics2D/drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)#java/awt/Graphics2D/clip(java.awt.Shape)
org/apache/xmlgraphics/java2d/ps/PSGraphics2D/drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)#java/awt/Graphics2D/fillRect(int,int,int,int)
org/apache/xmlgraphics/java2d/ps/PSGraphics2D/applyStroke(java.awt.Stroke,org.apache.xmlgraphics.ps.PSGenerator)#java/awt/BasicStroke/getEndCap()
org/apache/xmlgraphics/java2d/ps/PSGraphics2D/applyStroke(java.awt.Stroke,org.apache.xmlgraphics.ps.PSGenerator)#java/lang/Object/toString()
org/apache/xmlgraphics/java2d/ps/PSGraphics2D/applyStroke(java.awt.Stroke,org.apache.xmlgraphics.ps.PSGenerator)#java/awt/BasicStroke/getLineJoin()
org/apache/xmlgraphics/java2d/ps/PSGraphics2D/applyStroke(java.awt.Stroke,org.apache.xmlgraphics.ps.PSGenerator)#java/lang/StringBuilder/append(int)
org/apache/xmlgraphics/java2d/ps/PSGraphics2D/applyStroke(java.awt.Stroke,org.apache.xmlgraphics.ps.PSGenerator)#java/lang/StringBuffer/toString()
org/apache/xmlgraphics/java2d/ps/PSGraphics2D/applyStroke(java.awt.Stroke,org.apache.xmlgraphics.ps.PSGenerator)#java/awt/BasicStroke/getDashPhase()
org/apache/xmlgraphics/java2d/ps/PSGraphics2D/applyStroke(java.awt.Stroke,org.apache.xmlgraphics.ps.PSGenerator)#java/lang/StringBuffer/append(java.lang.String)
org/apache/xmlgraphics/java2d/ps/PSGraphics2D/applyStroke(java.awt.Stroke,org.apache.xmlgraphics.ps.PSGenerator)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/java2d/ps/PSGraphics2D/applyStroke(java.awt.Stroke,org.apache.xmlgraphics.ps.PSGenerator)#java/io/PrintStream/println(java.lang.String)
org/apache/xmlgraphics/java2d/ps/PSGraphics2D/applyStroke(java.awt.Stroke,org.apache.xmlgraphics.ps.PSGenerator)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/java2d/ps/PSGraphics2D/applyStroke(java.awt.Stroke,org.apache.xmlgraphics.ps.PSGenerator)#java/awt/BasicStroke/getDashArray()
org/apache/xmlgraphics/java2d/ps/PSGraphics2D/applyStroke(java.awt.Stroke,org.apache.xmlgraphics.ps.PSGenerator)#java/lang/StringBuffer/StringBuffer(java.lang.String)
org/apache/xmlgraphics/java2d/ps/PSGraphics2D/applyStroke(java.awt.Stroke,org.apache.xmlgraphics.ps.PSGenerator)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/java2d/ps/PSGraphics2D/applyStroke(java.awt.Stroke,org.apache.xmlgraphics.ps.PSGenerator)#java/awt/BasicStroke/getMiterLimit()
org/apache/xmlgraphics/java2d/ps/PSGraphics2D/applyStroke(java.awt.Stroke,org.apache.xmlgraphics.ps.PSGenerator)#java/awt/BasicStroke/getLineWidth()
org/apache/xmlgraphics/java2d/color/profile/NamedColorProfileParser/readNamedColors(java.awt.color.ICC_Profile,java.lang.String,java.lang.String)#java/awt/color/ICC_Profile/getPCSType()
org/apache/xmlgraphics/java2d/color/profile/NamedColorProfileParser/readNamedColors(java.awt.color.ICC_Profile,java.lang.String,java.lang.String)#java/io/ByteArrayInputStream/ByteArrayInputStream(byte[])
org/apache/xmlgraphics/java2d/color/profile/NamedColorProfileParser/readNamedColors(java.awt.color.ICC_Profile,java.lang.String,java.lang.String)#java/io/DataInputStream/DataInputStream(java.io.InputStream)
org/apache/xmlgraphics/java2d/color/profile/NamedColorProfileParser/readNamedColors(java.awt.color.ICC_Profile,java.lang.String,java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/java2d/color/profile/NamedColorProfileParser/readNamedColors(java.awt.color.ICC_Profile,java.lang.String,java.lang.String)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/java2d/color/profile/NamedColorProfileParser/readNamedColors(java.awt.color.ICC_Profile,java.lang.String,java.lang.String)#java/awt/color/ICC_Profile/getData(int)
org/apache/xmlgraphics/java2d/color/profile/NamedColorProfileParser/readNamedColors(java.awt.color.ICC_Profile,java.lang.String,java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/java2d/color/profile/NamedColorProfileParser/readNamedColors(java.awt.color.ICC_Profile,java.lang.String,java.lang.String)#java/lang/StringBuilder/append(int)
org/apache/xmlgraphics/java2d/color/profile/NamedColorProfileParser/readNamedColors(java.awt.color.ICC_Profile,java.lang.String,java.lang.String)#java/io/DataInput/readInt()
org/apache/xmlgraphics/java2d/color/profile/NamedColorProfileParser/readNamedColors(java.awt.color.ICC_Profile,java.lang.String,java.lang.String)#java/lang/UnsupportedOperationException/UnsupportedOperationException(java.lang.String)
org/apache/xmlgraphics/java2d/color/profile/NamedColorProfileParser/readNamedColors(java.awt.color.ICC_Profile,java.lang.String,java.lang.String)#java/io/DataInput/skipBytes(int)
org/apache/xmlgraphics/fonts/Glyphs/getUnicodeSequenceForGlyphName(java.lang.String)#java/lang/StringBuffer/append(char)
org/apache/xmlgraphics/fonts/Glyphs/getUnicodeSequenceForGlyphName(java.lang.String)#java/lang/StringBuffer/toString()
org/apache/xmlgraphics/fonts/Glyphs/getUnicodeSequenceForGlyphName(java.lang.String)#java/lang/String/substring(int,int)
org/apache/xmlgraphics/fonts/Glyphs/getUnicodeSequenceForGlyphName(java.lang.String)#java/lang/String/startsWith(java.lang.String)
org/apache/xmlgraphics/fonts/Glyphs/getUnicodeSequenceForGlyphName(java.lang.String)#java/util/StringTokenizer/nextToken()
org/apache/xmlgraphics/fonts/Glyphs/getUnicodeSequenceForGlyphName(java.lang.String)#java/lang/StringBuffer/append(java.lang.String)
org/apache/xmlgraphics/fonts/Glyphs/getUnicodeSequenceForGlyphName(java.lang.String)#java/util/StringTokenizer/hasMoreTokens()
org/apache/xmlgraphics/fonts/Glyphs/getUnicodeSequenceForGlyphName(java.lang.String)#java/util/StringTokenizer/StringTokenizer(java.lang.String,java.lang.String,boolean)
org/apache/xmlgraphics/fonts/Glyphs/getUnicodeSequenceForGlyphName(java.lang.String)#java/lang/String/length()
org/apache/xmlgraphics/fonts/Glyphs/getUnicodeSequenceForGlyphName(java.lang.String)#java/util/Map/get(java.lang.Object)
org/apache/xmlgraphics/fonts/Glyphs/getUnicodeSequenceForGlyphName(java.lang.String)#java/lang/StringBuffer/length()
org/apache/xmlgraphics/fonts/Glyphs/getUnicodeSequenceForGlyphName(java.lang.String)#java/lang/String/indexOf(int)
org/apache/xmlgraphics/fonts/Glyphs/getUnicodeSequenceForGlyphName(java.lang.String)#java/lang/StringBuffer/StringBuffer()
org/apache/xmlgraphics/fonts/Glyphs/loadGlyphList(java.lang.String,java.util.Map)#org/apache/commons/io/IOUtils/closeQuietly(java.io.InputStream)
org/apache/xmlgraphics/fonts/Glyphs/loadGlyphList(java.lang.String,java.util.Map)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/fonts/Glyphs/loadGlyphList(java.lang.String,java.util.Map)#java/lang/StringBuffer/append(char)
org/apache/xmlgraphics/fonts/Glyphs/loadGlyphList(java.lang.String,java.util.Map)#java/util/List/size()
org/apache/xmlgraphics/fonts/Glyphs/loadGlyphList(java.lang.String,java.util.Map)#java/io/InputStreamReader/InputStreamReader(java.io.InputStream,java.lang.String)
org/apache/xmlgraphics/fonts/Glyphs/loadGlyphList(java.lang.String,java.util.Map)#java/lang/StringBuffer/toString()
org/apache/xmlgraphics/fonts/Glyphs/loadGlyphList(java.lang.String,java.util.Map)#java/lang/String/substring(int,int)
org/apache/xmlgraphics/fonts/Glyphs/loadGlyphList(java.lang.String,java.util.Map)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/fonts/Glyphs/loadGlyphList(java.lang.String,java.util.Map)#java/util/StringTokenizer/hasMoreTokens()
org/apache/xmlgraphics/fonts/Glyphs/loadGlyphList(java.lang.String,java.util.Map)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/apache/xmlgraphics/fonts/Glyphs/loadGlyphList(java.lang.String,java.util.Map)#java/lang/Class/getResourceAsStream(java.lang.String)
org/apache/xmlgraphics/fonts/Glyphs/loadGlyphList(java.lang.String,java.util.Map)#java/util/ArrayList/ArrayList()
org/apache/xmlgraphics/fonts/Glyphs/loadGlyphList(java.lang.String,java.util.Map)#java/util/StringTokenizer/StringTokenizer(java.lang.String,java.lang.String,boolean)
org/apache/xmlgraphics/fonts/Glyphs/loadGlyphList(java.lang.String,java.util.Map)#java/lang/String/length()
org/apache/xmlgraphics/fonts/Glyphs/loadGlyphList(java.lang.String,java.util.Map)#java/lang/String/substring(int)
org/apache/xmlgraphics/fonts/Glyphs/loadGlyphList(java.lang.String,java.util.Map)#java/util/Map/containsKey(java.lang.Object)
org/apache/xmlgraphics/fonts/Glyphs/loadGlyphList(java.lang.String,java.util.Map)#java/util/List/add(java.lang.Object)
org/apache/xmlgraphics/fonts/Glyphs/loadGlyphList(java.lang.String,java.util.Map)#java/io/BufferedReader/BufferedReader(java.io.Reader)
org/apache/xmlgraphics/fonts/Glyphs/loadGlyphList(java.lang.String,java.util.Map)#java/io/BufferedReader/readLine()
org/apache/xmlgraphics/fonts/Glyphs/loadGlyphList(java.lang.String,java.util.Map)#java/lang/String/startsWith(java.lang.String)
org/apache/xmlgraphics/fonts/Glyphs/loadGlyphList(java.lang.String,java.util.Map)#java/util/List/get(int)
org/apache/xmlgraphics/fonts/Glyphs/loadGlyphList(java.lang.String,java.util.Map)#java/lang/RuntimeException/RuntimeException(java.lang.String)
org/apache/xmlgraphics/fonts/Glyphs/loadGlyphList(java.lang.String,java.util.Map)#java/util/StringTokenizer/nextToken()
org/apache/xmlgraphics/fonts/Glyphs/loadGlyphList(java.lang.String,java.util.Map)#java/lang/AssertionError/AssertionError()
org/apache/xmlgraphics/fonts/Glyphs/loadGlyphList(java.lang.String,java.util.Map)#java/lang/String/indexOf(int)
org/apache/xmlgraphics/fonts/Glyphs/loadGlyphList(java.lang.String,java.util.Map)#java/lang/StringBuffer/StringBuffer()
org/apache/xmlgraphics/fonts/Glyphs/loadGlyphList(java.lang.String,java.util.Map)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/fonts/Glyphs/loadGlyphList(java.lang.String,java.util.Map)#java/lang/StringBuffer/setLength(int)
org/apache/xmlgraphics/ps/PSDictionary/Maker/parseDictionary(java.lang.String)#java/util/ArrayList/ArrayList()
org/apache/xmlgraphics/ps/PSDictionary/Maker/parseDictionary(java.lang.String)#org/apache/xmlgraphics/ps/PSDictionary$Maker$Token/access$302(org.apache.xmlgraphics.ps.PSDictionary$Maker$Token,java.lang.String)
org/apache/xmlgraphics/ps/PSDictionary/Maker/parseDictionary(java.lang.String)#org/apache/xmlgraphics/ps/PSDictionary$Maker/nextToken(java.lang.String,int)
org/apache/xmlgraphics/ps/PSDictionary/Maker/parseDictionary(java.lang.String)#java/lang/String/length()
org/apache/xmlgraphics/ps/PSDictionary/Maker/parseDictionary(java.lang.String)#org/apache/xmlgraphics/ps/PSDictionary$Maker$Token/access$200(org.apache.xmlgraphics.ps.PSDictionary$Maker$Token)
org/apache/xmlgraphics/ps/PSDictionary/Maker/parseDictionary(java.lang.String)#org/apache/xmlgraphics/ps/PSDictionary$Maker$Token/access$300(org.apache.xmlgraphics.ps.PSDictionary$Maker$Token)
org/apache/xmlgraphics/ps/PSDictionary/Maker/parseDictionary(java.lang.String)#org/apache/xmlgraphics/ps/PSDictionary$Maker/parseDictionary(java.lang.String)
org/apache/xmlgraphics/ps/PSDictionary/Maker/parseDictionary(java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/ps/PSDictionary/Maker/parseDictionary(java.lang.String)#java/util/List/add(java.lang.Object)
org/apache/xmlgraphics/ps/PSDictionary/Maker/parseDictionary(java.lang.String)#java/lang/String/startsWith(java.lang.String)
org/apache/xmlgraphics/ps/PSDictionary/Maker/parseDictionary(java.lang.String)#java/util/StringTokenizer/nextToken()
org/apache/xmlgraphics/ps/PSDictionary/Maker/parseDictionary(java.lang.String)#java/util/StringTokenizer/hasMoreTokens()
org/apache/xmlgraphics/ps/PSDictionary/Maker/parseDictionary(java.lang.String)#org/apache/xmlgraphics/ps/PSDictionary/put(java.lang.Object,java.lang.Object)
org/apache/xmlgraphics/ps/PSDictionary/Maker/parseDictionary(java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/ps/PSDictionary/Maker/parseDictionary(java.lang.String)#java/util/StringTokenizer/StringTokenizer(java.lang.String,java.lang.String)
org/apache/xmlgraphics/ps/PSDictionary/Maker/parseDictionary(java.lang.String)#java/lang/String/trim()
org/apache/xmlgraphics/ps/PSDictionary/Maker/parseDictionary(java.lang.String)#org/apache/xmlgraphics/ps/PSDictionary$Maker$Token/access$100(org.apache.xmlgraphics.ps.PSDictionary$Maker$Token)
org/apache/xmlgraphics/ps/PSDictionary/Maker/parseDictionary(java.lang.String)#org/apache/xmlgraphics/ps/PSDictionary$Maker$Token/access$202(org.apache.xmlgraphics.ps.PSDictionary$Maker$Token,int)
org/apache/xmlgraphics/ps/PSDictionary/Maker/parseDictionary(java.lang.String)#org/apache/xmlgraphics/ps/PSDictionary$Maker/stripBraces(java.lang.String,java.lang.String[])
org/apache/xmlgraphics/ps/PSDictionary/Maker/parseDictionary(java.lang.String)#java/lang/String/substring(int,int)
org/apache/xmlgraphics/ps/PSDictionary/Maker/parseDictionary(java.lang.String)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/ps/PSDictionary/Maker/parseDictionary(java.lang.String)#org/apache/xmlgraphics/ps/PSDictionary$Maker/indexOfMatchingBrace(java.lang.String,java.lang.String[],int)
org/apache/xmlgraphics/ps/PSDictionary/Maker/nextToken(java.lang.String,int)#org/apache/xmlgraphics/ps/PSDictionary$Maker$Token/access$302(org.apache.xmlgraphics.ps.PSDictionary$Maker$Token,java.lang.String)
org/apache/xmlgraphics/ps/PSDictionary/Maker/nextToken(java.lang.String,int)#java/lang/Character/isWhitespace(char)
org/apache/xmlgraphics/ps/PSDictionary/Maker/nextToken(java.lang.String,int)#java/lang/String/charAt(int)
org/apache/xmlgraphics/ps/PSDictionary/Maker/nextToken(java.lang.String,int)#java/lang/String/length()
org/apache/xmlgraphics/ps/PSDictionary/Maker/nextToken(java.lang.String,int)#org/apache/xmlgraphics/ps/PSDictionary$Maker$Token/access$102(org.apache.xmlgraphics.ps.PSDictionary$Maker$Token,int)
org/apache/xmlgraphics/ps/PSDictionary/Maker/nextToken(java.lang.String,int)#org/apache/xmlgraphics/ps/PSDictionary$Maker$Token/access$200(org.apache.xmlgraphics.ps.PSDictionary$Maker$Token)
org/apache/xmlgraphics/ps/PSDictionary/Maker/nextToken(java.lang.String,int)#java/lang/String/substring(int,int)
org/apache/xmlgraphics/ps/PSDictionary/Maker/nextToken(java.lang.String,int)#org/apache/xmlgraphics/ps/PSDictionary$Maker$Token/Token(org.apache.xmlgraphics.ps.PSDictionary$Maker,org.apache.xmlgraphics.ps.PSDictionary$1)
org/apache/xmlgraphics/ps/PSDictionary/Maker/nextToken(java.lang.String,int)#org/apache/xmlgraphics/ps/PSDictionary$Maker$Token/access$100(org.apache.xmlgraphics.ps.PSDictionary$Maker$Token)
org/apache/xmlgraphics/ps/PSDictionary/Maker/nextToken(java.lang.String,int)#org/apache/xmlgraphics/ps/PSDictionary$Maker$Token/access$202(org.apache.xmlgraphics.ps.PSDictionary$Maker$Token,int)
org/apache/xmlgraphics/xmp/XMPArray/toSAX(org.xml.sax.ContentHandler)#org/xml/sax/helpers/AttributesImpl/AttributesImpl()
org/apache/xmlgraphics/xmp/XMPArray/toSAX(org.xml.sax.ContentHandler)#org/xml/sax/helpers/AttributesImpl/clear()
org/apache/xmlgraphics/xmp/XMPArray/toSAX(org.xml.sax.ContentHandler)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/xmp/XMPArray/toSAX(org.xml.sax.ContentHandler)#org/apache/xmlgraphics/xmp/XMPComplexValue/toSAX(org.xml.sax.ContentHandler)
org/apache/xmlgraphics/xmp/XMPArray/toSAX(org.xml.sax.ContentHandler)#java/net/URI/toString()
org/apache/xmlgraphics/xmp/XMPArray/toSAX(org.xml.sax.ContentHandler)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/xmp/XMPArray/toSAX(org.xml.sax.ContentHandler)#org/xml/sax/ContentHandler/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)
org/apache/xmlgraphics/xmp/XMPArray/toSAX(org.xml.sax.ContentHandler)#org/xml/sax/ContentHandler/characters(char[],int,int)
org/apache/xmlgraphics/xmp/XMPArray/toSAX(org.xml.sax.ContentHandler)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/xmp/XMPArray/toSAX(org.xml.sax.ContentHandler)#java/util/List/size()
org/apache/xmlgraphics/xmp/XMPArray/toSAX(org.xml.sax.ContentHandler)#org/xml/sax/ContentHandler/endElement(java.lang.String,java.lang.String,java.lang.String)
org/apache/xmlgraphics/xmp/XMPArray/toSAX(org.xml.sax.ContentHandler)#org/xml/sax/helpers/AttributesImpl/addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
org/apache/xmlgraphics/xmp/XMPArray/toSAX(org.xml.sax.ContentHandler)#java/lang/String/toCharArray()
org/apache/xmlgraphics/xmp/XMPArray/toSAX(org.xml.sax.ContentHandler)#java/util/List/get(int)
org/apache/xmlgraphics/image/loader/ImageManager/choosePipeline(org.apache.xmlgraphics.image.loader.pipeline.ImageProviderPipeline[])#org/apache/commons/logging/Log/debug(java.lang.Object)
org/apache/xmlgraphics/image/loader/ImageManager/choosePipeline(org.apache.xmlgraphics.image.loader.pipeline.ImageProviderPipeline[])#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/loader/ImageManager/choosePipeline(org.apache.xmlgraphics.image.loader.pipeline.ImageProviderPipeline[])#java/lang/StringBuilder/append(int)
org/apache/xmlgraphics/image/loader/ImageManager/choosePipeline(org.apache.xmlgraphics.image.loader.pipeline.ImageProviderPipeline[])#org/apache/commons/logging/Log/isDebugEnabled()
org/apache/xmlgraphics/image/loader/ImageManager/choosePipeline(org.apache.xmlgraphics.image.loader.pipeline.ImageProviderPipeline[])#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/loader/ImageManager/choosePipeline(org.apache.xmlgraphics.image.loader.pipeline.ImageProviderPipeline[])#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/loader/ImageManager/choosePipeline(org.apache.xmlgraphics.image.loader.pipeline.ImageProviderPipeline[])#org/apache/commons/logging/Log/trace(java.lang.Object)
org/apache/xmlgraphics/image/loader/ImageManager/choosePipeline(org.apache.xmlgraphics.image.loader.pipeline.ImageProviderPipeline[])#java/lang/StringBuilder/append(java.lang.Object)
org/apache/xmlgraphics/image/loader/ImageManager/choosePipeline(org.apache.xmlgraphics.image.loader.pipeline.ImageProviderPipeline[])#org/apache/commons/logging/Log/isTraceEnabled()
org/apache/xmlgraphics/image/writer/imageio/ImageIOJPEGImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/metadata/IIOMetadata/setFromTree(java.lang.String,org.w3c.dom.Node)
org/apache/xmlgraphics/image/writer/imageio/ImageIOJPEGImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/writer/imageio/ImageIOJPEGImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#java/lang/Integer/toString()
org/apache/xmlgraphics/image/writer/imageio/ImageIOJPEGImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/metadata/IIOInvalidTreeException/getMessage()
org/apache/xmlgraphics/image/writer/imageio/ImageIOJPEGImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/metadata/IIOMetadata/getNativeMetadataFormatName()
org/apache/xmlgraphics/image/writer/imageio/ImageIOJPEGImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/metadata/IIOMetadata/getAsTree(java.lang.String)
org/apache/xmlgraphics/image/writer/imageio/ImageIOJPEGImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#java/lang/String/equals(java.lang.Object)
org/apache/xmlgraphics/image/writer/imageio/ImageIOJPEGImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/metadata/IIOMetadataNode/appendChild(org.w3c.dom.Node)
org/apache/xmlgraphics/image/writer/imageio/ImageIOJPEGImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/metadata/IIOMetadataNode/setAttribute(java.lang.String,java.lang.String)
org/apache/xmlgraphics/image/writer/imageio/ImageIOJPEGImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/writer/imageio/ImageIOJPEGImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/writer/imageio/ImageIOJPEGImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/metadata/IIOMetadataNode/IIOMetadataNode(java.lang.String)
org/apache/xmlgraphics/image/writer/imageio/ImageIOJPEGImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#org/apache/xmlgraphics/image/writer/imageio/ImageIOJPEGImageWriter/getChildNode(org.w3c.dom.Node,java.lang.String)
org/apache/xmlgraphics/image/writer/imageio/ImageIOJPEGImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#java/lang/RuntimeException/RuntimeException(java.lang.String,java.lang.Throwable)
org/apache/xmlgraphics/image/writer/imageio/ImageIOJPEGImageWriter/addAdobeTransform(javax.imageio.metadata.IIOMetadata)#javax/imageio/metadata/IIOMetadata/setFromTree(java.lang.String,org.w3c.dom.Node)
org/apache/xmlgraphics/image/writer/imageio/ImageIOJPEGImageWriter/addAdobeTransform(javax.imageio.metadata.IIOMetadata)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/writer/imageio/ImageIOJPEGImageWriter/addAdobeTransform(javax.imageio.metadata.IIOMetadata)#javax/imageio/metadata/IIOInvalidTreeException/getMessage()
org/apache/xmlgraphics/image/writer/imageio/ImageIOJPEGImageWriter/addAdobeTransform(javax.imageio.metadata.IIOMetadata)#javax/imageio/metadata/IIOMetadata/getAsTree(java.lang.String)
org/apache/xmlgraphics/image/writer/imageio/ImageIOJPEGImageWriter/addAdobeTransform(javax.imageio.metadata.IIOMetadata)#javax/imageio/metadata/IIOMetadataNode/appendChild(org.w3c.dom.Node)
org/apache/xmlgraphics/image/writer/imageio/ImageIOJPEGImageWriter/addAdobeTransform(javax.imageio.metadata.IIOMetadata)#javax/imageio/metadata/IIOMetadataNode/setAttribute(java.lang.String,java.lang.String)
org/apache/xmlgraphics/image/writer/imageio/ImageIOJPEGImageWriter/addAdobeTransform(javax.imageio.metadata.IIOMetadata)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/writer/imageio/ImageIOJPEGImageWriter/addAdobeTransform(javax.imageio.metadata.IIOMetadata)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/writer/imageio/ImageIOJPEGImageWriter/addAdobeTransform(javax.imageio.metadata.IIOMetadata)#javax/imageio/metadata/IIOMetadataNode/IIOMetadataNode(java.lang.String)
org/apache/xmlgraphics/image/writer/imageio/ImageIOJPEGImageWriter/addAdobeTransform(javax.imageio.metadata.IIOMetadata)#org/apache/xmlgraphics/image/writer/imageio/ImageIOJPEGImageWriter/getChildNode(org.w3c.dom.Node,java.lang.String)
org/apache/xmlgraphics/image/writer/imageio/ImageIOJPEGImageWriter/addAdobeTransform(javax.imageio.metadata.IIOMetadata)#java/lang/RuntimeException/RuntimeException(java.lang.String,java.lang.Throwable)
org/apache/xmlgraphics/image/writer/imageio/ImageIOJPEGImageWriter/addAdobeTransform(javax.imageio.metadata.IIOMetadata)#java/lang/RuntimeException/RuntimeException(java.lang.String)
org/apache/xmlgraphics/ps/PSFontUtils/embedType1Font(org.apache.xmlgraphics.ps.PSGenerator,java.io.InputStream)#org/apache/commons/io/EndianUtils/readSwappedInteger(java.io.InputStream)
org/apache/xmlgraphics/ps/PSFontUtils/embedType1Font(org.apache.xmlgraphics.ps.PSGenerator,java.io.InputStream)#org/apache/commons/io/IOUtils/copy(java.io.InputStream,java.io.OutputStream)
org/apache/xmlgraphics/ps/PSFontUtils/embedType1Font(org.apache.xmlgraphics.ps.PSGenerator,java.io.InputStream)#java/io/IOException/IOException(java.lang.String)
org/apache/xmlgraphics/ps/PSFontUtils/embedType1Font(org.apache.xmlgraphics.ps.PSGenerator,java.io.InputStream)#java/lang/StringBuilder/append(int)
org/apache/xmlgraphics/ps/PSFontUtils/embedType1Font(org.apache.xmlgraphics.ps.PSGenerator,java.io.InputStream)#java/io/InputStreamReader/InputStreamReader(java.io.InputStream,java.lang.String)
org/apache/xmlgraphics/ps/PSFontUtils/embedType1Font(org.apache.xmlgraphics.ps.PSGenerator,java.io.InputStream)#java/io/InputStream/read()
org/apache/xmlgraphics/ps/PSFontUtils/embedType1Font(org.apache.xmlgraphics.ps.PSGenerator,java.io.InputStream)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/ps/PSFontUtils/embedType1Font(org.apache.xmlgraphics.ps.PSGenerator,java.io.InputStream)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/ps/PSFontUtils/embedType1Font(org.apache.xmlgraphics.ps.PSGenerator,java.io.InputStream)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/ps/PSFontUtils/embedType1Font(org.apache.xmlgraphics.ps.PSGenerator,java.io.InputStream)#java/io/BufferedReader/BufferedReader(java.io.Reader)
org/apache/xmlgraphics/ps/PSFontUtils/embedType1Font(org.apache.xmlgraphics.ps.PSGenerator,java.io.InputStream)#java/io/BufferedReader/readLine()
org/apache/xmlgraphics/image/codec/util/SimpleRenderedImage/copyData(java.awt.image.WritableRaster)#java/awt/image/Raster/createWritableRaster(java.awt.image.SampleModel,java.awt.Point)
org/apache/xmlgraphics/image/codec/util/SimpleRenderedImage/copyData(java.awt.image.WritableRaster)#org/apache/xmlgraphics/image/codec/util/SimpleRenderedImage/getTile(int,int)
org/apache/xmlgraphics/image/codec/util/SimpleRenderedImage/copyData(java.awt.image.WritableRaster)#java/awt/image/SampleModel/createCompatibleSampleModel(int,int)
org/apache/xmlgraphics/image/codec/util/SimpleRenderedImage/copyData(java.awt.image.WritableRaster)#java/awt/Point/Point(int,int)
org/apache/xmlgraphics/image/codec/util/SimpleRenderedImage/copyData(java.awt.image.WritableRaster)#java/awt/Rectangle/intersection(java.awt.Rectangle)
org/apache/xmlgraphics/image/codec/util/SimpleRenderedImage/copyData(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/setDataElements(int,int,java.awt.image.Raster)
org/apache/xmlgraphics/image/codec/util/SimpleRenderedImage/copyData(java.awt.image.WritableRaster)#java/awt/image/Raster/getBounds()
org/apache/xmlgraphics/image/codec/util/SimpleRenderedImage/copyData(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getBounds()
org/apache/xmlgraphics/image/codec/util/SimpleRenderedImage/copyData(java.awt.image.WritableRaster)#java/awt/image/Raster/createChild(int,int,int,int,int,int,int[])
org/apache/xmlgraphics/image/loader/impl/ImageConverterG2D2Bitmap/paintToBufferedImage(org.apache.xmlgraphics.image.loader.impl.ImageGraphics2D,int,boolean,int)#java/awt/Graphics2D/addRenderingHints(java.util.Map)
org/apache/xmlgraphics/image/loader/impl/ImageConverterG2D2Bitmap/paintToBufferedImage(org.apache.xmlgraphics.image.loader.impl.ImageGraphics2D,int,boolean,int)#java/lang/Math/ceil(double)
org/apache/xmlgraphics/image/loader/impl/ImageConverterG2D2Bitmap/paintToBufferedImage(org.apache.xmlgraphics.image.loader.impl.ImageGraphics2D,int,boolean,int)#java/awt/geom/Rectangle2D$Double/Double(double,double,double,double)
org/apache/xmlgraphics/image/loader/impl/ImageConverterG2D2Bitmap/paintToBufferedImage(org.apache.xmlgraphics.image.loader.impl.ImageGraphics2D,int,boolean,int)#org/apache/xmlgraphics/image/loader/impl/ImageGraphics2D/getSize()
org/apache/xmlgraphics/image/loader/impl/ImageConverterG2D2Bitmap/paintToBufferedImage(org.apache.xmlgraphics.image.loader.impl.ImageGraphics2D,int,boolean,int)#java/awt/Graphics2D/setBackground(java.awt.Color)
org/apache/xmlgraphics/image/loader/impl/ImageConverterG2D2Bitmap/paintToBufferedImage(org.apache.xmlgraphics.image.loader.impl.ImageGraphics2D,int,boolean,int)#java/awt/Graphics2D/clearRect(int,int,int,int)
org/apache/xmlgraphics/image/loader/impl/ImageConverterG2D2Bitmap/paintToBufferedImage(org.apache.xmlgraphics.image.loader.impl.ImageGraphics2D,int,boolean,int)#java/awt/Graphics2D/setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)
org/apache/xmlgraphics/image/loader/impl/ImageConverterG2D2Bitmap/paintToBufferedImage(org.apache.xmlgraphics.image.loader.impl.ImageGraphics2D,int,boolean,int)#java/awt/RenderingHints/put(java.lang.Object,java.lang.Object)
org/apache/xmlgraphics/image/loader/impl/ImageConverterG2D2Bitmap/paintToBufferedImage(org.apache.xmlgraphics.image.loader.impl.ImageGraphics2D,int,boolean,int)#java/awt/RenderingHints/RenderingHints(java.util.Map)
org/apache/xmlgraphics/image/loader/impl/ImageConverterG2D2Bitmap/paintToBufferedImage(org.apache.xmlgraphics.image.loader.impl.ImageGraphics2D,int,boolean,int)#java/awt/Graphics2D/dispose()
org/apache/xmlgraphics/image/loader/impl/ImageConverterG2D2Bitmap/paintToBufferedImage(org.apache.xmlgraphics.image.loader.impl.ImageGraphics2D,int,boolean,int)#java/awt/image/BufferedImage/BufferedImage(int,int,int)
org/apache/xmlgraphics/image/loader/impl/ImageConverterG2D2Bitmap/paintToBufferedImage(org.apache.xmlgraphics.image.loader.impl.ImageGraphics2D,int,boolean,int)#java/awt/Graphics2D/scale(double,double)
org/apache/xmlgraphics/image/loader/impl/ImageConverterG2D2Bitmap/paintToBufferedImage(org.apache.xmlgraphics.image.loader.impl.ImageGraphics2D,int,boolean,int)#java/awt/image/BufferedImage/createGraphics()
org/apache/xmlgraphics/image/loader/impl/ImageConverterG2D2Bitmap/paintToBufferedImage(org.apache.xmlgraphics.image.loader.impl.ImageGraphics2D,int,boolean,int)#java/awt/Graphics2D/setColor(java.awt.Color)
org/apache/xmlgraphics/image/rendered/FormatRed/copyData(java.awt.image.WritableRaster)#org/apache/xmlgraphics/image/rendered/FormatRed/getColorModel()
org/apache/xmlgraphics/image/rendered/FormatRed/copyData(java.awt.image.WritableRaster)#org/apache/xmlgraphics/image/rendered/CachableRed/getSampleModel()
org/apache/xmlgraphics/image/rendered/FormatRed/copyData(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getWidth()
org/apache/xmlgraphics/image/rendered/FormatRed/copyData(java.awt.image.WritableRaster)#java/awt/image/SampleModel/createCompatibleSampleModel(int,int)
org/apache/xmlgraphics/image/rendered/FormatRed/copyData(java.awt.image.WritableRaster)#java/awt/image/ColorModel/isAlphaPremultiplied()
org/apache/xmlgraphics/image/rendered/FormatRed/copyData(java.awt.image.WritableRaster)#java/awt/image/BufferedImage/BufferedImage(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)
org/apache/xmlgraphics/image/rendered/FormatRed/copyData(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getMinX()
org/apache/xmlgraphics/image/rendered/FormatRed/copyData(java.awt.image.WritableRaster)#org/apache/xmlgraphics/image/rendered/CachableRed/getColorModel()
org/apache/xmlgraphics/image/rendered/FormatRed/copyData(java.awt.image.WritableRaster)#java/awt/image/Raster/createWritableRaster(java.awt.image.SampleModel,java.awt.Point)
org/apache/xmlgraphics/image/rendered/FormatRed/copyData(java.awt.image.WritableRaster)#org/apache/xmlgraphics/image/rendered/CachableRed/copyData(java.awt.image.WritableRaster)
org/apache/xmlgraphics/image/rendered/FormatRed/copyData(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/createWritableTranslatedChild(int,int)
org/apache/xmlgraphics/image/rendered/FormatRed/copyData(java.awt.image.WritableRaster)#java/awt/Point/Point(int,int)
org/apache/xmlgraphics/image/rendered/FormatRed/copyData(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getMinY()
org/apache/xmlgraphics/image/rendered/FormatRed/copyData(java.awt.image.WritableRaster)#java/awt/image/WritableRaster/getHeight()
org/apache/xmlgraphics/image/rendered/FormatRed/makeColorModel(org.apache.xmlgraphics.image.rendered.CachableRed,java.awt.image.SampleModel)#java/awt/image/ComponentColorModel/ComponentColorModel(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)
org/apache/xmlgraphics/image/rendered/FormatRed/makeColorModel(org.apache.xmlgraphics.image.rendered.CachableRed,java.awt.image.SampleModel)#java/awt/image/SampleModel/getNumBands()
org/apache/xmlgraphics/image/rendered/FormatRed/makeColorModel(org.apache.xmlgraphics.image.rendered.CachableRed,java.awt.image.SampleModel)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/rendered/FormatRed/makeColorModel(org.apache.xmlgraphics.image.rendered.CachableRed,java.awt.image.SampleModel)#java/lang/StringBuilder/append(int)
org/apache/xmlgraphics/image/rendered/FormatRed/makeColorModel(org.apache.xmlgraphics.image.rendered.CachableRed,java.awt.image.SampleModel)#java/awt/image/SampleModel/getDataType()
org/apache/xmlgraphics/image/rendered/FormatRed/makeColorModel(org.apache.xmlgraphics.image.rendered.CachableRed,java.awt.image.SampleModel)#java/awt/image/ColorModel/isAlphaPremultiplied()
org/apache/xmlgraphics/image/rendered/FormatRed/makeColorModel(org.apache.xmlgraphics.image.rendered.CachableRed,java.awt.image.SampleModel)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/rendered/FormatRed/makeColorModel(org.apache.xmlgraphics.image.rendered.CachableRed,java.awt.image.SampleModel)#java/awt/image/ColorModel/hasAlpha()
org/apache/xmlgraphics/image/rendered/FormatRed/makeColorModel(org.apache.xmlgraphics.image.rendered.CachableRed,java.awt.image.SampleModel)#java/awt/image/ColorModel/getNumComponents()
org/apache/xmlgraphics/image/rendered/FormatRed/makeColorModel(org.apache.xmlgraphics.image.rendered.CachableRed,java.awt.image.SampleModel)#java/awt/image/SinglePixelPackedSampleModel/getBitMasks()
org/apache/xmlgraphics/image/rendered/FormatRed/makeColorModel(org.apache.xmlgraphics.image.rendered.CachableRed,java.awt.image.SampleModel)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/apache/xmlgraphics/image/rendered/FormatRed/makeColorModel(org.apache.xmlgraphics.image.rendered.CachableRed,java.awt.image.SampleModel)#org/apache/xmlgraphics/image/rendered/CachableRed/getColorModel()
org/apache/xmlgraphics/image/rendered/FormatRed/makeColorModel(org.apache.xmlgraphics.image.rendered.CachableRed,java.awt.image.SampleModel)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/rendered/FormatRed/makeColorModel(org.apache.xmlgraphics.image.rendered.CachableRed,java.awt.image.SampleModel)#java/awt/image/DirectColorModel/DirectColorModel(java.awt.color.ColorSpace,int,int,int,int,int,boolean,int)
org/apache/xmlgraphics/image/rendered/FormatRed/makeColorModel(org.apache.xmlgraphics.image.rendered.CachableRed,java.awt.image.SampleModel)#java/awt/image/ColorModel/getColorSpace()
org/apache/xmlgraphics/xmp/XMPProperty/toSAX(org.xml.sax.ContentHandler)#org/xml/sax/helpers/AttributesImpl/AttributesImpl()
org/apache/xmlgraphics/xmp/XMPProperty/toSAX(org.xml.sax.ContentHandler)#java/lang/Object/toString()
org/apache/xmlgraphics/xmp/XMPProperty/toSAX(org.xml.sax.ContentHandler)#org/apache/xmlgraphics/xmp/XMPComplexValue/toSAX(org.xml.sax.ContentHandler)
org/apache/xmlgraphics/xmp/XMPProperty/toSAX(org.xml.sax.ContentHandler)#java/net/URI/toString()
org/apache/xmlgraphics/xmp/XMPProperty/toSAX(org.xml.sax.ContentHandler)#org/xml/sax/ContentHandler/endElement(java.lang.String,java.lang.String,java.lang.String)
org/apache/xmlgraphics/xmp/XMPProperty/toSAX(org.xml.sax.ContentHandler)#org/xml/sax/ContentHandler/characters(char[],int,int)
org/apache/xmlgraphics/xmp/XMPProperty/toSAX(org.xml.sax.ContentHandler)#org/xml/sax/ContentHandler/startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)
org/apache/xmlgraphics/xmp/XMPProperty/toSAX(org.xml.sax.ContentHandler)#org/xml/sax/helpers/AttributesImpl/addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
org/apache/xmlgraphics/xmp/XMPProperty/toSAX(org.xml.sax.ContentHandler)#java/lang/String/toCharArray()
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawCCITTFax/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawCCITTFax$FillOrderChangeInputStream/FillOrderChangeInputStream(java.io.InputStream)
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawCCITTFax/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#javax/imageio/stream/ImageInputStream/seek(long)
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawCCITTFax/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/lang/String/equals(java.lang.Object)
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawCCITTFax/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#javax/imageio/stream/ImageInputStream/reset()
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawCCITTFax/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawCCITTFax/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawCCITTFax/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#org/apache/commons/logging/Log/debug(java.lang.Object)
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawCCITTFax/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawCCITTFax/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/lang/StringBuilder/append(int)
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawCCITTFax/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/loader/impl/ImageLoaderRawCCITTFax/loadImage(org.apache.xmlgraphics.image.loader.ImageInfo,java.util.Map,org.apache.xmlgraphics.image.loader.ImageSessionContext)#javax/imageio/stream/ImageInputStream/mark()
org/apache/xmlgraphics/image/loader/impl/PNGFile/getImageRawPNG(org.apache.xmlgraphics.image.loader.ImageInfo)#java/io/SequenceInputStream/SequenceInputStream(java.util.Enumeration)
org/apache/xmlgraphics/image/loader/impl/PNGFile/getImageRawPNG(org.apache.xmlgraphics.image.loader.ImageInfo)#java/awt/image/ComponentColorModel/ComponentColorModel(java.awt.color.ColorSpace,boolean,boolean,int,int)
org/apache/xmlgraphics/image/loader/impl/PNGFile/getImageRawPNG(org.apache.xmlgraphics.image.loader.ImageInfo)#java/lang/StringBuilder/append(int)
org/apache/xmlgraphics/image/loader/impl/PNGFile/getImageRawPNG(org.apache.xmlgraphics.image.loader.ImageInfo)#java/util/Collections/enumeration(java.util.Collection)
org/apache/xmlgraphics/image/loader/impl/PNGFile/getImageRawPNG(org.apache.xmlgraphics.image.loader.ImageInfo)#java/awt/image/IndexColorModel/IndexColorModel(int,int,byte[],byte[],byte[])
org/apache/xmlgraphics/image/loader/impl/PNGFile/getImageRawPNG(org.apache.xmlgraphics.image.loader.ImageInfo)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/loader/impl/PNGFile/getImageRawPNG(org.apache.xmlgraphics.image.loader.ImageInfo)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/loader/impl/PNGFile/getImageRawPNG(org.apache.xmlgraphics.image.loader.ImageInfo)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/loader/impl/PNGFile/getImageRawPNG(org.apache.xmlgraphics.image.loader.ImageInfo)#java/awt/color/ColorSpace/getInstance(int)
org/apache/xmlgraphics/image/loader/impl/PNGFile/getImageRawPNG(org.apache.xmlgraphics.image.loader.ImageInfo)#java/awt/image/IndexColorModel/IndexColorModel(int,int,byte[],byte[],byte[],byte[])
org/apache/xmlgraphics/image/rendered/BufferedImageCachableRed/getData(java.awt.Rectangle)#org/apache/xmlgraphics/image/rendered/BufferedImageCachableRed/getMinY()
org/apache/xmlgraphics/image/rendered/BufferedImageCachableRed/getData(java.awt.Rectangle)#java/awt/Rectangle/translate(int,int)
org/apache/xmlgraphics/image/rendered/BufferedImageCachableRed/getData(java.awt.Rectangle)#java/awt/image/Raster/createTranslatedChild(int,int)
org/apache/xmlgraphics/image/rendered/BufferedImageCachableRed/getData(java.awt.Rectangle)#java/awt/Rectangle/intersection(java.awt.Rectangle)
org/apache/xmlgraphics/image/rendered/BufferedImageCachableRed/getData(java.awt.Rectangle)#java/awt/image/Raster/getMinX()
org/apache/xmlgraphics/image/rendered/BufferedImageCachableRed/getData(java.awt.Rectangle)#java/awt/Rectangle/intersects(java.awt.Rectangle)
org/apache/xmlgraphics/image/rendered/BufferedImageCachableRed/getData(java.awt.Rectangle)#java/awt/image/BufferedImage/getData(java.awt.Rectangle)
org/apache/xmlgraphics/image/rendered/BufferedImageCachableRed/getData(java.awt.Rectangle)#org/apache/xmlgraphics/image/rendered/BufferedImageCachableRed/getMinX()
org/apache/xmlgraphics/image/rendered/BufferedImageCachableRed/getData(java.awt.Rectangle)#java/awt/Rectangle/clone()
org/apache/xmlgraphics/image/rendered/BufferedImageCachableRed/getData(java.awt.Rectangle)#java/awt/image/Raster/getMinY()
org/apache/xmlgraphics/ps/dsc/events/AbstractResourcesDSCComment/parseValue(java.lang.String)#org/apache/xmlgraphics/ps/dsc/events/AbstractResourcesDSCComment/splitParams(java.lang.String)
org/apache/xmlgraphics/ps/dsc/events/AbstractResourcesDSCComment/parseValue(java.lang.String)#java/util/Iterator/hasNext()
org/apache/xmlgraphics/ps/dsc/events/AbstractResourcesDSCComment/parseValue(java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/ps/dsc/events/AbstractResourcesDSCComment/parseValue(java.lang.String)#java/util/Iterator/next()
org/apache/xmlgraphics/ps/dsc/events/AbstractResourcesDSCComment/parseValue(java.lang.String)#java/lang/String/equals(java.lang.Object)
org/apache/xmlgraphics/ps/dsc/events/AbstractResourcesDSCComment/parseValue(java.lang.String)#java/util/Set/contains(java.lang.Object)
org/apache/xmlgraphics/ps/dsc/events/AbstractResourcesDSCComment/parseValue(java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/ps/dsc/events/AbstractResourcesDSCComment/parseValue(java.lang.String)#java/lang/Integer/parseInt(java.lang.String)
org/apache/xmlgraphics/ps/dsc/events/AbstractResourcesDSCComment/parseValue(java.lang.String)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/apache/xmlgraphics/ps/dsc/events/AbstractResourcesDSCComment/parseValue(java.lang.String)#java/util/List/iterator()
org/apache/xmlgraphics/ps/dsc/events/AbstractResourcesDSCComment/parseValue(java.lang.String)#java/lang/Float/parseFloat(java.lang.String)
org/apache/xmlgraphics/ps/dsc/events/AbstractResourcesDSCComment/parseValue(java.lang.String)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/ps/dsc/events/AbstractResourcesDSCComment/generate(org.apache.xmlgraphics.ps.PSGenerator)#java/util/Iterator/hasNext()
org/apache/xmlgraphics/ps/dsc/events/AbstractResourcesDSCComment/generate(org.apache.xmlgraphics.ps.PSGenerator)#java/lang/StringBuffer/toString()
org/apache/xmlgraphics/ps/dsc/events/AbstractResourcesDSCComment/generate(org.apache.xmlgraphics.ps.PSGenerator)#java/util/Set/iterator()
org/apache/xmlgraphics/ps/dsc/events/AbstractResourcesDSCComment/generate(org.apache.xmlgraphics.ps.PSGenerator)#java/lang/StringBuffer/append(java.lang.String)
org/apache/xmlgraphics/ps/dsc/events/AbstractResourcesDSCComment/generate(org.apache.xmlgraphics.ps.PSGenerator)#java/lang/StringBuffer/StringBuffer()
org/apache/xmlgraphics/ps/dsc/events/AbstractResourcesDSCComment/generate(org.apache.xmlgraphics.ps.PSGenerator)#java/lang/StringBuffer/setLength(int)
org/apache/xmlgraphics/ps/dsc/events/AbstractResourcesDSCComment/generate(org.apache.xmlgraphics.ps.PSGenerator)#java/util/Set/size()
org/apache/xmlgraphics/ps/dsc/events/AbstractResourcesDSCComment/generate(org.apache.xmlgraphics.ps.PSGenerator)#org/apache/xmlgraphics/ps/dsc/events/AbstractResourcesDSCComment/getName()
org/apache/xmlgraphics/ps/dsc/events/AbstractResourcesDSCComment/generate(org.apache.xmlgraphics.ps.PSGenerator)#java/util/Iterator/next()
org/apache/xmlgraphics/util/uri/DataURIResolver/parseDataURI(java.lang.String)#org/apache/commons/logging/Log/warn(java.lang.Object)
org/apache/xmlgraphics/util/uri/DataURIResolver/parseDataURI(java.lang.String)#java/lang/String/substring(int,int)
org/apache/xmlgraphics/util/uri/DataURIResolver/parseDataURI(java.lang.String)#java/lang/String/indexOf(java.lang.String)
org/apache/xmlgraphics/util/uri/DataURIResolver/parseDataURI(java.lang.String)#java/net/URLDecoder/decode(java.lang.String,java.lang.String)
org/apache/xmlgraphics/util/uri/DataURIResolver/parseDataURI(java.lang.String)#java/io/UnsupportedEncodingException/getMessage()
org/apache/xmlgraphics/util/uri/DataURIResolver/parseDataURI(java.lang.String)#java/lang/String/getBytes()
org/apache/xmlgraphics/util/uri/DataURIResolver/parseDataURI(java.lang.String)#java/lang/String/indexOf(int)
org/apache/xmlgraphics/util/uri/DataURIResolver/parseDataURI(java.lang.String)#java/lang/String/endsWith(java.lang.String)
org/apache/xmlgraphics/util/uri/DataURIResolver/parseDataURI(java.lang.String)#java/io/ByteArrayInputStream/ByteArrayInputStream(byte[])
org/apache/xmlgraphics/util/uri/DataURIResolver/parseDataURI(java.lang.String)#java/lang/IllegalArgumentException/getMessage()
org/apache/xmlgraphics/util/uri/DataURIResolver/parseDataURI(java.lang.String)#java/io/StringReader/StringReader(java.lang.String)
org/apache/xmlgraphics/util/uri/DataURIResolver/parseDataURI(java.lang.String)#javax/xml/transform/stream/StreamSource/StreamSource(java.io.InputStream)
org/apache/xmlgraphics/util/uri/DataURIResolver/parseDataURI(java.lang.String)#java/lang/String/substring(int)
org/apache/xmlgraphics/util/uri/DataURIResolver/parseDataURI(java.lang.String)#javax/xml/transform/stream/StreamSource/StreamSource(java.io.Reader)
org/apache/xmlgraphics/ps/ImageFormGenerator/generatePaintProc(org.apache.xmlgraphics.ps.PSGenerator)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/ps/ImageFormGenerator/generatePaintProc(org.apache.xmlgraphics.ps.PSGenerator)#java/lang/Integer/toString(int)
org/apache/xmlgraphics/ps/ImageFormGenerator/generatePaintProc(org.apache.xmlgraphics.ps.PSGenerator)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/ps/ImageFormGenerator/generatePaintProc(org.apache.xmlgraphics.ps.PSGenerator)#java/awt/geom/Dimension2D/getWidth()
org/apache/xmlgraphics/ps/ImageFormGenerator/generatePaintProc(org.apache.xmlgraphics.ps.PSGenerator)#java/awt/geom/AffineTransform/AffineTransform()
org/apache/xmlgraphics/ps/ImageFormGenerator/generatePaintProc(org.apache.xmlgraphics.ps.PSGenerator)#org/apache/xmlgraphics/ps/PSDictionary/put(java.lang.Object,java.lang.Object)
org/apache/xmlgraphics/ps/ImageFormGenerator/generatePaintProc(org.apache.xmlgraphics.ps.PSGenerator)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/ps/ImageFormGenerator/generatePaintProc(org.apache.xmlgraphics.ps.PSGenerator)#java/awt/geom/AffineTransform/scale(double,double)
org/apache/xmlgraphics/ps/ImageFormGenerator/generatePaintProc(org.apache.xmlgraphics.ps.PSGenerator)#org/apache/xmlgraphics/ps/ImageFormGenerator/getDimensions()
org/apache/xmlgraphics/ps/ImageFormGenerator/generatePaintProc(org.apache.xmlgraphics.ps.PSGenerator)#java/awt/geom/Dimension2D/getHeight()
org/apache/xmlgraphics/image/loader/impl/PreloaderEPS/preloadImage(java.lang.String,javax.xml.transform.Source,org.apache.xmlgraphics.image.loader.ImageContext)#javax/imageio/stream/ImageInputStream/readUnsignedInt()
org/apache/xmlgraphics/image/loader/impl/PreloaderEPS/preloadImage(java.lang.String,javax.xml.transform.Source,org.apache.xmlgraphics.image.loader.ImageContext)#javax/imageio/stream/ImageInputStream/seek(long)
org/apache/xmlgraphics/image/loader/impl/PreloaderEPS/preloadImage(java.lang.String,javax.xml.transform.Source,org.apache.xmlgraphics.image.loader.ImageContext)#javax/imageio/stream/ImageInputStream/reset()
org/apache/xmlgraphics/image/loader/impl/PreloaderEPS/preloadImage(java.lang.String,javax.xml.transform.Source,org.apache.xmlgraphics.image.loader.ImageContext)#javax/imageio/stream/ImageInputStream/setByteOrder(java.nio.ByteOrder)
org/apache/xmlgraphics/image/loader/impl/PreloaderEPS/preloadImage(java.lang.String,javax.xml.transform.Source,org.apache.xmlgraphics.image.loader.ImageContext)#javax/imageio/stream/ImageInputStream/mark()
org/apache/xmlgraphics/image/loader/impl/PreloaderEPS/preloadImage(java.lang.String,javax.xml.transform.Source,org.apache.xmlgraphics.image.loader.ImageContext)#javax/imageio/stream/ImageInputStream/getByteOrder()
org/apache/xmlgraphics/image/loader/impl/PreloaderEPS/preloadImage(java.lang.String,javax.xml.transform.Source,org.apache.xmlgraphics.image.loader.ImageContext)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/apache/xmlgraphics/image/loader/impl/PreloaderEPS/preloadImage(java.lang.String,javax.xml.transform.Source,org.apache.xmlgraphics.image.loader.ImageContext)#java/lang/IllegalStateException/IllegalStateException(java.lang.String)
org/apache/xmlgraphics/image/loader/impl/PreloaderEPS/preloadImage(java.lang.String,javax.xml.transform.Source,org.apache.xmlgraphics.image.loader.ImageContext)#javax/imageio/stream/ImageInputStream/getStreamPosition()
org/apache/xmlgraphics/image/loader/impl/PreloaderEPS/preloadImage(java.lang.String,javax.xml.transform.Source,org.apache.xmlgraphics.image.loader.ImageContext)#org/apache/xmlgraphics/image/loader/impl/PreloaderEPS$EPSBinaryFileHeader/access$000(org.apache.xmlgraphics.image.loader.impl.PreloaderEPS$EPSBinaryFileHeader)
org/apache/xmlgraphics/image/loader/impl/PreloaderEPS/determineSize(javax.imageio.stream.ImageInputStream,org.apache.xmlgraphics.image.loader.ImageContext,org.apache.xmlgraphics.image.loader.ImageInfo)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/apache/xmlgraphics/image/loader/impl/PreloaderEPS/determineSize(javax.imageio.stream.ImageInputStream,org.apache.xmlgraphics.image.loader.ImageContext,org.apache.xmlgraphics.image.loader.ImageInfo)#java/lang/Math/round(double)
org/apache/xmlgraphics/image/loader/impl/PreloaderEPS/determineSize(javax.imageio.stream.ImageInputStream,org.apache.xmlgraphics.image.loader.ImageContext,org.apache.xmlgraphics.image.loader.ImageInfo)#java/io/IOException/IOException(java.lang.String)
org/apache/xmlgraphics/image/loader/impl/PreloaderEPS/determineSize(javax.imageio.stream.ImageInputStream,org.apache.xmlgraphics.image.loader.ImageContext,org.apache.xmlgraphics.image.loader.ImageInfo)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/loader/impl/PreloaderEPS/determineSize(javax.imageio.stream.ImageInputStream,org.apache.xmlgraphics.image.loader.ImageContext,org.apache.xmlgraphics.image.loader.ImageInfo)#java/awt/geom/Rectangle2D/getWidth()
org/apache/xmlgraphics/image/loader/impl/PreloaderEPS/determineSize(javax.imageio.stream.ImageInputStream,org.apache.xmlgraphics.image.loader.ImageContext,org.apache.xmlgraphics.image.loader.ImageInfo)#javax/imageio/stream/ImageInputStream/reset()
org/apache/xmlgraphics/image/loader/impl/PreloaderEPS/determineSize(javax.imageio.stream.ImageInputStream,org.apache.xmlgraphics.image.loader.ImageContext,org.apache.xmlgraphics.image.loader.ImageInfo)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/loader/impl/PreloaderEPS/determineSize(javax.imageio.stream.ImageInputStream,org.apache.xmlgraphics.image.loader.ImageContext,org.apache.xmlgraphics.image.loader.ImageInfo)#org/apache/xmlgraphics/ps/dsc/DSCException/getMessage()
org/apache/xmlgraphics/image/loader/impl/PreloaderEPS/determineSize(javax.imageio.stream.ImageInputStream,org.apache.xmlgraphics.image.loader.ImageContext,org.apache.xmlgraphics.image.loader.ImageInfo)#java/lang/String/equals(java.lang.Object)
org/apache/xmlgraphics/image/loader/impl/PreloaderEPS/determineSize(javax.imageio.stream.ImageInputStream,org.apache.xmlgraphics.image.loader.ImageContext,org.apache.xmlgraphics.image.loader.ImageInfo)#java/awt/geom/Rectangle2D/getHeight()
org/apache/xmlgraphics/image/loader/impl/PreloaderEPS/determineSize(javax.imageio.stream.ImageInputStream,org.apache.xmlgraphics.image.loader.ImageContext,org.apache.xmlgraphics.image.loader.ImageInfo)#java/awt/geom/Rectangle2D/clone()
org/apache/xmlgraphics/image/loader/impl/PreloaderEPS/determineSize(javax.imageio.stream.ImageInputStream,org.apache.xmlgraphics.image.loader.ImageContext,org.apache.xmlgraphics.image.loader.ImageInfo)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/loader/impl/PreloaderEPS/determineSize(javax.imageio.stream.ImageInputStream,org.apache.xmlgraphics.image.loader.ImageContext,org.apache.xmlgraphics.image.loader.ImageInfo)#javax/imageio/stream/ImageInputStream/mark()
org/apache/xmlgraphics/image/codec/tiff/TIFFImage/getTile(int,int)#org/apache/xmlgraphics/image/codec/tiff/TIFFImage/getColorModel()
org/apache/xmlgraphics/image/codec/tiff/TIFFImage/getTile(int,int)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/codec/tiff/TIFFImage/getTile(int,int)#java/io/IOException/getMessage()
org/apache/xmlgraphics/image/codec/tiff/TIFFImage/getTile(int,int)#java/awt/image/DataBufferUShort/getData()
org/apache/xmlgraphics/image/codec/tiff/TIFFImage/getTile(int,int)#java/awt/image/DataBufferByte/getData()
org/apache/xmlgraphics/image/codec/tiff/TIFFImage/getTile(int,int)#java/awt/image/SampleModel/getDataType()
org/apache/xmlgraphics/image/codec/tiff/TIFFImage/getTile(int,int)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/codec/tiff/TIFFImage/getTile(int,int)#org/apache/xmlgraphics/image/codec/tiff/TIFFImage/getSampleModel()
org/apache/xmlgraphics/image/codec/tiff/TIFFImage/getTile(int,int)#java/lang/System/arraycopy(java.lang.Object,int,java.lang.Object,int,int)
org/apache/xmlgraphics/image/codec/tiff/TIFFImage/getTile(int,int)#java/awt/image/WritableRaster/getDataBuffer()
org/apache/xmlgraphics/image/codec/tiff/TIFFImage/getTile(int,int)#java/awt/image/WritableRaster/getBounds()
org/apache/xmlgraphics/image/codec/tiff/TIFFImage/getTile(int,int)#java/awt/Rectangle/Rectangle(int,int,int,int)
org/apache/xmlgraphics/image/codec/tiff/TIFFImage/getTile(int,int)#java/lang/StringBuilder/append(int)
org/apache/xmlgraphics/image/codec/tiff/TIFFImage/getTile(int,int)#org/apache/xmlgraphics/image/codec/tiff/TIFFImage/makeTile(int,int)
org/apache/xmlgraphics/image/codec/tiff/TIFFImage/getTile(int,int)#java/awt/image/DataBufferShort/getData()
org/apache/xmlgraphics/image/codec/tiff/TIFFImage/getTile(int,int)#java/awt/image/WritableRaster/getMinX()
org/apache/xmlgraphics/image/codec/tiff/TIFFImage/getTile(int,int)#java/lang/RuntimeException/RuntimeException(java.lang.String)
org/apache/xmlgraphics/image/codec/tiff/TIFFImage/getTile(int,int)#java/awt/image/WritableRaster/getMinY()
org/apache/xmlgraphics/image/codec/tiff/TIFFImage/getTile(int,int)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/apache/xmlgraphics/image/codec/tiff/TIFFImage/getTile(int,int)#java/awt/image/WritableRaster/setPixels(int,int,int,int,int[])
org/apache/xmlgraphics/image/codec/tiff/TIFFImage/getTile(int,int)#java/awt/image/DataBufferInt/getData()
org/apache/xmlgraphics/image/codec/tiff/TIFFImage/getTile(int,int)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_zTXt_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/util/zip/InflaterInputStream/InflaterInputStream(java.io.InputStream)
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_zTXt_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#org/apache/xmlgraphics/image/codec/png/PNGRed$PNGChunk/getByte(int)
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_zTXt_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/io/ByteArrayInputStream/ByteArrayInputStream(byte[],int,int)
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_zTXt_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/lang/StringBuffer/append(char)
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_zTXt_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#org/apache/xmlgraphics/image/codec/png/PNGRed$PNGChunk/getData()
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_zTXt_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/util/List/add(java.lang.Object)
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_zTXt_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/lang/StringBuffer/StringBuffer()
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_zTXt_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/io/InputStream/read()
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_zTXt_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#org/apache/xmlgraphics/image/codec/png/PNGRed$PNGChunk/getLength()
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_zTXt_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/lang/Exception/printStackTrace()
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_zTXt_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/lang/StringBuffer/toString()
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_IHDR_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_IHDR_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#org/apache/xmlgraphics/image/codec/png/PNGRed$PNGChunk/getInt4(int)
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_IHDR_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/io/PrintStream/println(java.lang.String)
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_IHDR_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/lang/Integer/Integer(int)
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_IHDR_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#org/apache/xmlgraphics/image/codec/png/PNGEncodeParam$Gray/Gray()
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_IHDR_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/lang/RuntimeException/RuntimeException(java.lang.String)
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_IHDR_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/lang/Float/Float(float)
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_IHDR_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#org/apache/xmlgraphics/image/codec/png/PNGEncodeParam$Palette/Palette()
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_IHDR_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#org/apache/xmlgraphics/image/codec/png/PNGRed$PNGChunk/getInt1(int)
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_IHDR_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/awt/Rectangle/Rectangle(int,int,int,int)
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_IHDR_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#org/apache/xmlgraphics/image/codec/png/PNGEncodeParam$RGB/RGB()
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/util/zip/Inflater/Inflater()
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/io/DataInputStream/close()
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/lang/StringBuilder/append(int)
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/util/Collections/enumeration(java.util.Collection)
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/awt/image/IndexColorModel/IndexColorModel(int,int,byte[],byte[],byte[])
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#org/apache/xmlgraphics/image/codec/png/PNGRed/init(org.apache.xmlgraphics.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/awt/image/IndexColorModel/IndexColorModel(int,int,byte[],byte[],byte[],byte[])
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/io/InputStream/close()
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/lang/StringBuilder/append(char)
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/io/SequenceInputStream/SequenceInputStream(java.util.Enumeration)
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/awt/image/WritableRaster/getSampleModel()
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/lang/String/toLowerCase()
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/util/List/size()
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/io/DataInputStream/DataInputStream(java.io.InputStream)
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/util/zip/InflaterInputStream/InflaterInputStream(java.io.InputStream,java.util.zip.Inflater)
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/codec/png/PNGRed/parse_IEND_chunk(org.apache.xmlgraphics.image.codec.png.PNGRed$PNGChunk)#java/util/List/get(int)
org/apache/xmlgraphics/image/codec/png/PNGRed/decodePass(java.awt.image.WritableRaster,int,int,int,int,int,int)#java/awt/image/DataBuffer/getDataType()
org/apache/xmlgraphics/image/codec/png/PNGRed/decodePass(java.awt.image.WritableRaster,int,int,int,int,int,int)#java/awt/image/DataBufferUShort/getData()
org/apache/xmlgraphics/image/codec/png/PNGRed/decodePass(java.awt.image.WritableRaster,int,int,int,int,int,int)#java/awt/image/DataBufferByte/getData()
org/apache/xmlgraphics/image/codec/png/PNGRed/decodePass(java.awt.image.WritableRaster,int,int,int,int,int,int)#java/lang/Exception/printStackTrace()
org/apache/xmlgraphics/image/codec/png/PNGRed/decodePass(java.awt.image.WritableRaster,int,int,int,int,int,int)#java/io/DataInputStream/readFully(byte[],int,int)
org/apache/xmlgraphics/image/codec/png/PNGRed/decodePass(java.awt.image.WritableRaster,int,int,int,int,int,int)#java/lang/RuntimeException/RuntimeException(java.lang.String)
org/apache/xmlgraphics/image/codec/png/PNGRed/decodePass(java.awt.image.WritableRaster,int,int,int,int,int,int)#java/awt/image/WritableRaster/getDataBuffer()
org/apache/xmlgraphics/image/codec/png/PNGRed/decodePass(java.awt.image.WritableRaster,int,int,int,int,int,int)#java/io/DataInputStream/read()
org/apache/xmlgraphics/image/codec/png/PNGRed/decodePass(java.awt.image.WritableRaster,int,int,int,int,int,int)#java/lang/System/arraycopy(java.lang.Object,int,java.lang.Object,int,int)
org/apache/xmlgraphics/image/loader/pipeline/PipelineFactory/newImageConverterPipeline(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/loader/pipeline/PipelineFactory/newImageConverterPipeline(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor)#org/apache/commons/logging/Log/isDebugEnabled()
org/apache/xmlgraphics/image/loader/pipeline/PipelineFactory/newImageConverterPipeline(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/loader/pipeline/PipelineFactory/newImageConverterPipeline(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor)#java/lang/StringBuilder/append(java.lang.Object)
org/apache/xmlgraphics/image/loader/pipeline/PipelineFactory/newImageConverterPipeline(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor)#org/apache/xmlgraphics/image/loader/pipeline/PipelineFactory$PipelineComparator/PipelineComparator(org.apache.xmlgraphics.image.loader.pipeline.PipelineFactory$1)
org/apache/xmlgraphics/image/loader/pipeline/PipelineFactory/newImageConverterPipeline(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/loader/pipeline/PipelineFactory/newImageConverterPipeline(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor)#org/apache/commons/logging/Log/debug(java.lang.Object)
org/apache/xmlgraphics/image/loader/pipeline/PipelineFactory/newImageConverterPipeline(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor)#java/util/Arrays/sort(java.lang.Object[],java.util.Comparator)
org/apache/xmlgraphics/image/loader/pipeline/PipelineFactory/newImageConverterPipeline(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor)#java/lang/StringBuilder/append(int)
org/apache/xmlgraphics/image/loader/pipeline/PipelineFactory/determineCandidatePipelines(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor)#java/util/ArrayList/ArrayList()
org/apache/xmlgraphics/image/loader/pipeline/PipelineFactory/determineCandidatePipelines(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor)#java/util/List/size()
org/apache/xmlgraphics/image/loader/pipeline/PipelineFactory/determineCandidatePipelines(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor)#java/util/List/toArray(java.lang.Object[])
org/apache/xmlgraphics/image/loader/pipeline/PipelineFactory/determineCandidatePipelines(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor)#java/util/List/add(java.lang.Object)
org/apache/xmlgraphics/image/loader/pipeline/PipelineFactory/determineCandidatePipelines(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/loader/pipeline/PipelineFactory/determineCandidatePipelines(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/loader/pipeline/PipelineFactory/determineCandidatePipelines(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/loader/pipeline/PipelineFactory/determineCandidatePipelines(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor)#org/apache/commons/logging/Log/trace(java.lang.Object)
org/apache/xmlgraphics/image/loader/pipeline/PipelineFactory/determineCandidatePipelines(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor)#java/lang/StringBuilder/append(java.lang.Object)
org/apache/xmlgraphics/image/loader/pipeline/PipelineFactory/determineCandidatePipelines(org.apache.xmlgraphics.image.loader.ImageInfo,org.apache.xmlgraphics.image.loader.ImageFlavor)#org/apache/commons/logging/Log/isTraceEnabled()
org/apache/xmlgraphics/image/loader/pipeline/PipelineFactory/findPipeline(org.apache.xmlgraphics.util.dijkstra.DefaultEdgeDirectory,org.apache.xmlgraphics.image.loader.ImageFlavor,org.apache.xmlgraphics.image.loader.pipeline.ImageRepresentation)#java/util/LinkedList/iterator()
org/apache/xmlgraphics/image/loader/pipeline/PipelineFactory/findPipeline(org.apache.xmlgraphics.util.dijkstra.DefaultEdgeDirectory,org.apache.xmlgraphics.image.loader.ImageFlavor,org.apache.xmlgraphics.image.loader.pipeline.ImageRepresentation)#java/util/Iterator/hasNext()
org/apache/xmlgraphics/image/loader/pipeline/PipelineFactory/findPipeline(org.apache.xmlgraphics.util.dijkstra.DefaultEdgeDirectory,org.apache.xmlgraphics.image.loader.ImageFlavor,org.apache.xmlgraphics.image.loader.pipeline.ImageRepresentation)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/loader/pipeline/PipelineFactory/findPipeline(org.apache.xmlgraphics.util.dijkstra.DefaultEdgeDirectory,org.apache.xmlgraphics.image.loader.ImageFlavor,org.apache.xmlgraphics.image.loader.pipeline.ImageRepresentation)#java/lang/StringBuilder/append(int)
org/apache/xmlgraphics/image/loader/pipeline/PipelineFactory/findPipeline(org.apache.xmlgraphics.util.dijkstra.DefaultEdgeDirectory,org.apache.xmlgraphics.image.loader.ImageFlavor,org.apache.xmlgraphics.image.loader.pipeline.ImageRepresentation)#org/apache/commons/logging/Log/isTraceEnabled()
org/apache/xmlgraphics/image/loader/pipeline/PipelineFactory/findPipeline(org.apache.xmlgraphics.util.dijkstra.DefaultEdgeDirectory,org.apache.xmlgraphics.image.loader.ImageFlavor,org.apache.xmlgraphics.image.loader.pipeline.ImageRepresentation)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/loader/pipeline/PipelineFactory/findPipeline(org.apache.xmlgraphics.util.dijkstra.DefaultEdgeDirectory,org.apache.xmlgraphics.image.loader.ImageFlavor,org.apache.xmlgraphics.image.loader.pipeline.ImageRepresentation)#java/util/Iterator/next()
org/apache/xmlgraphics/image/loader/pipeline/PipelineFactory/findPipeline(org.apache.xmlgraphics.util.dijkstra.DefaultEdgeDirectory,org.apache.xmlgraphics.image.loader.ImageFlavor,org.apache.xmlgraphics.image.loader.pipeline.ImageRepresentation)#java/util/LinkedList/addFirst(java.lang.Object)
org/apache/xmlgraphics/image/loader/pipeline/PipelineFactory/findPipeline(org.apache.xmlgraphics.util.dijkstra.DefaultEdgeDirectory,org.apache.xmlgraphics.image.loader.ImageFlavor,org.apache.xmlgraphics.image.loader.pipeline.ImageRepresentation)#java/util/LinkedList/LinkedList()
org/apache/xmlgraphics/image/loader/pipeline/PipelineFactory/findPipeline(org.apache.xmlgraphics.util.dijkstra.DefaultEdgeDirectory,org.apache.xmlgraphics.image.loader.ImageFlavor,org.apache.xmlgraphics.image.loader.pipeline.ImageRepresentation)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/loader/pipeline/PipelineFactory/findPipeline(org.apache.xmlgraphics.util.dijkstra.DefaultEdgeDirectory,org.apache.xmlgraphics.image.loader.ImageFlavor,org.apache.xmlgraphics.image.loader.pipeline.ImageRepresentation)#org/apache/commons/logging/Log/trace(java.lang.Object)
org/apache/xmlgraphics/image/writer/imageio/ImageIOImageWriter/writeImage(java.awt.image.RenderedImage,java.io.OutputStream,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/ImageWriter/write(javax.imageio.metadata.IIOMetadata,javax.imageio.IIOImage,javax.imageio.ImageWriteParam)
org/apache/xmlgraphics/image/writer/imageio/ImageIOImageWriter/writeImage(java.awt.image.RenderedImage,java.io.OutputStream,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/ImageWriter/getDefaultImageMetadata(javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam)
org/apache/xmlgraphics/image/writer/imageio/ImageIOImageWriter/writeImage(java.awt.image.RenderedImage,java.io.OutputStream,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/IIOImage/IIOImage(java.awt.image.RenderedImage,java.util.List,javax.imageio.metadata.IIOMetadata)
org/apache/xmlgraphics/image/writer/imageio/ImageIOImageWriter/writeImage(java.awt.image.RenderedImage,java.io.OutputStream,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/ImageWriter/dispose()
org/apache/xmlgraphics/image/writer/imageio/ImageIOImageWriter/writeImage(java.awt.image.RenderedImage,java.io.OutputStream,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/ImageIO/createImageOutputStream(java.lang.Object)
org/apache/xmlgraphics/image/writer/imageio/ImageIOImageWriter/writeImage(java.awt.image.RenderedImage,java.io.OutputStream,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/stream/ImageOutputStream/close()
org/apache/xmlgraphics/image/writer/imageio/ImageIOImageWriter/writeImage(java.awt.image.RenderedImage,java.io.OutputStream,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/ImageWriteParam/getDestinationType()
org/apache/xmlgraphics/image/writer/imageio/ImageIOImageWriter/writeImage(java.awt.image.RenderedImage,java.io.OutputStream,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/ImageWriter/addIIOWriteWarningListener(javax.imageio.event.IIOWriteWarningListener)
org/apache/xmlgraphics/image/writer/imageio/ImageIOImageWriter/writeImage(java.awt.image.RenderedImage,java.io.OutputStream,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/ImageTypeSpecifier/createFromRenderedImage(java.awt.image.RenderedImage)
org/apache/xmlgraphics/image/writer/imageio/ImageIOImageWriter/writeImage(java.awt.image.RenderedImage,java.io.OutputStream,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/ImageWriter/setOutput(java.lang.Object)
org/apache/xmlgraphics/image/writer/imageio/ImageIOImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/writer/imageio/ImageIOImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/metadata/IIOInvalidTreeException/getMessage()
org/apache/xmlgraphics/image/writer/imageio/ImageIOImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/metadata/IIOMetadataNode/appendChild(org.w3c.dom.Node)
org/apache/xmlgraphics/image/writer/imageio/ImageIOImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#java/lang/Integer/doubleValue()
org/apache/xmlgraphics/image/writer/imageio/ImageIOImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#java/lang/RuntimeException/RuntimeException(java.lang.String)
org/apache/xmlgraphics/image/writer/imageio/ImageIOImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/metadata/IIOMetadata/mergeTree(java.lang.String,org.w3c.dom.Node)
org/apache/xmlgraphics/image/writer/imageio/ImageIOImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/metadata/IIOMetadataNode/setAttribute(java.lang.String,java.lang.String)
org/apache/xmlgraphics/image/writer/imageio/ImageIOImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/writer/imageio/ImageIOImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#java/lang/Double/toString(double)
org/apache/xmlgraphics/image/writer/imageio/ImageIOImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/metadata/IIOMetadata/isStandardMetadataFormatSupported()
org/apache/xmlgraphics/image/writer/imageio/ImageIOImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/metadata/IIOMetadata/getAsTree(java.lang.String)
org/apache/xmlgraphics/image/writer/imageio/ImageIOImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/writer/imageio/ImageIOImageWriter/updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.xmlgraphics.image.writer.ImageWriterParams)#javax/imageio/metadata/IIOMetadataNode/IIOMetadataNode(java.lang.String)
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/RenderedImage/getWidth()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/lang/Float/floatToIntBits(float)
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/Raster/getSampleModelTranslateY()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/DataBufferByte/getData()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/ColorModel/hasAlpha()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/MultiPixelPackedSampleModel/getOffset(int,int)
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/Raster/getPixels(int,int,int,int,float[])
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/IndexColorModel/getReds(byte[])
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/RenderedImage/getSampleModel()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/util/SortedSet/add(java.lang.Object)
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/io/OutputStream/close()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/io/ByteArrayOutputStream/writeTo(java.io.OutputStream)
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/MultiPixelPackedSampleModel/getNumBands()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/ComponentSampleModel/getScanlineStride()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/util/zip/Deflater/Deflater(int)
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/color/ColorSpace/getNumComponents()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/Raster/getSampleModel()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/lang/IllegalStateException/IllegalStateException(java.lang.String)
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/lang/Math/ceil(double)
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/util/ArrayList/ArrayList(int)
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/MultiPixelPackedSampleModel/getDataBitOffset()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/io/FileInputStream/read(byte[])
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/io/RandomAccessFile/RandomAccessFile(java.io.File,java.lang.String)
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/util/SortedSet/size()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/util/Iterator/hasNext()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/SampleModel/getNumBands()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/io/ByteArrayOutputStream/ByteArrayOutputStream(int)
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/MultiPixelPackedSampleModel/getPixelBitStride()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/lang/Integer/Integer(int)
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/RenderedImage/getTileHeight()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/Rectangle/Rectangle(int,int,int,int)
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/color/ColorSpace/getType()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/ComponentSampleModel/getBankIndices()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/ComponentSampleModel/getBandOffsets()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/Raster/getPixels(int,int,int,int,int[])
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/ComponentSampleModel/getOffset(int,int)
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/RenderedImage/getData(java.awt.Rectangle)
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/IndexColorModel/getMapSize()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/Raster/getSampleModelTranslateX()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/IndexColorModel/getGreens(byte[])
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/util/Iterator/next()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/io/OutputStream/write(int)
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/util/SortedSet/iterator()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/SampleModel/getDataType()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/ColorModel/isAlphaPremultiplied()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/MultiPixelPackedSampleModel/getScanlineStride()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/util/List/add(java.lang.Object)
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/io/OutputStream/write(byte[],int,int)
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/io/FileInputStream/close()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/util/List/contains(java.lang.Object)
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/SampleModel/getSampleSize()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/lang/RuntimeException/RuntimeException(java.lang.String)
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/RenderedImage/getTileWidth()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/io/File/createTempFile(java.lang.String,java.lang.String)
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/RenderedImage/getMinX()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/lang/Math/min(int,int)
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/lang/System/arraycopy(java.lang.Object,int,java.lang.Object,int,int)
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/RenderedImage/getColorModel()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/io/File/deleteOnExit()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/RenderedImage/getHeight()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/io/FileInputStream/FileInputStream(java.io.File)
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/util/TreeSet/TreeSet()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/Raster/getDataBuffer()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/RenderedImage/getMinY()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/ComponentSampleModel/getPixelStride()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/io/File/delete()
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/IndexColorModel/getBlues(byte[])
org/apache/xmlgraphics/image/codec/tiff/TIFFImageEncoder/encode(java.awt.image.RenderedImage,org.apache.xmlgraphics.image.codec.tiff.TIFFEncodeParam,int,boolean)#java/awt/image/ColorModel/getColorSpace()
org/apache/xmlgraphics/image/loader/impl/PreloaderTIFF/createImageInfo(java.lang.String,javax.imageio.stream.ImageInputStream,org.apache.xmlgraphics.image.loader.ImageContext)#java/lang/Math/ceil(double)
org/apache/xmlgraphics/image/loader/impl/PreloaderTIFF/createImageInfo(java.lang.String,javax.imageio.stream.ImageInputStream,org.apache.xmlgraphics.image.loader.ImageContext)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/apache/xmlgraphics/image/loader/impl/PreloaderTIFF/createImageInfo(java.lang.String,javax.imageio.stream.ImageInputStream,org.apache.xmlgraphics.image.loader.ImageContext)#java/lang/StringBuilder/append(java.lang.String)
org/apache/xmlgraphics/image/loader/impl/PreloaderTIFF/createImageInfo(java.lang.String,javax.imageio.stream.ImageInputStream,org.apache.xmlgraphics.image.loader.ImageContext)#java/lang/Integer/Integer(int)
org/apache/xmlgraphics/image/loader/impl/PreloaderTIFF/createImageInfo(java.lang.String,javax.imageio.stream.ImageInputStream,org.apache.xmlgraphics.image.loader.ImageContext)#java/lang/StringBuilder/append(int)
org/apache/xmlgraphics/image/loader/impl/PreloaderTIFF/createImageInfo(java.lang.String,javax.imageio.stream.ImageInputStream,org.apache.xmlgraphics.image.loader.ImageContext)#java/text/MessageFormat/format(java.lang.String,java.lang.Object[])
org/apache/xmlgraphics/image/loader/impl/PreloaderTIFF/createImageInfo(java.lang.String,javax.imageio.stream.ImageInputStream,org.apache.xmlgraphics.image.loader.ImageContext)#javax/imageio/stream/ImageInputStream/reset()
org/apache/xmlgraphics/image/loader/impl/PreloaderTIFF/createImageInfo(java.lang.String,javax.imageio.stream.ImageInputStream,org.apache.xmlgraphics.image.loader.ImageContext)#java/lang/StringBuilder/StringBuilder()
org/apache/xmlgraphics/image/loader/impl/PreloaderTIFF/createImageInfo(java.lang.String,javax.imageio.stream.ImageInputStream,org.apache.xmlgraphics.image.loader.ImageContext)#org/apache/commons/logging/Log/trace(java.lang.Object)
org/apache/xmlgraphics/image/loader/impl/PreloaderTIFF/createImageInfo(java.lang.String,javax.imageio.stream.ImageInputStream,org.apache.xmlgraphics.image.loader.ImageContext)#java/lang/StringBuilder/append(java.lang.Object)
org/apache/xmlgraphics/image/loader/impl/PreloaderTIFF/createImageInfo(java.lang.String,javax.imageio.stream.ImageInputStream,org.apache.xmlgraphics.image.loader.ImageContext)#org/apache/commons/logging/Log/isTraceEnabled()
org/apache/xmlgraphics/image/loader/impl/PreloaderTIFF/createImageInfo(java.lang.String,javax.imageio.stream.ImageInputStream,org.apache.xmlgraphics.image.loader.ImageContext)#java/lang/StringBuilder/toString()
org/apache/xmlgraphics/image/loader/impl/PreloaderTIFF/createImageInfo(java.lang.String,javax.imageio.stream.ImageInputStream,org.apache.xmlgraphics.image.loader.ImageContext)#javax/imageio/stream/ImageInputStream/mark()
