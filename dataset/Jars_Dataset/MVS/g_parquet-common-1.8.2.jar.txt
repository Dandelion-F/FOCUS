org/apache/parquet/SemanticVersion/parse(java.lang.String)#org/apache/parquet/SemanticVersion$SemanticVersionParseException/SemanticVersionParseException(java.lang.String)
org/apache/parquet/SemanticVersion/parse(java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/apache/parquet/SemanticVersion/parse(java.lang.String)#java/util/regex/Matcher/matches()
org/apache/parquet/SemanticVersion/parse(java.lang.String)#java/lang/String/format(java.lang.String,java.lang.Object[])
org/apache/parquet/SemanticVersion/parse(java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/apache/parquet/SemanticVersion/parse(java.lang.String)#java/lang/Integer/valueOf(int)
org/apache/parquet/SemanticVersion/parse(java.lang.String)#java/lang/Integer/valueOf(java.lang.String)
org/apache/parquet/SemanticVersion/parse(java.lang.String)#java/util/regex/Pattern/matcher(java.lang.CharSequence)
org/apache/parquet/SemanticVersion/parse(java.lang.String)#org/apache/parquet/SemanticVersion$SemanticVersionParseException/SemanticVersionParseException(java.lang.Throwable)
org/apache/parquet/SemanticVersion/parse(java.lang.String)#java/lang/StringBuilder/toString()
org/apache/parquet/SemanticVersion/parse(java.lang.String)#java/lang/Integer/intValue()
org/apache/parquet/SemanticVersion/parse(java.lang.String)#java/util/regex/Matcher/group(int)
org/apache/parquet/glob/GlobExpander/GlobExpanderImpl/crossOrTakeNonEmpty(java.util.List,java.util.List)#java/util/ArrayList/ArrayList(int)
org/apache/parquet/glob/GlobExpander/GlobExpanderImpl/crossOrTakeNonEmpty(java.util.List,java.util.List)#java/util/Iterator/hasNext()
org/apache/parquet/glob/GlobExpander/GlobExpanderImpl/crossOrTakeNonEmpty(java.util.List,java.util.List)#java/lang/StringBuilder/append(java.lang.String)
org/apache/parquet/glob/GlobExpander/GlobExpanderImpl/crossOrTakeNonEmpty(java.util.List,java.util.List)#java/util/List/isEmpty()
org/apache/parquet/glob/GlobExpander/GlobExpanderImpl/crossOrTakeNonEmpty(java.util.List,java.util.List)#java/util/List/size()
org/apache/parquet/glob/GlobExpander/GlobExpanderImpl/crossOrTakeNonEmpty(java.util.List,java.util.List)#java/util/Iterator/next()
org/apache/parquet/glob/GlobExpander/GlobExpanderImpl/crossOrTakeNonEmpty(java.util.List,java.util.List)#java/util/List/add(java.lang.Object)
org/apache/parquet/glob/GlobExpander/GlobExpanderImpl/crossOrTakeNonEmpty(java.util.List,java.util.List)#java/util/List/iterator()
org/apache/parquet/glob/GlobExpander/GlobExpanderImpl/crossOrTakeNonEmpty(java.util.List,java.util.List)#java/lang/StringBuilder/toString()
org/apache/parquet/glob/GlobExpander/GlobExpanderImpl/crossOrTakeNonEmpty(java.util.List,java.util.List)#java/lang/StringBuilder/StringBuilder()
org/apache/parquet/glob/GlobExpander/GlobExpanderImpl/crossOrTakeNonEmpty(java.util.List,java.util.List)#java/util/ArrayList/addAll(java.util.Collection)
org/apache/parquet/glob/GlobParser/parseOneOf(java.lang.String)#java/util/ArrayList/ArrayList()
org/apache/parquet/glob/GlobParser/parseOneOf(java.lang.String)#org/apache/parquet/glob/GlobParser$GlobParseException/GlobParseException(java.lang.String)
org/apache/parquet/glob/GlobParser/parseOneOf(java.lang.String)#org/apache/parquet/glob/GlobNode$OneOf/OneOf(java.util.List)
org/apache/parquet/glob/GlobParser/parseOneOf(java.lang.String)#java/lang/String/length()
org/apache/parquet/glob/GlobParser/parseOneOf(java.lang.String)#java/lang/String/substring(int,int)
org/apache/parquet/glob/GlobParser/parseOneOf(java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/apache/parquet/glob/GlobParser/parseOneOf(java.lang.String)#java/util/List/add(java.lang.Object)
org/apache/parquet/glob/GlobParser/parseOneOf(java.lang.String)#java/lang/StringBuilder/toString()
org/apache/parquet/glob/GlobParser/parseOneOf(java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/apache/parquet/glob/GlobParser/parseOneOf(java.lang.String)#java/lang/String/charAt(int)
org/apache/parquet/glob/GlobParser/parse(java.lang.String)#java/util/ArrayList/ArrayList()
org/apache/parquet/glob/GlobParser/parse(java.lang.String)#org/apache/parquet/glob/GlobParser$GlobParseException/GlobParseException(java.lang.String)
org/apache/parquet/glob/GlobParser/parse(java.lang.String)#org/apache/parquet/glob/GlobNode$Atom/Atom(java.lang.String)
org/apache/parquet/glob/GlobParser/parse(java.lang.String)#org/apache/parquet/glob/GlobNode$GlobNodeSequence/GlobNodeSequence(java.util.List)
org/apache/parquet/glob/GlobParser/parse(java.lang.String)#java/lang/String/equals(java.lang.Object)
org/apache/parquet/glob/GlobParser/parse(java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/apache/parquet/glob/GlobParser/parse(java.lang.String)#java/util/List/add(java.lang.Object)
org/apache/parquet/glob/GlobParser/parse(java.lang.String)#java/lang/StringBuilder/toString()
org/apache/parquet/glob/GlobParser/parse(java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/apache/parquet/glob/GlobParser/parse(java.lang.String)#java/lang/String/charAt(int)
org/apache/parquet/glob/GlobParser/parse(java.lang.String)#java/lang/String/length()
org/apache/parquet/glob/GlobParser/parse(java.lang.String)#java/util/Arrays/asList(java.lang.Object[])
org/apache/parquet/glob/GlobParser/parse(java.lang.String)#java/lang/String/isEmpty()
org/apache/parquet/glob/GlobParser/parse(java.lang.String)#java/lang/String/substring(int,int)
