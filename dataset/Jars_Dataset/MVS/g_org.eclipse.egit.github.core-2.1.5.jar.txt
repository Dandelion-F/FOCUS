org/eclipse/egit/github/core/service/CollaboratorService/getCollaborators(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/CollaboratorService/getCollaborators(org.eclipse.egit.github.core.IRepositoryIdProvider)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/CollaboratorService/getCollaborators(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/CollaboratorService$1/getType()
org/eclipse/egit/github/core/service/CollaboratorService/getCollaborators(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/CollaboratorService/getAll(org.eclipse.egit.github.core.client.PagedRequest)
org/eclipse/egit/github/core/service/CollaboratorService/getCollaborators(org.eclipse.egit.github.core.IRepositoryIdProvider)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/CollaboratorService/getCollaborators(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/CollaboratorService$1/1(org.eclipse.egit.github.core.service.CollaboratorService)
org/eclipse/egit/github/core/service/CollaboratorService/getCollaborators(org.eclipse.egit.github.core.IRepositoryIdProvider)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/CollaboratorService/getCollaborators(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/CollaboratorService/createPagedRequest()
org/eclipse/egit/github/core/service/CollaboratorService/getCollaborators(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/CollaboratorService/getCollaborators(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/CollaboratorService/getId(org.eclipse.egit.github.core.IRepositoryIdProvider)
org/eclipse/egit/github/core/service/GistService/createUserGistRequest(java.lang.String,int,int)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/GistService/createUserGistRequest(java.lang.String,int,int)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/GistService/createUserGistRequest(java.lang.String,int,int)#java/lang/String/length()
org/eclipse/egit/github/core/service/GistService/createUserGistRequest(java.lang.String,int,int)#org/eclipse/egit/github/core/service/GistService$2/getType()
org/eclipse/egit/github/core/service/GistService/createUserGistRequest(java.lang.String,int,int)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/GistService/createUserGistRequest(java.lang.String,int,int)#org/eclipse/egit/github/core/service/GistService$2/2(org.eclipse.egit.github.core.service.GistService)
org/eclipse/egit/github/core/service/GistService/createUserGistRequest(java.lang.String,int,int)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/GistService/createUserGistRequest(java.lang.String,int,int)#org/eclipse/egit/github/core/service/GistService/createPagedRequest(int,int)
org/eclipse/egit/github/core/service/GistService/createUserGistRequest(java.lang.String,int,int)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/eclipse/egit/github/core/service/WatcherService/createWatcherRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/WatcherService/createWatcherRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/WatcherService/createWatcherRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/WatcherService/createWatcherRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#org/eclipse/egit/github/core/service/WatcherService$1/getType()
org/eclipse/egit/github/core/service/WatcherService/createWatcherRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/WatcherService/createWatcherRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#org/eclipse/egit/github/core/service/WatcherService$1/1(org.eclipse.egit.github.core.service.WatcherService)
org/eclipse/egit/github/core/service/WatcherService/createWatcherRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/WatcherService/createWatcherRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#org/eclipse/egit/github/core/service/WatcherService/getId(org.eclipse.egit.github.core.IRepositoryIdProvider)
org/eclipse/egit/github/core/service/WatcherService/createWatcherRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#org/eclipse/egit/github/core/service/WatcherService/createPagedRequest(int,int)
org/eclipse/egit/github/core/service/WatcherService/createWatchedRequest(java.lang.String,int,int)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/WatcherService/createWatchedRequest(java.lang.String,int,int)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/WatcherService/createWatchedRequest(java.lang.String,int,int)#java/lang/String/length()
org/eclipse/egit/github/core/service/WatcherService/createWatchedRequest(java.lang.String,int,int)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/WatcherService/createWatchedRequest(java.lang.String,int,int)#org/eclipse/egit/github/core/service/WatcherService$2/getType()
org/eclipse/egit/github/core/service/WatcherService/createWatchedRequest(java.lang.String,int,int)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/WatcherService/createWatchedRequest(java.lang.String,int,int)#org/eclipse/egit/github/core/service/WatcherService$2/2(org.eclipse.egit.github.core.service.WatcherService)
org/eclipse/egit/github/core/service/WatcherService/createWatchedRequest(java.lang.String,int,int)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/WatcherService/createWatchedRequest(java.lang.String,int,int)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/eclipse/egit/github/core/service/WatcherService/createWatchedRequest(java.lang.String,int,int)#org/eclipse/egit/github/core/service/WatcherService/createPagedRequest(int,int)
org/eclipse/egit/github/core/service/IssueService/pageIssueEvents(java.lang.String,java.lang.String,int,int,int)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/IssueService/pageIssueEvents(java.lang.String,java.lang.String,int,int,int)#java/lang/StringBuilder/append(int)
org/eclipse/egit/github/core/service/IssueService/pageIssueEvents(java.lang.String,java.lang.String,int,int,int)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/IssueService/pageIssueEvents(java.lang.String,java.lang.String,int,int,int)#org/eclipse/egit/github/core/service/IssueService/createPageIterator(org.eclipse.egit.github.core.client.PagedRequest)
org/eclipse/egit/github/core/service/IssueService/pageIssueEvents(java.lang.String,java.lang.String,int,int,int)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/IssueService/pageIssueEvents(java.lang.String,java.lang.String,int,int,int)#org/eclipse/egit/github/core/service/IssueService/createPagedRequest(int,int)
org/eclipse/egit/github/core/service/IssueService/pageIssueEvents(java.lang.String,java.lang.String,int,int,int)#org/eclipse/egit/github/core/service/IssueService$5/5(org.eclipse.egit.github.core.service.IssueService)
org/eclipse/egit/github/core/service/IssueService/pageIssueEvents(java.lang.String,java.lang.String,int,int,int)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/IssueService/pageIssueEvents(java.lang.String,java.lang.String,int,int,int)#org/eclipse/egit/github/core/service/IssueService/verifyRepository(java.lang.String,java.lang.String)
org/eclipse/egit/github/core/service/IssueService/pageIssueEvents(java.lang.String,java.lang.String,int,int,int)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/IssueService/pageIssueEvents(java.lang.String,java.lang.String,int,int,int)#org/eclipse/egit/github/core/service/IssueService$5/getType()
org/eclipse/egit/github/core/service/IssueService/getComments(java.lang.String,java.lang.String)#org/eclipse/egit/github/core/service/IssueService/getAll(org.eclipse.egit.github.core.client.PagedRequest)
org/eclipse/egit/github/core/service/IssueService/getComments(java.lang.String,java.lang.String)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/IssueService/getComments(java.lang.String,java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/IssueService/getComments(java.lang.String,java.lang.String)#java/lang/String/length()
org/eclipse/egit/github/core/service/IssueService/getComments(java.lang.String,java.lang.String)#org/eclipse/egit/github/core/service/IssueService$2/2(org.eclipse.egit.github.core.service.IssueService)
org/eclipse/egit/github/core/service/IssueService/getComments(java.lang.String,java.lang.String)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/IssueService/getComments(java.lang.String,java.lang.String)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/IssueService/getComments(java.lang.String,java.lang.String)#org/eclipse/egit/github/core/service/IssueService$2/getType()
org/eclipse/egit/github/core/service/IssueService/getComments(java.lang.String,java.lang.String)#org/eclipse/egit/github/core/service/IssueService/createPagedRequest()
org/eclipse/egit/github/core/service/IssueService/getComments(java.lang.String,java.lang.String)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/IssueService/getComments(java.lang.String,java.lang.String)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/eclipse/egit/github/core/service/IssueService/pageEvents(java.lang.String,java.lang.String,int,int)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/IssueService/pageEvents(java.lang.String,java.lang.String,int,int)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/IssueService/pageEvents(java.lang.String,java.lang.String,int,int)#org/eclipse/egit/github/core/service/IssueService$4/4(org.eclipse.egit.github.core.service.IssueService)
org/eclipse/egit/github/core/service/IssueService/pageEvents(java.lang.String,java.lang.String,int,int)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/IssueService/pageEvents(java.lang.String,java.lang.String,int,int)#org/eclipse/egit/github/core/service/IssueService/createPageIterator(org.eclipse.egit.github.core.client.PagedRequest)
org/eclipse/egit/github/core/service/IssueService/pageEvents(java.lang.String,java.lang.String,int,int)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/IssueService/pageEvents(java.lang.String,java.lang.String,int,int)#org/eclipse/egit/github/core/service/IssueService$4/getType()
org/eclipse/egit/github/core/service/IssueService/pageEvents(java.lang.String,java.lang.String,int,int)#org/eclipse/egit/github/core/service/IssueService/createPagedRequest(int,int)
org/eclipse/egit/github/core/service/IssueService/pageEvents(java.lang.String,java.lang.String,int,int)#org/eclipse/egit/github/core/service/IssueService/verifyRepository(java.lang.String,java.lang.String)
org/eclipse/egit/github/core/service/IssueService/pageEvents(java.lang.String,java.lang.String,int,int)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/IssueService/searchIssues(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String)#org/eclipse/egit/github/core/service/IssueService/getAll(org.eclipse.egit.github.core.client.PagedRequest)
org/eclipse/egit/github/core/service/IssueService/searchIssues(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/IssueService/searchIssues(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String)#java/net/URLEncoder/encode(java.lang.String,java.lang.String)
org/eclipse/egit/github/core/service/IssueService/searchIssues(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/IssueService/searchIssues(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String)#java/lang/String/length()
org/eclipse/egit/github/core/service/IssueService/searchIssues(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/IssueService/searchIssues(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/IssueService/searchIssues(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/IssueService/searchIssues(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/eclipse/egit/github/core/service/IssueService/searchIssues(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String)#org/eclipse/egit/github/core/service/IssueService/getId(org.eclipse.egit.github.core.IRepositoryIdProvider)
org/eclipse/egit/github/core/service/IssueService/searchIssues(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String)#org/eclipse/egit/github/core/service/IssueService/createPagedRequest()
org/eclipse/egit/github/core/service/IssueService/searchIssues(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String)#java/lang/String/replace(java.lang.CharSequence,java.lang.CharSequence)
org/eclipse/egit/github/core/service/IssueService/createIssueMap(org.eclipse.egit.github.core.Issue,boolean)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/egit/github/core/service/IssueService/createIssueMap(org.eclipse.egit.github.core.Issue,boolean)#java/util/ArrayList/ArrayList(int)
org/eclipse/egit/github/core/service/IssueService/createIssueMap(org.eclipse.egit.github.core.Issue,boolean)#java/lang/Integer/toString(int)
org/eclipse/egit/github/core/service/IssueService/createIssueMap(org.eclipse.egit.github.core.Issue,boolean)#java/util/List/size()
org/eclipse/egit/github/core/service/IssueService/createIssueMap(org.eclipse.egit.github.core.Issue,boolean)#java/util/List/add(java.lang.Object)
org/eclipse/egit/github/core/service/IssueService/createIssueMap(org.eclipse.egit.github.core.Issue,boolean)#java/util/List/iterator()
org/eclipse/egit/github/core/service/IssueService/createIssueMap(org.eclipse.egit.github.core.Issue,boolean)#java/util/Iterator/hasNext()
org/eclipse/egit/github/core/service/IssueService/createIssueMap(org.eclipse.egit.github.core.Issue,boolean)#java/util/Iterator/next()
org/eclipse/egit/github/core/service/IssueService/createIssueMap(org.eclipse.egit.github.core.Issue,boolean)#java/util/HashMap/HashMap()
org/eclipse/egit/github/core/service/TeamService/getRepositories(int)#org/eclipse/egit/github/core/service/TeamService/getAll(org.eclipse.egit.github.core.client.PagedRequest)
org/eclipse/egit/github/core/service/TeamService/getRepositories(int)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/TeamService/getRepositories(int)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/TeamService/getRepositories(int)#java/lang/StringBuilder/append(int)
org/eclipse/egit/github/core/service/TeamService/getRepositories(int)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/TeamService/getRepositories(int)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/TeamService/getRepositories(int)#org/eclipse/egit/github/core/service/TeamService$3/3(org.eclipse.egit.github.core.service.TeamService)
org/eclipse/egit/github/core/service/TeamService/getRepositories(int)#org/eclipse/egit/github/core/service/TeamService$3/getType()
org/eclipse/egit/github/core/service/TeamService/getRepositories(int)#org/eclipse/egit/github/core/service/TeamService/createPagedRequest()
org/eclipse/egit/github/core/service/TeamService/getRepositories(int)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/TeamService/getMembers(int)#org/eclipse/egit/github/core/service/TeamService/getAll(org.eclipse.egit.github.core.client.PagedRequest)
org/eclipse/egit/github/core/service/TeamService/getMembers(int)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/TeamService/getMembers(int)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/TeamService/getMembers(int)#java/lang/StringBuilder/append(int)
org/eclipse/egit/github/core/service/TeamService/getMembers(int)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/TeamService/getMembers(int)#org/eclipse/egit/github/core/service/TeamService$2/2(org.eclipse.egit.github.core.service.TeamService)
org/eclipse/egit/github/core/service/TeamService/getMembers(int)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/TeamService/getMembers(int)#org/eclipse/egit/github/core/service/TeamService$2/getType()
org/eclipse/egit/github/core/service/TeamService/getMembers(int)#org/eclipse/egit/github/core/service/TeamService/createPagedRequest()
org/eclipse/egit/github/core/service/TeamService/getMembers(int)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/TeamService/getTeams(java.lang.String)#org/eclipse/egit/github/core/service/TeamService/getAll(org.eclipse.egit.github.core.client.PagedRequest)
org/eclipse/egit/github/core/service/TeamService/getTeams(java.lang.String)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/TeamService/getTeams(java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/TeamService/getTeams(java.lang.String)#java/lang/String/length()
org/eclipse/egit/github/core/service/TeamService/getTeams(java.lang.String)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/TeamService/getTeams(java.lang.String)#org/eclipse/egit/github/core/service/TeamService$1/1(org.eclipse.egit.github.core.service.TeamService)
org/eclipse/egit/github/core/service/TeamService/getTeams(java.lang.String)#org/eclipse/egit/github/core/service/TeamService/createPagedRequest()
org/eclipse/egit/github/core/service/TeamService/getTeams(java.lang.String)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/TeamService/getTeams(java.lang.String)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/eclipse/egit/github/core/service/TeamService/getTeams(java.lang.String)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/TeamService/getTeams(java.lang.String)#org/eclipse/egit/github/core/service/TeamService$1/getType()
org/eclipse/egit/github/core/service/TeamService/getTeams(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/TeamService/getAll(org.eclipse.egit.github.core.client.PagedRequest)
org/eclipse/egit/github/core/service/TeamService/getTeams(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/TeamService/getTeams(org.eclipse.egit.github.core.IRepositoryIdProvider)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/TeamService/getTeams(org.eclipse.egit.github.core.IRepositoryIdProvider)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/TeamService/getTeams(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/TeamService/getTeams(org.eclipse.egit.github.core.IRepositoryIdProvider)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/TeamService/getTeams(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/TeamService/getId(org.eclipse.egit.github.core.IRepositoryIdProvider)
org/eclipse/egit/github/core/service/TeamService/getTeams(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/TeamService$4/getType()
org/eclipse/egit/github/core/service/TeamService/getTeams(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/TeamService$4/4(org.eclipse.egit.github.core.service.TeamService)
org/eclipse/egit/github/core/service/TeamService/getTeams(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/TeamService/createPagedRequest()
org/eclipse/egit/github/core/service/DeployKeyService/getKeys(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/DeployKeyService/getAll(org.eclipse.egit.github.core.client.PagedRequest)
org/eclipse/egit/github/core/service/DeployKeyService/getKeys(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/DeployKeyService/getKeys(org.eclipse.egit.github.core.IRepositoryIdProvider)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/DeployKeyService/getKeys(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/DeployKeyService$1/1(org.eclipse.egit.github.core.service.DeployKeyService)
org/eclipse/egit/github/core/service/DeployKeyService/getKeys(org.eclipse.egit.github.core.IRepositoryIdProvider)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/DeployKeyService/getKeys(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/DeployKeyService/getKeys(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/DeployKeyService$1/getType()
org/eclipse/egit/github/core/service/DeployKeyService/getKeys(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/DeployKeyService/createPagedRequest()
org/eclipse/egit/github/core/service/DeployKeyService/getKeys(org.eclipse.egit.github.core.IRepositoryIdProvider)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/DeployKeyService/getKeys(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/DeployKeyService/getId(org.eclipse.egit.github.core.IRepositoryIdProvider)
org/eclipse/egit/github/core/service/ContentsService/getContents(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/ContentsService/getContents(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String)#org/eclipse/egit/github/core/service/ContentsService$1/1(org.eclipse.egit.github.core.service.ContentsService)
org/eclipse/egit/github/core/service/ContentsService/getContents(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String)#java/util/Collections/singletonMap(java.lang.Object,java.lang.Object)
org/eclipse/egit/github/core/service/ContentsService/getContents(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String)#org/eclipse/egit/github/core/service/ContentsService$1/getType()
org/eclipse/egit/github/core/service/ContentsService/getContents(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/ContentsService/getContents(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String)#org/eclipse/egit/github/core/service/ContentsService/getId(org.eclipse.egit.github.core.IRepositoryIdProvider)
org/eclipse/egit/github/core/service/ContentsService/getContents(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/ContentsService/getContents(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String)#java/lang/String/charAt(int)
org/eclipse/egit/github/core/service/ContentsService/getContents(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String)#org/eclipse/egit/github/core/service/ContentsService/createRequest()
org/eclipse/egit/github/core/service/ContentsService/getContents(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String)#java/lang/String/length()
org/eclipse/egit/github/core/service/ContentsService/getContents(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String)#java/util/Collections/singletonList(java.lang.Object)
org/eclipse/egit/github/core/service/LabelService/getLabels(java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/LabelService/getLabels(java.lang.String)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/LabelService/getLabels(java.lang.String)#org/eclipse/egit/github/core/service/LabelService/createPagedRequest()
org/eclipse/egit/github/core/service/LabelService/getLabels(java.lang.String)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/LabelService/getLabels(java.lang.String)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/LabelService/getLabels(java.lang.String)#org/eclipse/egit/github/core/service/LabelService$1/getType()
org/eclipse/egit/github/core/service/LabelService/getLabels(java.lang.String)#org/eclipse/egit/github/core/service/LabelService/getAll(org.eclipse.egit.github.core.client.PagedRequest)
org/eclipse/egit/github/core/service/LabelService/getLabels(java.lang.String)#org/eclipse/egit/github/core/service/LabelService$1/1(org.eclipse.egit.github.core.service.LabelService)
org/eclipse/egit/github/core/service/LabelService/getLabels(java.lang.String)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/CommitService/createStatus(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,org.eclipse.egit.github.core.CommitStatus)#java/util/HashMap/HashMap(int,float)
org/eclipse/egit/github/core/service/CommitService/createStatus(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,org.eclipse.egit.github.core.CommitStatus)#java/lang/String/length()
org/eclipse/egit/github/core/service/CommitService/createStatus(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,org.eclipse.egit.github.core.CommitStatus)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/CommitService/createStatus(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,org.eclipse.egit.github.core.CommitStatus)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/CommitService/createStatus(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,org.eclipse.egit.github.core.CommitStatus)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/eclipse/egit/github/core/service/CommitService/createStatus(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,org.eclipse.egit.github.core.CommitStatus)#java/lang/StringBuilder/toString()
org/eclipse/egit/github/core/service/CommitService/createStatus(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,org.eclipse.egit.github.core.CommitStatus)#org/eclipse/egit/github/core/service/CommitService/getId(org.eclipse.egit.github.core.IRepositoryIdProvider)
org/eclipse/egit/github/core/service/CommitService/createStatus(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,org.eclipse.egit.github.core.CommitStatus)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/egit/github/core/service/CommitService/createStatus(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,org.eclipse.egit.github.core.CommitStatus)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/CommitService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#org/eclipse/egit/github/core/service/CommitService/getId(org.eclipse.egit.github.core.IRepositoryIdProvider)
org/eclipse/egit/github/core/service/CommitService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#org/eclipse/egit/github/core/service/CommitService/createPagedRequest(int,int)
org/eclipse/egit/github/core/service/CommitService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/CommitService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/CommitService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#org/eclipse/egit/github/core/service/CommitService/createPageIterator(org.eclipse.egit.github.core.client.PagedRequest)
org/eclipse/egit/github/core/service/CommitService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/CommitService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/CommitService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#org/eclipse/egit/github/core/service/CommitService$4/4(org.eclipse.egit.github.core.service.CommitService)
org/eclipse/egit/github/core/service/CommitService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/CommitService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#org/eclipse/egit/github/core/service/CommitService$4/getType()
org/eclipse/egit/github/core/service/CommitService/getStatuses(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String)#org/eclipse/egit/github/core/service/CommitService/getId(org.eclipse.egit.github.core.IRepositoryIdProvider)
org/eclipse/egit/github/core/service/CommitService/getStatuses(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/CommitService/getStatuses(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/CommitService/getStatuses(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String)#java/lang/String/length()
org/eclipse/egit/github/core/service/CommitService/getStatuses(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/CommitService/getStatuses(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String)#org/eclipse/egit/github/core/service/CommitService/createPagedRequest()
org/eclipse/egit/github/core/service/CommitService/getStatuses(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/CommitService/getStatuses(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String)#org/eclipse/egit/github/core/service/CommitService$3/3(org.eclipse.egit.github.core.service.CommitService)
org/eclipse/egit/github/core/service/CommitService/getStatuses(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/CommitService/getStatuses(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/eclipse/egit/github/core/service/CommitService/getStatuses(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String)#org/eclipse/egit/github/core/service/CommitService$3/getType()
org/eclipse/egit/github/core/service/CommitService/getStatuses(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String)#org/eclipse/egit/github/core/service/CommitService/getAll(org.eclipse.egit.github.core.client.PagedRequest)
org/eclipse/egit/github/core/service/CommitService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,int,int)#org/eclipse/egit/github/core/service/CommitService/getId(org.eclipse.egit.github.core.IRepositoryIdProvider)
org/eclipse/egit/github/core/service/CommitService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,int,int)#org/eclipse/egit/github/core/service/CommitService/createPagedRequest(int,int)
org/eclipse/egit/github/core/service/CommitService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,int,int)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/CommitService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,int,int)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/CommitService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,int,int)#org/eclipse/egit/github/core/service/CommitService/createPageIterator(org.eclipse.egit.github.core.client.PagedRequest)
org/eclipse/egit/github/core/service/CommitService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,int,int)#java/lang/String/length()
org/eclipse/egit/github/core/service/CommitService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,int,int)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/CommitService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,int,int)#org/eclipse/egit/github/core/service/CommitService$2/2(org.eclipse.egit.github.core.service.CommitService)
org/eclipse/egit/github/core/service/CommitService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,int,int)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/CommitService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,int,int)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/CommitService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,int,int)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/eclipse/egit/github/core/service/CommitService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,int,int)#org/eclipse/egit/github/core/service/CommitService$2/getType()
org/eclipse/egit/github/core/service/CommitService/pageCommits(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String,int)#org/eclipse/egit/github/core/service/CommitService/createPagedRequest(int,int)
org/eclipse/egit/github/core/service/CommitService/pageCommits(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String,int)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/CommitService/pageCommits(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String,int)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/CommitService/pageCommits(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String,int)#org/eclipse/egit/github/core/service/CommitService/createPageIterator(org.eclipse.egit.github.core.client.PagedRequest)
org/eclipse/egit/github/core/service/CommitService/pageCommits(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String,int)#org/eclipse/egit/github/core/client/PagedRequest/setParams(java.util.Map)
org/eclipse/egit/github/core/service/CommitService/pageCommits(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String,int)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/CommitService/pageCommits(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String,int)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/CommitService/pageCommits(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String,int)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/CommitService/pageCommits(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String,int)#org/eclipse/egit/github/core/service/CommitService$1/getType()
org/eclipse/egit/github/core/service/CommitService/pageCommits(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String,int)#org/eclipse/egit/github/core/service/CommitService/getId(org.eclipse.egit.github.core.IRepositoryIdProvider)
org/eclipse/egit/github/core/service/CommitService/pageCommits(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String,int)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/egit/github/core/service/CommitService/pageCommits(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String,int)#java/util/HashMap/HashMap()
org/eclipse/egit/github/core/service/CommitService/pageCommits(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,java.lang.String,int)#org/eclipse/egit/github/core/service/CommitService$1/1(org.eclipse.egit.github.core.service.CommitService)
org/eclipse/egit/github/core/client/RequestException/formatErrors()#java/util/Iterator/hasNext()
org/eclipse/egit/github/core/client/RequestException/formatErrors()#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/client/RequestException/formatErrors()#java/lang/StringBuilder/append(int)
org/eclipse/egit/github/core/client/RequestException/formatErrors()#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/client/RequestException/formatErrors()#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/client/RequestException/formatErrors()#java/lang/StringBuilder/length()
org/eclipse/egit/github/core/client/RequestException/formatErrors()#java/util/List/iterator()
org/eclipse/egit/github/core/client/RequestException/formatErrors()#java/lang/StringBuilder/toString()
org/eclipse/egit/github/core/client/RequestException/formatErrors()#java/util/List/size()
org/eclipse/egit/github/core/client/RequestException/formatErrors()#java/util/Iterator/next()
org/eclipse/egit/github/core/client/RequestException/formatErrors()#java/lang/StringBuilder/deleteCharAt(int)
org/eclipse/egit/github/core/service/MilestoneService/getMilestones(java.lang.String,java.lang.String)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/MilestoneService/getMilestones(java.lang.String,java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/MilestoneService/getMilestones(java.lang.String,java.lang.String)#org/eclipse/egit/github/core/client/PagedRequest/setParams(java.util.Map)
org/eclipse/egit/github/core/service/MilestoneService/getMilestones(java.lang.String,java.lang.String)#org/eclipse/egit/github/core/service/MilestoneService/createPagedRequest()
org/eclipse/egit/github/core/service/MilestoneService/getMilestones(java.lang.String,java.lang.String)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/MilestoneService/getMilestones(java.lang.String,java.lang.String)#java/util/Collections/singletonMap(java.lang.Object,java.lang.Object)
org/eclipse/egit/github/core/service/MilestoneService/getMilestones(java.lang.String,java.lang.String)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/MilestoneService/getMilestones(java.lang.String,java.lang.String)#org/eclipse/egit/github/core/service/MilestoneService/getAll(org.eclipse.egit.github.core.client.PagedRequest)
org/eclipse/egit/github/core/service/MilestoneService/getMilestones(java.lang.String,java.lang.String)#org/eclipse/egit/github/core/service/MilestoneService$1/getType()
org/eclipse/egit/github/core/service/MilestoneService/getMilestones(java.lang.String,java.lang.String)#org/eclipse/egit/github/core/service/MilestoneService$1/1(org.eclipse.egit.github.core.service.MilestoneService)
org/eclipse/egit/github/core/service/OrganizationService/getPublicMembers(java.lang.String)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/OrganizationService/getPublicMembers(java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/OrganizationService/getPublicMembers(java.lang.String)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/OrganizationService/getPublicMembers(java.lang.String)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/OrganizationService/getPublicMembers(java.lang.String)#org/eclipse/egit/github/core/service/OrganizationService$3/3(org.eclipse.egit.github.core.service.OrganizationService)
org/eclipse/egit/github/core/service/OrganizationService/getPublicMembers(java.lang.String)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/OrganizationService/getPublicMembers(java.lang.String)#org/eclipse/egit/github/core/service/OrganizationService/getAll(org.eclipse.egit.github.core.client.PagedRequest)
org/eclipse/egit/github/core/service/OrganizationService/getPublicMembers(java.lang.String)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/eclipse/egit/github/core/service/OrganizationService/getPublicMembers(java.lang.String)#org/eclipse/egit/github/core/service/OrganizationService$3/getType()
org/eclipse/egit/github/core/service/OrganizationService/getPublicMembers(java.lang.String)#java/lang/String/length()
org/eclipse/egit/github/core/service/OrganizationService/getPublicMembers(java.lang.String)#org/eclipse/egit/github/core/service/OrganizationService/createPagedRequest()
org/eclipse/egit/github/core/service/OrganizationService/getMembers(java.lang.String)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/OrganizationService/getMembers(java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/OrganizationService/getMembers(java.lang.String)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/OrganizationService/getMembers(java.lang.String)#org/eclipse/egit/github/core/service/OrganizationService$2/2(org.eclipse.egit.github.core.service.OrganizationService)
org/eclipse/egit/github/core/service/OrganizationService/getMembers(java.lang.String)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/OrganizationService/getMembers(java.lang.String)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/OrganizationService/getMembers(java.lang.String)#org/eclipse/egit/github/core/service/OrganizationService/getAll(org.eclipse.egit.github.core.client.PagedRequest)
org/eclipse/egit/github/core/service/OrganizationService/getMembers(java.lang.String)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/eclipse/egit/github/core/service/OrganizationService/getMembers(java.lang.String)#org/eclipse/egit/github/core/service/OrganizationService$2/getType()
org/eclipse/egit/github/core/service/OrganizationService/getMembers(java.lang.String)#java/lang/String/length()
org/eclipse/egit/github/core/service/OrganizationService/getMembers(java.lang.String)#org/eclipse/egit/github/core/service/OrganizationService/createPagedRequest()
org/eclipse/egit/github/core/service/PullRequestService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int,int)#org/eclipse/egit/github/core/service/PullRequestService/createPageIterator(org.eclipse.egit.github.core.client.PagedRequest)
org/eclipse/egit/github/core/service/PullRequestService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int,int)#org/eclipse/egit/github/core/service/PullRequestService$4/getType()
org/eclipse/egit/github/core/service/PullRequestService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int,int)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/PullRequestService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int,int)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/PullRequestService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int,int)#java/lang/StringBuilder/append(int)
org/eclipse/egit/github/core/service/PullRequestService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int,int)#org/eclipse/egit/github/core/service/PullRequestService/getId(org.eclipse.egit.github.core.IRepositoryIdProvider)
org/eclipse/egit/github/core/service/PullRequestService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int,int)#org/eclipse/egit/github/core/service/PullRequestService$4/4(org.eclipse.egit.github.core.service.PullRequestService)
org/eclipse/egit/github/core/service/PullRequestService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int,int)#org/eclipse/egit/github/core/service/PullRequestService/createPagedRequest(int,int)
org/eclipse/egit/github/core/service/PullRequestService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int,int)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/PullRequestService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int,int)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/PullRequestService/pageComments(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int,int)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/PullRequestService/getFiles(org.eclipse.egit.github.core.IRepositoryIdProvider,int)#org/eclipse/egit/github/core/service/PullRequestService$3/getType()
org/eclipse/egit/github/core/service/PullRequestService/getFiles(org.eclipse.egit.github.core.IRepositoryIdProvider,int)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/PullRequestService/getFiles(org.eclipse.egit.github.core.IRepositoryIdProvider,int)#org/eclipse/egit/github/core/service/PullRequestService/createPagedRequest()
org/eclipse/egit/github/core/service/PullRequestService/getFiles(org.eclipse.egit.github.core.IRepositoryIdProvider,int)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/PullRequestService/getFiles(org.eclipse.egit.github.core.IRepositoryIdProvider,int)#java/lang/StringBuilder/append(int)
org/eclipse/egit/github/core/service/PullRequestService/getFiles(org.eclipse.egit.github.core.IRepositoryIdProvider,int)#org/eclipse/egit/github/core/service/PullRequestService/getId(org.eclipse.egit.github.core.IRepositoryIdProvider)
org/eclipse/egit/github/core/service/PullRequestService/getFiles(org.eclipse.egit.github.core.IRepositoryIdProvider,int)#org/eclipse/egit/github/core/service/PullRequestService$3/3(org.eclipse.egit.github.core.service.PullRequestService)
org/eclipse/egit/github/core/service/PullRequestService/getFiles(org.eclipse.egit.github.core.IRepositoryIdProvider,int)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/PullRequestService/getFiles(org.eclipse.egit.github.core.IRepositoryIdProvider,int)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/PullRequestService/getFiles(org.eclipse.egit.github.core.IRepositoryIdProvider,int)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/PullRequestService/getFiles(org.eclipse.egit.github.core.IRepositoryIdProvider,int)#org/eclipse/egit/github/core/service/PullRequestService/getAll(org.eclipse.egit.github.core.client.PagedRequest)
org/eclipse/egit/github/core/service/PullRequestService/getCommits(org.eclipse.egit.github.core.IRepositoryIdProvider,int)#org/eclipse/egit/github/core/service/PullRequestService$2/getType()
org/eclipse/egit/github/core/service/PullRequestService/getCommits(org.eclipse.egit.github.core.IRepositoryIdProvider,int)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/PullRequestService/getCommits(org.eclipse.egit.github.core.IRepositoryIdProvider,int)#org/eclipse/egit/github/core/service/PullRequestService/createPagedRequest()
org/eclipse/egit/github/core/service/PullRequestService/getCommits(org.eclipse.egit.github.core.IRepositoryIdProvider,int)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/PullRequestService/getCommits(org.eclipse.egit.github.core.IRepositoryIdProvider,int)#java/lang/StringBuilder/append(int)
org/eclipse/egit/github/core/service/PullRequestService/getCommits(org.eclipse.egit.github.core.IRepositoryIdProvider,int)#org/eclipse/egit/github/core/service/PullRequestService/getId(org.eclipse.egit.github.core.IRepositoryIdProvider)
org/eclipse/egit/github/core/service/PullRequestService/getCommits(org.eclipse.egit.github.core.IRepositoryIdProvider,int)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/PullRequestService/getCommits(org.eclipse.egit.github.core.IRepositoryIdProvider,int)#org/eclipse/egit/github/core/service/PullRequestService$2/2(org.eclipse.egit.github.core.service.PullRequestService)
org/eclipse/egit/github/core/service/PullRequestService/getCommits(org.eclipse.egit.github.core.IRepositoryIdProvider,int)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/PullRequestService/getCommits(org.eclipse.egit.github.core.IRepositoryIdProvider,int)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/PullRequestService/getCommits(org.eclipse.egit.github.core.IRepositoryIdProvider,int)#org/eclipse/egit/github/core/service/PullRequestService/getAll(org.eclipse.egit.github.core.client.PagedRequest)
org/eclipse/egit/github/core/service/PullRequestService/createPullsRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,int,int)#org/eclipse/egit/github/core/service/PullRequestService$1/getType()
org/eclipse/egit/github/core/service/PullRequestService/createPullsRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,int,int)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/PullRequestService/createPullsRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,int,int)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/PullRequestService/createPullsRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,int,int)#org/eclipse/egit/github/core/service/PullRequestService/getId(org.eclipse.egit.github.core.IRepositoryIdProvider)
org/eclipse/egit/github/core/service/PullRequestService/createPullsRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,int,int)#org/eclipse/egit/github/core/client/PagedRequest/setParams(java.util.Map)
org/eclipse/egit/github/core/service/PullRequestService/createPullsRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,int,int)#org/eclipse/egit/github/core/service/PullRequestService/createPagedRequest(int,int)
org/eclipse/egit/github/core/service/PullRequestService/createPullsRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,int,int)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/PullRequestService/createPullsRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,int,int)#org/eclipse/egit/github/core/service/PullRequestService$1/1(org.eclipse.egit.github.core.service.PullRequestService)
org/eclipse/egit/github/core/service/PullRequestService/createPullsRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,int,int)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/PullRequestService/createPullsRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,int,int)#java/util/Collections/singletonMap(java.lang.Object,java.lang.Object)
org/eclipse/egit/github/core/service/PullRequestService/createPullsRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,java.lang.String,int,int)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/PullRequestService/replyToComment(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int,java.lang.String)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/egit/github/core/service/PullRequestService/replyToComment(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int,java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/PullRequestService/replyToComment(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int,java.lang.String)#java/lang/StringBuilder/append(int)
org/eclipse/egit/github/core/service/PullRequestService/replyToComment(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int,java.lang.String)#org/eclipse/egit/github/core/service/PullRequestService/getId(org.eclipse.egit.github.core.IRepositoryIdProvider)
org/eclipse/egit/github/core/service/PullRequestService/replyToComment(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int,java.lang.String)#java/lang/Integer/toString(int)
org/eclipse/egit/github/core/service/PullRequestService/replyToComment(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int,java.lang.String)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/PullRequestService/replyToComment(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int,java.lang.String)#java/util/HashMap/HashMap()
org/eclipse/egit/github/core/service/PullRequestService/replyToComment(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int,java.lang.String)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/PullRequestService/replyToComment(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int,java.lang.String)#java/lang/StringBuilder/toString()
org/eclipse/egit/github/core/service/UserService/createFollowersRequest(int,int,java.lang.String)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/UserService/createFollowersRequest(int,int,java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/UserService/createFollowersRequest(int,int,java.lang.String)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/UserService/createFollowersRequest(int,int,java.lang.String)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/UserService/createFollowersRequest(int,int,java.lang.String)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/UserService/createFollowersRequest(int,int,java.lang.String)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.String)
org/eclipse/egit/github/core/service/UserService/createFollowersRequest(int,int,java.lang.String)#org/eclipse/egit/github/core/service/UserService$1/getType()
org/eclipse/egit/github/core/service/UserService/createFollowersRequest(int,int,java.lang.String)#org/eclipse/egit/github/core/service/UserService/createPagedRequest(int,int)
org/eclipse/egit/github/core/service/UserService/createFollowersRequest(int,int,java.lang.String)#org/eclipse/egit/github/core/service/UserService$1/1(org.eclipse.egit.github.core.service.UserService)
org/eclipse/egit/github/core/service/UserService/createFollowingRequest(int,int,java.lang.String)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.String)
org/eclipse/egit/github/core/service/UserService/createFollowingRequest(int,int,java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/UserService/createFollowingRequest(int,int,java.lang.String)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/UserService/createFollowingRequest(int,int,java.lang.String)#org/eclipse/egit/github/core/service/UserService/createPagedRequest(int,int)
org/eclipse/egit/github/core/service/UserService/createFollowingRequest(int,int,java.lang.String)#org/eclipse/egit/github/core/service/UserService$2/2(org.eclipse.egit.github.core.service.UserService)
org/eclipse/egit/github/core/service/UserService/createFollowingRequest(int,int,java.lang.String)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/UserService/createFollowingRequest(int,int,java.lang.String)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/UserService/createFollowingRequest(int,int,java.lang.String)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/UserService/createFollowingRequest(int,int,java.lang.String)#org/eclipse/egit/github/core/service/UserService$2/getType()
org/eclipse/egit/github/core/service/RepositoryService/searchRepositories(java.util.Map,int)#java/util/Iterator/hasNext()
org/eclipse/egit/github/core/service/RepositoryService/searchRepositories(java.util.Map,int)#java/util/Map/isEmpty()
org/eclipse/egit/github/core/service/RepositoryService/searchRepositories(java.util.Map,int)#java/util/Iterator/next()
org/eclipse/egit/github/core/service/RepositoryService/searchRepositories(java.util.Map,int)#java/lang/StringBuilder/StringBuilder()
org/eclipse/egit/github/core/service/RepositoryService/searchRepositories(java.util.Map,int)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/RepositoryService/searchRepositories(java.util.Map,int)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/eclipse/egit/github/core/service/RepositoryService/searchRepositories(java.util.Map,int)#java/util/Map$Entry/getValue()
org/eclipse/egit/github/core/service/RepositoryService/searchRepositories(java.util.Map,int)#java/util/Map/entrySet()
org/eclipse/egit/github/core/service/RepositoryService/searchRepositories(java.util.Map,int)#java/lang/StringBuilder/toString()
org/eclipse/egit/github/core/service/RepositoryService/searchRepositories(java.util.Map,int)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/RepositoryService/searchRepositories(java.util.Map,int)#java/util/Map$Entry/getKey()
org/eclipse/egit/github/core/service/RepositoryService/searchRepositories(java.util.Map,int)#java/util/Set/iterator()
org/eclipse/egit/github/core/service/RepositoryService/pageOrgRepositories(java.lang.String,java.util.Map,int,int)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/RepositoryService/pageOrgRepositories(java.lang.String,java.util.Map,int,int)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/RepositoryService/pageOrgRepositories(java.lang.String,java.util.Map,int,int)#org/eclipse/egit/github/core/service/RepositoryService$4/getType()
org/eclipse/egit/github/core/service/RepositoryService/pageOrgRepositories(java.lang.String,java.util.Map,int,int)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/RepositoryService/pageOrgRepositories(java.lang.String,java.util.Map,int,int)#org/eclipse/egit/github/core/service/RepositoryService/createPagedRequest(int,int)
org/eclipse/egit/github/core/service/RepositoryService/pageOrgRepositories(java.lang.String,java.util.Map,int,int)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/RepositoryService/pageOrgRepositories(java.lang.String,java.util.Map,int,int)#org/eclipse/egit/github/core/service/RepositoryService$4/4(org.eclipse.egit.github.core.service.RepositoryService)
org/eclipse/egit/github/core/service/RepositoryService/pageOrgRepositories(java.lang.String,java.util.Map,int,int)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/RepositoryService/pageOrgRepositories(java.lang.String,java.util.Map,int,int)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/eclipse/egit/github/core/service/RepositoryService/pageOrgRepositories(java.lang.String,java.util.Map,int,int)#org/eclipse/egit/github/core/service/RepositoryService/createPageIterator(org.eclipse.egit.github.core.client.PagedRequest)
org/eclipse/egit/github/core/service/RepositoryService/pageOrgRepositories(java.lang.String,java.util.Map,int,int)#org/eclipse/egit/github/core/client/PagedRequest/setParams(java.util.Map)
org/eclipse/egit/github/core/service/RepositoryService/pageOrgRepositories(java.lang.String,java.util.Map,int,int)#java/lang/String/length()
org/eclipse/egit/github/core/service/RepositoryService/pageRepositories(java.lang.String,int,int)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/RepositoryService/pageRepositories(java.lang.String,int,int)#java/lang/String/length()
org/eclipse/egit/github/core/service/RepositoryService/pageRepositories(java.lang.String,int,int)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/RepositoryService/pageRepositories(java.lang.String,int,int)#org/eclipse/egit/github/core/service/RepositoryService/createPagedRequest(int,int)
org/eclipse/egit/github/core/service/RepositoryService/pageRepositories(java.lang.String,int,int)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/RepositoryService/pageRepositories(java.lang.String,int,int)#org/eclipse/egit/github/core/service/RepositoryService$3/3(org.eclipse.egit.github.core.service.RepositoryService)
org/eclipse/egit/github/core/service/RepositoryService/pageRepositories(java.lang.String,int,int)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/RepositoryService/pageRepositories(java.lang.String,int,int)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/eclipse/egit/github/core/service/RepositoryService/pageRepositories(java.lang.String,int,int)#org/eclipse/egit/github/core/service/RepositoryService/createPageIterator(org.eclipse.egit.github.core.client.PagedRequest)
org/eclipse/egit/github/core/service/RepositoryService/pageRepositories(java.lang.String,int,int)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/RepositoryService/pageRepositories(java.lang.String,int,int)#org/eclipse/egit/github/core/service/RepositoryService$3/getType()
org/eclipse/egit/github/core/service/RepositoryService/getBranches(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/RepositoryService/createPagedRequest()
org/eclipse/egit/github/core/service/RepositoryService/getBranches(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/RepositoryService/getBranches(org.eclipse.egit.github.core.IRepositoryIdProvider)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/RepositoryService/getBranches(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/RepositoryService$7/getType()
org/eclipse/egit/github/core/service/RepositoryService/getBranches(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/RepositoryService/getBranches(org.eclipse.egit.github.core.IRepositoryIdProvider)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/RepositoryService/getBranches(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/RepositoryService$7/7(org.eclipse.egit.github.core.service.RepositoryService)
org/eclipse/egit/github/core/service/RepositoryService/getBranches(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/RepositoryService/getId(org.eclipse.egit.github.core.IRepositoryIdProvider)
org/eclipse/egit/github/core/service/RepositoryService/getBranches(org.eclipse.egit.github.core.IRepositoryIdProvider)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/RepositoryService/getBranches(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/RepositoryService/getAll(org.eclipse.egit.github.core.client.PagedRequest)
org/eclipse/egit/github/core/service/RepositoryService/pageAllRepositories(long)#org/eclipse/egit/github/core/service/RepositoryService/createPagedRequest()
org/eclipse/egit/github/core/service/RepositoryService/pageAllRepositories(long)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.String)
org/eclipse/egit/github/core/service/RepositoryService/pageAllRepositories(long)#org/eclipse/egit/github/core/service/RepositoryService$2/getType()
org/eclipse/egit/github/core/service/RepositoryService/pageAllRepositories(long)#java/lang/Long/toString(long)
org/eclipse/egit/github/core/service/RepositoryService/pageAllRepositories(long)#org/eclipse/egit/github/core/client/PagedRequest/setParams(java.util.Map)
org/eclipse/egit/github/core/service/RepositoryService/pageAllRepositories(long)#org/eclipse/egit/github/core/service/RepositoryService$2/2(org.eclipse.egit.github.core.service.RepositoryService)
org/eclipse/egit/github/core/service/RepositoryService/pageAllRepositories(long)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/RepositoryService/pageAllRepositories(long)#java/util/Collections/singletonMap(java.lang.Object,java.lang.Object)
org/eclipse/egit/github/core/service/RepositoryService/pageAllRepositories(long)#org/eclipse/egit/github/core/service/RepositoryService/createPageIterator(org.eclipse.egit.github.core.client.PagedRequest)
org/eclipse/egit/github/core/service/RepositoryService/getTags(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/RepositoryService/createPagedRequest()
org/eclipse/egit/github/core/service/RepositoryService/getTags(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/RepositoryService/getTags(org.eclipse.egit.github.core.IRepositoryIdProvider)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/RepositoryService/getTags(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/RepositoryService$8/getType()
org/eclipse/egit/github/core/service/RepositoryService/getTags(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/RepositoryService/getTags(org.eclipse.egit.github.core.IRepositoryIdProvider)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/RepositoryService/getTags(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/RepositoryService$8/8(org.eclipse.egit.github.core.service.RepositoryService)
org/eclipse/egit/github/core/service/RepositoryService/getTags(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/RepositoryService/getId(org.eclipse.egit.github.core.IRepositoryIdProvider)
org/eclipse/egit/github/core/service/RepositoryService/getTags(org.eclipse.egit.github.core.IRepositoryIdProvider)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/RepositoryService/getTags(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/RepositoryService/getAll(org.eclipse.egit.github.core.client.PagedRequest)
org/eclipse/egit/github/core/service/RepositoryService/getContributors(org.eclipse.egit.github.core.IRepositoryIdProvider,boolean)#org/eclipse/egit/github/core/service/RepositoryService$9/9(org.eclipse.egit.github.core.service.RepositoryService)
org/eclipse/egit/github/core/service/RepositoryService/getContributors(org.eclipse.egit.github.core.IRepositoryIdProvider,boolean)#org/eclipse/egit/github/core/service/RepositoryService/createPagedRequest()
org/eclipse/egit/github/core/service/RepositoryService/getContributors(org.eclipse.egit.github.core.IRepositoryIdProvider,boolean)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/RepositoryService/getContributors(org.eclipse.egit.github.core.IRepositoryIdProvider,boolean)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/RepositoryService/getContributors(org.eclipse.egit.github.core.IRepositoryIdProvider,boolean)#org/eclipse/egit/github/core/client/PagedRequest/setParams(java.util.Map)
org/eclipse/egit/github/core/service/RepositoryService/getContributors(org.eclipse.egit.github.core.IRepositoryIdProvider,boolean)#org/eclipse/egit/github/core/service/RepositoryService$9/getType()
org/eclipse/egit/github/core/service/RepositoryService/getContributors(org.eclipse.egit.github.core.IRepositoryIdProvider,boolean)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/RepositoryService/getContributors(org.eclipse.egit.github.core.IRepositoryIdProvider,boolean)#java/util/Collections/singletonMap(java.lang.Object,java.lang.Object)
org/eclipse/egit/github/core/service/RepositoryService/getContributors(org.eclipse.egit.github.core.IRepositoryIdProvider,boolean)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/RepositoryService/getContributors(org.eclipse.egit.github.core.IRepositoryIdProvider,boolean)#org/eclipse/egit/github/core/service/RepositoryService/getId(org.eclipse.egit.github.core.IRepositoryIdProvider)
org/eclipse/egit/github/core/service/RepositoryService/getContributors(org.eclipse.egit.github.core.IRepositoryIdProvider,boolean)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/RepositoryService/getContributors(org.eclipse.egit.github.core.IRepositoryIdProvider,boolean)#org/eclipse/egit/github/core/service/RepositoryService/getAll(org.eclipse.egit.github.core.client.PagedRequest)
org/eclipse/egit/github/core/service/RepositoryService/createPagedForkRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/RepositoryService/createPagedForkRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/RepositoryService/createPagedForkRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#org/eclipse/egit/github/core/service/RepositoryService$5/getType()
org/eclipse/egit/github/core/service/RepositoryService/createPagedForkRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#org/eclipse/egit/github/core/service/RepositoryService/createPagedRequest(int,int)
org/eclipse/egit/github/core/service/RepositoryService/createPagedForkRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/RepositoryService/createPagedForkRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/RepositoryService/createPagedForkRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#org/eclipse/egit/github/core/service/RepositoryService$5/5(org.eclipse.egit.github.core.service.RepositoryService)
org/eclipse/egit/github/core/service/RepositoryService/createPagedForkRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#org/eclipse/egit/github/core/service/RepositoryService/getId(org.eclipse.egit.github.core.IRepositoryIdProvider)
org/eclipse/egit/github/core/service/RepositoryService/createPagedForkRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/RepositoryService/searchRepositories(java.lang.String,java.lang.String,int)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/egit/github/core/service/RepositoryService/searchRepositories(java.lang.String,java.lang.String,int)#org/eclipse/egit/github/core/service/RepositoryService/createPagedRequest()
org/eclipse/egit/github/core/service/RepositoryService/searchRepositories(java.lang.String,java.lang.String,int)#java/util/HashMap/HashMap(int,float)
org/eclipse/egit/github/core/service/RepositoryService/searchRepositories(java.lang.String,java.lang.String,int)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/RepositoryService/searchRepositories(java.lang.String,java.lang.String,int)#java/net/URLEncoder/encode(java.lang.String,java.lang.String)
org/eclipse/egit/github/core/service/RepositoryService/searchRepositories(java.lang.String,java.lang.String,int)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/RepositoryService/searchRepositories(java.lang.String,java.lang.String,int)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/RepositoryService/searchRepositories(java.lang.String,java.lang.String,int)#java/lang/String/replace(java.lang.CharSequence,java.lang.CharSequence)
org/eclipse/egit/github/core/service/RepositoryService/searchRepositories(java.lang.String,java.lang.String,int)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/RepositoryService/searchRepositories(java.lang.String,java.lang.String,int)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/eclipse/egit/github/core/service/RepositoryService/searchRepositories(java.lang.String,java.lang.String,int)#org/eclipse/egit/github/core/client/PagedRequest/setParams(java.util.Map)
org/eclipse/egit/github/core/service/RepositoryService/searchRepositories(java.lang.String,java.lang.String,int)#java/lang/Integer/toString(int)
org/eclipse/egit/github/core/service/RepositoryService/searchRepositories(java.lang.String,java.lang.String,int)#java/lang/String/length()
org/eclipse/egit/github/core/service/RepositoryService/searchRepositories(java.lang.String,java.lang.String,int)#java/util/Map/isEmpty()
org/eclipse/egit/github/core/service/RepositoryService/searchRepositories(java.lang.String,java.lang.String,int)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/RepositoryService/searchRepositories(java.lang.String,java.lang.String,int)#org/eclipse/egit/github/core/service/RepositoryService/getAll(org.eclipse.egit.github.core.client.PagedRequest)
org/eclipse/egit/github/core/service/RepositoryService/getHooks(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/RepositoryService$10/getType()
org/eclipse/egit/github/core/service/RepositoryService/getHooks(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/RepositoryService/createPagedRequest()
org/eclipse/egit/github/core/service/RepositoryService/getHooks(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/RepositoryService/getHooks(org.eclipse.egit.github.core.IRepositoryIdProvider)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/RepositoryService/getHooks(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/RepositoryService$10/10(org.eclipse.egit.github.core.service.RepositoryService)
org/eclipse/egit/github/core/service/RepositoryService/getHooks(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/RepositoryService/getHooks(org.eclipse.egit.github.core.IRepositoryIdProvider)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/RepositoryService/getHooks(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/RepositoryService/getId(org.eclipse.egit.github.core.IRepositoryIdProvider)
org/eclipse/egit/github/core/service/RepositoryService/getHooks(org.eclipse.egit.github.core.IRepositoryIdProvider)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/RepositoryService/getHooks(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/RepositoryService/getAll(org.eclipse.egit.github.core.client.PagedRequest)
org/eclipse/egit/github/core/service/DataService/editReference(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Reference,boolean)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/egit/github/core/service/DataService/editReference(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Reference,boolean)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/DataService/editReference(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Reference,boolean)#java/lang/String/length()
org/eclipse/egit/github/core/service/DataService/editReference(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Reference,boolean)#org/eclipse/egit/github/core/service/DataService/getId(org.eclipse.egit.github.core.IRepositoryIdProvider)
org/eclipse/egit/github/core/service/DataService/editReference(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Reference,boolean)#java/lang/StringBuilder/StringBuilder()
org/eclipse/egit/github/core/service/DataService/editReference(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Reference,boolean)#java/lang/Boolean/valueOf(boolean)
org/eclipse/egit/github/core/service/DataService/editReference(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Reference,boolean)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/DataService/editReference(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Reference,boolean)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/eclipse/egit/github/core/service/DataService/editReference(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Reference,boolean)#org/eclipse/egit/github/core/TypedResource/getSha()
org/eclipse/egit/github/core/service/DataService/editReference(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Reference,boolean)#java/lang/StringBuilder/toString()
org/eclipse/egit/github/core/service/DataService/editReference(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Reference,boolean)#java/util/HashMap/HashMap()
org/eclipse/egit/github/core/service/DataService/editReference(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Reference,boolean)#java/lang/String/startsWith(java.lang.String)
org/eclipse/egit/github/core/service/DataService/createTree(org.eclipse.egit.github.core.IRepositoryIdProvider,java.util.Collection,java.lang.String)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/egit/github/core/service/DataService/createTree(org.eclipse.egit.github.core.IRepositoryIdProvider,java.util.Collection,java.lang.String)#java/util/Collection/toArray()
org/eclipse/egit/github/core/service/DataService/createTree(org.eclipse.egit.github.core.IRepositoryIdProvider,java.util.Collection,java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/DataService/createTree(org.eclipse.egit.github.core.IRepositoryIdProvider,java.util.Collection,java.lang.String)#org/eclipse/egit/github/core/service/DataService/getId(org.eclipse.egit.github.core.IRepositoryIdProvider)
org/eclipse/egit/github/core/service/DataService/createTree(org.eclipse.egit.github.core.IRepositoryIdProvider,java.util.Collection,java.lang.String)#java/util/HashMap/HashMap()
org/eclipse/egit/github/core/service/DataService/createTree(org.eclipse.egit.github.core.IRepositoryIdProvider,java.util.Collection,java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/eclipse/egit/github/core/service/DataService/createTree(org.eclipse.egit.github.core.IRepositoryIdProvider,java.util.Collection,java.lang.String)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/DataService/createTree(org.eclipse.egit.github.core.IRepositoryIdProvider,java.util.Collection,java.lang.String)#org/eclipse/egit/github/core/service/DataService/createRequest()
org/eclipse/egit/github/core/service/DataService/createTree(org.eclipse.egit.github.core.IRepositoryIdProvider,java.util.Collection,java.lang.String)#java/lang/StringBuilder/toString()
org/eclipse/egit/github/core/service/DataService/createTag(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Tag)#org/eclipse/egit/github/core/service/DataService/getId(org.eclipse.egit.github.core.IRepositoryIdProvider)
org/eclipse/egit/github/core/service/DataService/createTag(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Tag)#java/util/HashMap/HashMap()
org/eclipse/egit/github/core/service/DataService/createTag(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Tag)#java/lang/StringBuilder/StringBuilder()
org/eclipse/egit/github/core/service/DataService/createTag(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Tag)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/DataService/createTag(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Tag)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/eclipse/egit/github/core/service/DataService/createTag(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Tag)#org/eclipse/egit/github/core/TypedResource/getSha()
org/eclipse/egit/github/core/service/DataService/createTag(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Tag)#java/lang/StringBuilder/toString()
org/eclipse/egit/github/core/service/DataService/createTag(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Tag)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/egit/github/core/service/DataService/createTag(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Tag)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/DataService/getReferences(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/DataService/createPagedRequest()
org/eclipse/egit/github/core/service/DataService/getReferences(org.eclipse.egit.github.core.IRepositoryIdProvider)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/DataService/getReferences(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/DataService$1/1(org.eclipse.egit.github.core.service.DataService)
org/eclipse/egit/github/core/service/DataService/getReferences(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
org/eclipse/egit/github/core/service/DataService/getReferences(org.eclipse.egit.github.core.IRepositoryIdProvider)#java/lang/StringBuilder/StringBuilder()
org/eclipse/egit/github/core/service/DataService/getReferences(org.eclipse.egit.github.core.IRepositoryIdProvider)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/DataService/getReferences(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/DataService$1/getType()
org/eclipse/egit/github/core/service/DataService/getReferences(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/DataService/getReferences(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/DataService/getAll(org.eclipse.egit.github.core.client.PagedRequest)
org/eclipse/egit/github/core/service/DataService/getReferences(org.eclipse.egit.github.core.IRepositoryIdProvider)#org/eclipse/egit/github/core/service/DataService/getId(org.eclipse.egit.github.core.IRepositoryIdProvider)
org/eclipse/egit/github/core/service/DataService/createCommit(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Commit)#java/util/Iterator/hasNext()
org/eclipse/egit/github/core/service/DataService/createCommit(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Commit)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/DataService/createCommit(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Commit)#org/eclipse/egit/github/core/service/DataService/getId(org.eclipse.egit.github.core.IRepositoryIdProvider)
org/eclipse/egit/github/core/service/DataService/createCommit(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Commit)#java/lang/StringBuilder/StringBuilder()
org/eclipse/egit/github/core/service/DataService/createCommit(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Commit)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/eclipse/egit/github/core/service/DataService/createCommit(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Commit)#java/lang/StringBuilder/toString()
org/eclipse/egit/github/core/service/DataService/createCommit(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Commit)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/egit/github/core/service/DataService/createCommit(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Commit)#java/util/ArrayList/ArrayList()
org/eclipse/egit/github/core/service/DataService/createCommit(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Commit)#java/util/List/size()
org/eclipse/egit/github/core/service/DataService/createCommit(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Commit)#java/util/Iterator/next()
org/eclipse/egit/github/core/service/DataService/createCommit(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Commit)#java/util/HashMap/HashMap()
org/eclipse/egit/github/core/service/DataService/createCommit(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Commit)#java/util/List/add(java.lang.Object)
org/eclipse/egit/github/core/service/DataService/createCommit(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Commit)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/DataService/createCommit(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Commit)#java/util/List/iterator()
org/eclipse/egit/github/core/service/DataService/createReference(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Reference)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/egit/github/core/service/DataService/createReference(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Reference)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/DataService/createReference(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Reference)#org/eclipse/egit/github/core/service/DataService/getId(org.eclipse.egit.github.core.IRepositoryIdProvider)
org/eclipse/egit/github/core/service/DataService/createReference(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Reference)#java/lang/StringBuilder/StringBuilder()
org/eclipse/egit/github/core/service/DataService/createReference(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Reference)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/DataService/createReference(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Reference)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/eclipse/egit/github/core/service/DataService/createReference(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Reference)#org/eclipse/egit/github/core/TypedResource/getSha()
org/eclipse/egit/github/core/service/DataService/createReference(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Reference)#java/lang/StringBuilder/toString()
org/eclipse/egit/github/core/service/DataService/createReference(org.eclipse.egit.github.core.IRepositoryIdProvider,org.eclipse.egit.github.core.Reference)#java/util/HashMap/HashMap()
org/eclipse/egit/github/core/util/MultiPartUtils/post(java.net.HttpURLConnection,java.util.Map)#java/lang/Object/toString()
org/eclipse/egit/github/core/util/MultiPartUtils/post(java.net.HttpURLConnection,java.util.Map)#java/util/Iterator/hasNext()
org/eclipse/egit/github/core/util/MultiPartUtils/post(java.net.HttpURLConnection,java.util.Map)#java/io/InputStream/read(byte[])
org/eclipse/egit/github/core/util/MultiPartUtils/post(java.net.HttpURLConnection,java.util.Map)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/util/MultiPartUtils/post(java.net.HttpURLConnection,java.util.Map)#java/util/Iterator/next()
org/eclipse/egit/github/core/util/MultiPartUtils/post(java.net.HttpURLConnection,java.util.Map)#java/lang/StringBuilder/StringBuilder()
org/eclipse/egit/github/core/util/MultiPartUtils/post(java.net.HttpURLConnection,java.util.Map)#java/util/Set/iterator()
org/eclipse/egit/github/core/util/MultiPartUtils/post(java.net.HttpURLConnection,java.util.Map)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/util/MultiPartUtils/post(java.net.HttpURLConnection,java.util.Map)#java/io/BufferedOutputStream/BufferedOutputStream(java.io.OutputStream)
org/eclipse/egit/github/core/util/MultiPartUtils/post(java.net.HttpURLConnection,java.util.Map)#java/util/Map$Entry/getValue()
org/eclipse/egit/github/core/util/MultiPartUtils/post(java.net.HttpURLConnection,java.util.Map)#java/io/BufferedOutputStream/write(byte[])
org/eclipse/egit/github/core/util/MultiPartUtils/post(java.net.HttpURLConnection,java.util.Map)#java/util/Map/entrySet()
org/eclipse/egit/github/core/util/MultiPartUtils/post(java.net.HttpURLConnection,java.util.Map)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/util/MultiPartUtils/post(java.net.HttpURLConnection,java.util.Map)#java/util/Map$Entry/getKey()
org/eclipse/egit/github/core/util/MultiPartUtils/post(java.net.HttpURLConnection,java.util.Map)#java/net/HttpURLConnection/getOutputStream()
org/eclipse/egit/github/core/util/MultiPartUtils/post(java.net.HttpURLConnection,java.util.Map)#java/net/HttpURLConnection/setRequestProperty(java.lang.String,java.lang.String)
org/eclipse/egit/github/core/util/MultiPartUtils/post(java.net.HttpURLConnection,java.util.Map)#java/io/InputStream/close()
org/eclipse/egit/github/core/util/MultiPartUtils/post(java.net.HttpURLConnection,java.util.Map)#java/lang/String/getBytes(java.lang.String)
org/eclipse/egit/github/core/util/MultiPartUtils/post(java.net.HttpURLConnection,java.util.Map)#java/io/BufferedOutputStream/write(byte[],int,int)
org/eclipse/egit/github/core/util/MultiPartUtils/post(java.net.HttpURLConnection,java.util.Map)#java/lang/StringBuilder/toString()
org/eclipse/egit/github/core/util/MultiPartUtils/post(java.net.HttpURLConnection,java.util.Map)#java/io/BufferedOutputStream/close()
org/eclipse/egit/github/core/util/MultiPartUtils/post(java.net.HttpURLConnection,java.util.Map)#java/net/HttpURLConnection/setDoOutput(boolean)
org/eclipse/egit/github/core/client/GitHubClient/parseJson(java.io.InputStream,java.lang.reflect.Type,java.lang.reflect.Type)#java/io/BufferedReader/close()
org/eclipse/egit/github/core/client/GitHubClient/parseJson(java.io.InputStream,java.lang.reflect.Type,java.lang.reflect.Type)#com/google/gson/stream/JsonReader/close()
org/eclipse/egit/github/core/client/GitHubClient/parseJson(java.io.InputStream,java.lang.reflect.Type,java.lang.reflect.Type)#com/google/gson/Gson/fromJson(java.io.Reader,java.lang.reflect.Type)
org/eclipse/egit/github/core/client/GitHubClient/parseJson(java.io.InputStream,java.lang.reflect.Type,java.lang.reflect.Type)#java/io/IOException/IOException(java.lang.String)
org/eclipse/egit/github/core/client/GitHubClient/parseJson(java.io.InputStream,java.lang.reflect.Type,java.lang.reflect.Type)#com/google/gson/stream/JsonReader/peek()
org/eclipse/egit/github/core/client/GitHubClient/parseJson(java.io.InputStream,java.lang.reflect.Type,java.lang.reflect.Type)#java/io/IOException/initCause(java.lang.Throwable)
org/eclipse/egit/github/core/client/GitHubClient/parseJson(java.io.InputStream,java.lang.reflect.Type,java.lang.reflect.Type)#com/google/gson/Gson/fromJson(com.google.gson.stream.JsonReader,java.lang.reflect.Type)
org/eclipse/egit/github/core/client/GitHubClient/parseJson(java.io.InputStream,java.lang.reflect.Type,java.lang.reflect.Type)#java/io/InputStreamReader/InputStreamReader(java.io.InputStream,java.lang.String)
org/eclipse/egit/github/core/client/GitHubClient/parseJson(java.io.InputStream,java.lang.reflect.Type,java.lang.reflect.Type)#java/io/BufferedReader/BufferedReader(java.io.Reader,int)
org/eclipse/egit/github/core/client/GitHubClient/parseJson(java.io.InputStream,java.lang.reflect.Type,java.lang.reflect.Type)#com/google/gson/stream/JsonReader/JsonReader(java.io.Reader)
org/eclipse/egit/github/core/client/GitHubClient/sendParams(java.net.HttpURLConnection,java.lang.Object)#java/net/HttpURLConnection/getOutputStream()
org/eclipse/egit/github/core/client/GitHubClient/sendParams(java.net.HttpURLConnection,java.lang.Object)#java/io/BufferedOutputStream/flush()
org/eclipse/egit/github/core/client/GitHubClient/sendParams(java.net.HttpURLConnection,java.lang.Object)#java/net/HttpURLConnection/setRequestProperty(java.lang.String,java.lang.String)
org/eclipse/egit/github/core/client/GitHubClient/sendParams(java.net.HttpURLConnection,java.lang.Object)#java/net/HttpURLConnection/setFixedLengthStreamingMode(int)
org/eclipse/egit/github/core/client/GitHubClient/sendParams(java.net.HttpURLConnection,java.lang.Object)#java/lang/String/getBytes(java.lang.String)
org/eclipse/egit/github/core/client/GitHubClient/sendParams(java.net.HttpURLConnection,java.lang.Object)#java/io/BufferedOutputStream/BufferedOutputStream(java.io.OutputStream,int)
org/eclipse/egit/github/core/client/GitHubClient/sendParams(java.net.HttpURLConnection,java.lang.Object)#java/io/BufferedOutputStream/write(byte[])
org/eclipse/egit/github/core/client/GitHubClient/sendParams(java.net.HttpURLConnection,java.lang.Object)#java/io/BufferedOutputStream/close()
org/eclipse/egit/github/core/client/GitHubClient/sendParams(java.net.HttpURLConnection,java.lang.Object)#java/net/HttpURLConnection/setDoOutput(boolean)
org/eclipse/egit/github/core/service/DownloadService/uploadResource(org.eclipse.egit.github.core.DownloadResource,java.io.InputStream,long)#java/io/IOException/IOException(java.lang.String)
org/eclipse/egit/github/core/service/DownloadService/uploadResource(org.eclipse.egit.github.core.DownloadResource,java.io.InputStream,long)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/DownloadService/uploadResource(org.eclipse.egit.github.core.DownloadResource,java.io.InputStream,long)#java/lang/StringBuilder/append(int)
org/eclipse/egit/github/core/service/DownloadService/uploadResource(org.eclipse.egit.github.core.DownloadResource,java.io.InputStream,long)#java/lang/Integer/toString(int)
org/eclipse/egit/github/core/service/DownloadService/uploadResource(org.eclipse.egit.github.core.DownloadResource,java.io.InputStream,long)#java/net/HttpURLConnection/getResponseCode()
org/eclipse/egit/github/core/service/DownloadService/uploadResource(org.eclipse.egit.github.core.DownloadResource,java.io.InputStream,long)#java/lang/StringBuilder/toString()
org/eclipse/egit/github/core/service/DownloadService/uploadResource(org.eclipse.egit.github.core.DownloadResource,java.io.InputStream,long)#java/util/Map/put(java.lang.Object,java.lang.Object)
org/eclipse/egit/github/core/service/DownloadService/uploadResource(org.eclipse.egit.github.core.DownloadResource,java.io.InputStream,long)#java/lang/StringBuilder/StringBuilder()
org/eclipse/egit/github/core/service/DownloadService/uploadResource(org.eclipse.egit.github.core.DownloadResource,java.io.InputStream,long)#org/eclipse/egit/github/core/DownloadResource/getName()
org/eclipse/egit/github/core/service/DownloadService/uploadResource(org.eclipse.egit.github.core.DownloadResource,java.io.InputStream,long)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/eclipse/egit/github/core/service/DownloadService/uploadResource(org.eclipse.egit.github.core.DownloadResource,java.io.InputStream,long)#java/util/LinkedHashMap/LinkedHashMap()
org/eclipse/egit/github/core/service/DownloadService/createDownloadsRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#org/eclipse/egit/github/core/client/PagedRequest/setUri(java.lang.StringBuilder)
org/eclipse/egit/github/core/service/DownloadService/createDownloadsRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#java/lang/StringBuilder/StringBuilder(java.lang.String)
org/eclipse/egit/github/core/service/DownloadService/createDownloadsRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#org/eclipse/egit/github/core/service/DownloadService$1/1(org.eclipse.egit.github.core.service.DownloadService)
org/eclipse/egit/github/core/service/DownloadService/createDownloadsRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#org/eclipse/egit/github/core/service/DownloadService/getId(org.eclipse.egit.github.core.IRepositoryIdProvider)
org/eclipse/egit/github/core/service/DownloadService/createDownloadsRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#java/lang/StringBuilder/append(char)
org/eclipse/egit/github/core/service/DownloadService/createDownloadsRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#java/lang/StringBuilder/append(java.lang.String)
org/eclipse/egit/github/core/service/DownloadService/createDownloadsRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#org/eclipse/egit/github/core/service/DownloadService$1/getType()
org/eclipse/egit/github/core/service/DownloadService/createDownloadsRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#org/eclipse/egit/github/core/service/DownloadService/createPagedRequest(int,int)
org/eclipse/egit/github/core/service/DownloadService/createDownloadsRequest(org.eclipse.egit.github.core.IRepositoryIdProvider,int,int)#org/eclipse/egit/github/core/client/PagedRequest/setType(java.lang.reflect.Type)
