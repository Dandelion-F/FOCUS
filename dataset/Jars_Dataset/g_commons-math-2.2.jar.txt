org/apache/commons/math/ode/AbstractIntegrator/acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator,double[],double[],double)#java/util/Iterator/remove()
org/apache/commons/math/ode/AbstractIntegrator/acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator,double[],double[],double)#org/apache/commons/math/ode/AbstractIntegrator$1/1(org.apache.commons.math.ode.AbstractIntegrator,int)
org/apache/commons/math/ode/AbstractIntegrator/acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator,double[],double[],double)#java/util/Iterator/next()
org/apache/commons/math/ode/AbstractIntegrator/acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator,double[],double[],double)#java/util/SortedSet/iterator()
org/apache/commons/math/ode/AbstractIntegrator/acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator,double[],double[],double)#java/util/SortedSet/isEmpty()
org/apache/commons/math/ode/AbstractIntegrator/acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator,double[],double[],double)#org/apache/commons/math/ode/events/EventException/getCause()
org/apache/commons/math/ode/AbstractIntegrator/acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator,double[],double[],double)#java/util/SortedSet/add(java.lang.Object)
org/apache/commons/math/ode/AbstractIntegrator/acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator,double[],double[],double)#java/util/Iterator/hasNext()
org/apache/commons/math/ode/AbstractIntegrator/acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator,double[],double[],double)#java/util/TreeSet/TreeSet(java.util.Comparator)
org/apache/commons/math/ode/AbstractIntegrator/acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator,double[],double[],double)#java/util/Collection/iterator()
org/apache/commons/math/ode/AbstractIntegrator/acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator,double[],double[],double)#java/lang/System/arraycopy(java.lang.Object,int,java.lang.Object,int,int)
org/apache/commons/math/fraction/ProperBigFractionFormat/parse(java.lang.String,java.text.ParsePosition)#java/text/ParsePosition/setIndex(int)
org/apache/commons/math/fraction/ProperBigFractionFormat/parse(java.lang.String,java.text.ParsePosition)#org/apache/commons/math/fraction/ProperBigFractionFormat/parseNextCharacter(java.lang.String,java.text.ParsePosition)
org/apache/commons/math/fraction/ProperBigFractionFormat/parse(java.lang.String,java.text.ParsePosition)#java/math/BigInteger/compareTo(java.math.BigInteger)
org/apache/commons/math/fraction/ProperBigFractionFormat/parse(java.lang.String,java.text.ParsePosition)#java/math/BigInteger/add(java.math.BigInteger)
org/apache/commons/math/fraction/ProperBigFractionFormat/parse(java.lang.String,java.text.ParsePosition)#java/text/ParsePosition/setErrorIndex(int)
org/apache/commons/math/fraction/ProperBigFractionFormat/parse(java.lang.String,java.text.ParsePosition)#org/apache/commons/math/fraction/ProperBigFractionFormat/parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)
org/apache/commons/math/fraction/ProperBigFractionFormat/parse(java.lang.String,java.text.ParsePosition)#java/text/ParsePosition/getIndex()
org/apache/commons/math/fraction/ProperBigFractionFormat/parse(java.lang.String,java.text.ParsePosition)#java/math/BigInteger/multiply(java.math.BigInteger)
org/apache/commons/math/fraction/ProperBigFractionFormat/parse(java.lang.String,java.text.ParsePosition)#org/apache/commons/math/fraction/ProperBigFractionFormat/parseNextBigInteger(java.lang.String,java.text.ParsePosition)
org/apache/commons/math/fraction/ProperBigFractionFormat/parse(java.lang.String,java.text.ParsePosition)#java/math/BigInteger/negate()
org/apache/commons/math/fraction/ProperBigFractionFormat/format(org.apache.commons.math.fraction.BigFraction,java.lang.StringBuffer,java.text.FieldPosition)#java/text/FieldPosition/setEndIndex(int)
org/apache/commons/math/fraction/ProperBigFractionFormat/format(org.apache.commons.math.fraction.BigFraction,java.lang.StringBuffer,java.text.FieldPosition)#java/lang/StringBuffer/append(char)
org/apache/commons/math/fraction/ProperBigFractionFormat/format(org.apache.commons.math.fraction.BigFraction,java.lang.StringBuffer,java.text.FieldPosition)#java/math/BigInteger/compareTo(java.math.BigInteger)
org/apache/commons/math/fraction/ProperBigFractionFormat/format(org.apache.commons.math.fraction.BigFraction,java.lang.StringBuffer,java.text.FieldPosition)#org/apache/commons/math/fraction/ProperBigFractionFormat/getDenominatorFormat()
org/apache/commons/math/fraction/ProperBigFractionFormat/format(org.apache.commons.math.fraction.BigFraction,java.lang.StringBuffer,java.text.FieldPosition)#org/apache/commons/math/fraction/ProperBigFractionFormat/getNumeratorFormat()
org/apache/commons/math/fraction/ProperBigFractionFormat/format(org.apache.commons.math.fraction.BigFraction,java.lang.StringBuffer,java.text.FieldPosition)#java/math/BigInteger/remainder(java.math.BigInteger)
org/apache/commons/math/fraction/ProperBigFractionFormat/format(org.apache.commons.math.fraction.BigFraction,java.lang.StringBuffer,java.text.FieldPosition)#java/text/FieldPosition/setBeginIndex(int)
org/apache/commons/math/fraction/ProperBigFractionFormat/format(org.apache.commons.math.fraction.BigFraction,java.lang.StringBuffer,java.text.FieldPosition)#java/math/BigInteger/divide(java.math.BigInteger)
org/apache/commons/math/fraction/ProperBigFractionFormat/format(org.apache.commons.math.fraction.BigFraction,java.lang.StringBuffer,java.text.FieldPosition)#java/math/BigInteger/negate()
org/apache/commons/math/fraction/ProperBigFractionFormat/format(org.apache.commons.math.fraction.BigFraction,java.lang.StringBuffer,java.text.FieldPosition)#java/text/NumberFormat/format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)
org/apache/commons/math/fraction/ProperBigFractionFormat/format(org.apache.commons.math.fraction.BigFraction,java.lang.StringBuffer,java.text.FieldPosition)#java/lang/StringBuffer/append(java.lang.String)
org/apache/commons/math/fraction/ProperBigFractionFormat/format(org.apache.commons.math.fraction.BigFraction,java.lang.StringBuffer,java.text.FieldPosition)#java/math/BigInteger/equals(java.lang.Object)
org/apache/commons/math/util/TransformerMap/equals(java.lang.Object)#java/lang/Object/equals(java.lang.Object)
org/apache/commons/math/util/TransformerMap/equals(java.lang.Object)#java/util/Iterator/hasNext()
org/apache/commons/math/util/TransformerMap/equals(java.lang.Object)#java/util/Map$Entry/getKey()
org/apache/commons/math/util/TransformerMap/equals(java.lang.Object)#java/util/Map/get(java.lang.Object)
org/apache/commons/math/util/TransformerMap/equals(java.lang.Object)#java/util/Map/size()
org/apache/commons/math/util/TransformerMap/equals(java.lang.Object)#java/util/Iterator/next()
org/apache/commons/math/util/TransformerMap/equals(java.lang.Object)#java/util/Set/iterator()
org/apache/commons/math/util/TransformerMap/equals(java.lang.Object)#java/util/Map$Entry/getValue()
org/apache/commons/math/util/TransformerMap/equals(java.lang.Object)#java/util/Map/entrySet()
org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/sampling/NordsieckStepInterpolator/storeTime(double)
org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/sampling/NordsieckStepInterpolator/setInterpolatedTime(double)
org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator/resetEvaluations()
org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/sampling/NordsieckStepInterpolator/getInterpolatedState()
org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator/acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator,double[],double[],double)
org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#java/util/Iterator/next()
org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator/updateHighOrderDerivativesPhase2(double[],double[],org.apache.commons.math.linear.Array2DRowRealMatrix)
org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator/updateHighOrderDerivativesPhase1(org.apache.commons.math.linear.Array2DRowRealMatrix)
org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator/sanityChecks(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])
org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/sampling/NordsieckStepInterpolator/shift()
org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator/setStateInitialized(boolean)
org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#java/util/Iterator/hasNext()
org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator/computeDerivatives(double,double[],double[])
org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator/start(double,double[],double)
org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator/resetInternalState()
org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator/computeStepGrowShrinkFactor(double)
org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator/setEquations(org.apache.commons.math.ode.FirstOrderDifferentialEquations)
org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#java/util/Collection/iterator()
org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#java/lang/System/arraycopy(java.lang.Object,int,java.lang.Object,int,int)
org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator/filterStep(double,boolean,boolean)
org/apache/commons/math/optimization/linear/SimplexSolver/getPivotRow(org.apache.commons.math.optimization.linear.SimplexTableau,int)#java/lang/Integer/intValue()
org/apache/commons/math/optimization/linear/SimplexSolver/getPivotRow(org.apache.commons.math.optimization.linear.SimplexTableau,int)#java/util/ArrayList/ArrayList()
org/apache/commons/math/optimization/linear/SimplexSolver/getPivotRow(org.apache.commons.math.optimization.linear.SimplexTableau,int)#java/lang/Integer/equals(java.lang.Object)
org/apache/commons/math/optimization/linear/SimplexSolver/getPivotRow(org.apache.commons.math.optimization.linear.SimplexTableau,int)#java/util/List/size()
org/apache/commons/math/optimization/linear/SimplexSolver/getPivotRow(org.apache.commons.math.optimization.linear.SimplexTableau,int)#java/util/Iterator/next()
org/apache/commons/math/optimization/linear/SimplexSolver/getPivotRow(org.apache.commons.math.optimization.linear.SimplexTableau,int)#java/util/List/add(java.lang.Object)
org/apache/commons/math/optimization/linear/SimplexSolver/getPivotRow(org.apache.commons.math.optimization.linear.SimplexTableau,int)#java/util/Iterator/hasNext()
org/apache/commons/math/optimization/linear/SimplexSolver/getPivotRow(org.apache.commons.math.optimization.linear.SimplexTableau,int)#java/lang/Integer/valueOf(int)
org/apache/commons/math/optimization/linear/SimplexSolver/getPivotRow(org.apache.commons.math.optimization.linear.SimplexTableau,int)#java/util/List/get(int)
org/apache/commons/math/optimization/linear/SimplexSolver/getPivotRow(org.apache.commons.math.optimization.linear.SimplexTableau,int)#java/util/List/iterator()
org/apache/commons/math/stat/Frequency/toString()#java/util/Iterator/hasNext()
org/apache/commons/math/stat/Frequency/toString()#java/lang/StringBuilder/append(java.lang.String)
org/apache/commons/math/stat/Frequency/toString()#java/util/TreeMap/keySet()
org/apache/commons/math/stat/Frequency/toString()#java/util/Iterator/next()
org/apache/commons/math/stat/Frequency/toString()#java/lang/StringBuilder/append(long)
org/apache/commons/math/stat/Frequency/toString()#java/lang/StringBuilder/StringBuilder()
org/apache/commons/math/stat/Frequency/toString()#java/util/Set/iterator()
org/apache/commons/math/stat/Frequency/toString()#java/lang/StringBuilder/append(char)
org/apache/commons/math/stat/Frequency/toString()#java/text/NumberFormat/format(double)
org/apache/commons/math/stat/Frequency/toString()#java/lang/StringBuilder/toString()
org/apache/commons/math/stat/Frequency/toString()#java/lang/StringBuilder/append(java.lang.Object)
org/apache/commons/math/stat/Frequency/toString()#java/text/NumberFormat/getPercentInstance()
org/apache/commons/math/stat/Frequency/getCumFreq(java.lang.Comparable)#java/util/Iterator/hasNext()
org/apache/commons/math/stat/Frequency/getCumFreq(java.lang.Comparable)#java/lang/Integer/longValue()
org/apache/commons/math/stat/Frequency/getCumFreq(java.lang.Comparable)#java/util/TreeMap/get(java.lang.Object)
org/apache/commons/math/stat/Frequency/getCumFreq(java.lang.Comparable)#java/util/TreeMap/firstKey()
org/apache/commons/math/stat/Frequency/getCumFreq(java.lang.Comparable)#org/apache/commons/math/stat/Frequency$NaturalComparator/NaturalComparator(org.apache.commons.math.stat.Frequency$1)
org/apache/commons/math/stat/Frequency/getCumFreq(java.lang.Comparable)#java/util/TreeMap/comparator()
org/apache/commons/math/stat/Frequency/getCumFreq(java.lang.Comparable)#java/util/Iterator/next()
org/apache/commons/math/stat/Frequency/getCumFreq(java.lang.Comparable)#java/lang/Long/longValue()
org/apache/commons/math/stat/Frequency/getCumFreq(java.lang.Comparable)#java/util/Comparator/compare(java.lang.Object,java.lang.Object)
org/apache/commons/math/stat/Frequency/getCumFreq(java.lang.Comparable)#java/util/TreeMap/lastKey()
org/apache/commons/math/optimization/linear/SimplexTableau/getSolution()#java/lang/Integer/intValue()
org/apache/commons/math/optimization/linear/SimplexTableau/getSolution()#java/lang/StringBuilder/append(java.lang.String)
org/apache/commons/math/optimization/linear/SimplexTableau/getSolution()#java/lang/StringBuilder/append(int)
org/apache/commons/math/optimization/linear/SimplexTableau/getSolution()#java/util/Set/contains(java.lang.Object)
org/apache/commons/math/optimization/linear/SimplexTableau/getSolution()#java/lang/StringBuilder/StringBuilder()
org/apache/commons/math/optimization/linear/SimplexTableau/getSolution()#java/util/Set/add(java.lang.Object)
org/apache/commons/math/optimization/linear/SimplexTableau/getSolution()#java/util/HashSet/HashSet()
org/apache/commons/math/optimization/linear/SimplexTableau/getSolution()#java/lang/StringBuilder/toString()
org/apache/commons/math/optimization/linear/SimplexTableau/getSolution()#java/util/List/indexOf(java.lang.Object)
org/apache/commons/math/fraction/ProperFractionFormat/parse(java.lang.String,java.text.ParsePosition)#org/apache/commons/math/fraction/ProperFractionFormat/parseNextCharacter(java.lang.String,java.text.ParsePosition)
org/apache/commons/math/fraction/ProperFractionFormat/parse(java.lang.String,java.text.ParsePosition)#org/apache/commons/math/fraction/ProperFractionFormat/getDenominatorFormat()
org/apache/commons/math/fraction/ProperFractionFormat/parse(java.lang.String,java.text.ParsePosition)#java/text/ParsePosition/setIndex(int)
org/apache/commons/math/fraction/ProperFractionFormat/parse(java.lang.String,java.text.ParsePosition)#org/apache/commons/math/fraction/ProperFractionFormat/getNumeratorFormat()
org/apache/commons/math/fraction/ProperFractionFormat/parse(java.lang.String,java.text.ParsePosition)#java/text/NumberFormat/parse(java.lang.String,java.text.ParsePosition)
org/apache/commons/math/fraction/ProperFractionFormat/parse(java.lang.String,java.text.ParsePosition)#java/text/ParsePosition/setErrorIndex(int)
org/apache/commons/math/fraction/ProperFractionFormat/parse(java.lang.String,java.text.ParsePosition)#java/lang/Number/intValue()
org/apache/commons/math/fraction/ProperFractionFormat/parse(java.lang.String,java.text.ParsePosition)#org/apache/commons/math/fraction/ProperFractionFormat/parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)
org/apache/commons/math/fraction/ProperFractionFormat/parse(java.lang.String,java.text.ParsePosition)#java/text/ParsePosition/getIndex()
org/apache/commons/math/fraction/ProperFractionFormat/parse(java.lang.String,java.text.ParsePosition)#java/lang/Math/abs(int)
org/apache/commons/math/analysis/ComposableFunction/<clinit>()#org/apache/commons/math/analysis/ComposableFunction$1/1()
org/apache/commons/math/analysis/ComposableFunction/<clinit>()#org/apache/commons/math/analysis/ComposableFunction$2/2()
org/apache/commons/math/analysis/ComposableFunction/<clinit>()#org/apache/commons/math/analysis/ComposableFunction$3/3()
org/apache/commons/math/analysis/ComposableFunction/<clinit>()#org/apache/commons/math/analysis/ComposableFunction$4/4()
org/apache/commons/math/analysis/ComposableFunction/<clinit>()#org/apache/commons/math/analysis/ComposableFunction$5/5()
org/apache/commons/math/analysis/ComposableFunction/<clinit>()#org/apache/commons/math/analysis/ComposableFunction$6/6()
org/apache/commons/math/analysis/ComposableFunction/<clinit>()#org/apache/commons/math/analysis/ComposableFunction$7/7()
org/apache/commons/math/analysis/ComposableFunction/<clinit>()#org/apache/commons/math/analysis/ComposableFunction$8/8()
org/apache/commons/math/analysis/ComposableFunction/<clinit>()#org/apache/commons/math/analysis/ComposableFunction$9/9()
org/apache/commons/math/analysis/ComposableFunction/<clinit>()#org/apache/commons/math/analysis/ComposableFunction$17/17()
org/apache/commons/math/analysis/ComposableFunction/<clinit>()#org/apache/commons/math/analysis/ComposableFunction$18/18()
org/apache/commons/math/analysis/ComposableFunction/<clinit>()#org/apache/commons/math/analysis/ComposableFunction$19/19()
org/apache/commons/math/analysis/ComposableFunction/<clinit>()#org/apache/commons/math/analysis/ComposableFunction$20/20()
org/apache/commons/math/analysis/ComposableFunction/<clinit>()#org/apache/commons/math/analysis/ComposableFunction$14/14()
org/apache/commons/math/analysis/ComposableFunction/<clinit>()#org/apache/commons/math/analysis/ComposableFunction$25/25()
org/apache/commons/math/analysis/ComposableFunction/<clinit>()#org/apache/commons/math/analysis/ComposableFunction$15/15()
org/apache/commons/math/analysis/ComposableFunction/<clinit>()#org/apache/commons/math/analysis/ComposableFunction$26/26()
org/apache/commons/math/analysis/ComposableFunction/<clinit>()#org/apache/commons/math/analysis/ComposableFunction$16/16()
org/apache/commons/math/analysis/ComposableFunction/<clinit>()#org/apache/commons/math/analysis/ComposableFunction$27/27()
org/apache/commons/math/analysis/ComposableFunction/<clinit>()#org/apache/commons/math/analysis/ComposableFunction$10/10()
org/apache/commons/math/analysis/ComposableFunction/<clinit>()#org/apache/commons/math/analysis/ComposableFunction$21/21()
org/apache/commons/math/analysis/ComposableFunction/<clinit>()#org/apache/commons/math/analysis/ComposableFunction$11/11()
org/apache/commons/math/analysis/ComposableFunction/<clinit>()#org/apache/commons/math/analysis/ComposableFunction$22/22()
org/apache/commons/math/analysis/ComposableFunction/<clinit>()#org/apache/commons/math/analysis/ComposableFunction$12/12()
org/apache/commons/math/analysis/ComposableFunction/<clinit>()#org/apache/commons/math/analysis/ComposableFunction$23/23()
org/apache/commons/math/analysis/ComposableFunction/<clinit>()#org/apache/commons/math/analysis/ComposableFunction$13/13()
org/apache/commons/math/analysis/ComposableFunction/<clinit>()#org/apache/commons/math/analysis/ComposableFunction$24/24()
org/apache/commons/math/random/RandomDataImpl/nextSecureHexString(int)#java/lang/Integer/intValue()
org/apache/commons/math/random/RandomDataImpl/nextSecureHexString(int)#java/security/MessageDigest/digest()
org/apache/commons/math/random/RandomDataImpl/nextSecureHexString(int)#java/security/MessageDigest/reset()
org/apache/commons/math/random/RandomDataImpl/nextSecureHexString(int)#java/lang/StringBuilder/append(java.lang.String)
org/apache/commons/math/random/RandomDataImpl/nextSecureHexString(int)#java/lang/String/length()
org/apache/commons/math/random/RandomDataImpl/nextSecureHexString(int)#java/lang/Integer/toHexString(int)
org/apache/commons/math/random/RandomDataImpl/nextSecureHexString(int)#java/lang/String/substring(int,int)
org/apache/commons/math/random/RandomDataImpl/nextSecureHexString(int)#java/lang/StringBuilder/StringBuilder()
org/apache/commons/math/random/RandomDataImpl/nextSecureHexString(int)#java/security/SecureRandom/nextBytes(byte[])
org/apache/commons/math/random/RandomDataImpl/nextSecureHexString(int)#java/security/MessageDigest/getInstance(java.lang.String)
org/apache/commons/math/random/RandomDataImpl/nextSecureHexString(int)#java/lang/Integer/valueOf(int)
org/apache/commons/math/random/RandomDataImpl/nextSecureHexString(int)#java/lang/StringBuilder/toString()
org/apache/commons/math/random/RandomDataImpl/nextSecureHexString(int)#java/security/MessageDigest/update(byte[])
org/apache/commons/math/genetics/RandomKey/decodeGeneric(java.util.List,java.util.List,java.util.List)#java/util/ArrayList/ArrayList(int)
org/apache/commons/math/genetics/RandomKey/decodeGeneric(java.util.List,java.util.List,java.util.List)#java/util/ArrayList/ArrayList(java.util.Collection)
org/apache/commons/math/genetics/RandomKey/decodeGeneric(java.util.List,java.util.List,java.util.List)#java/lang/String/format(java.lang.String,java.lang.Object[])
org/apache/commons/math/genetics/RandomKey/decodeGeneric(java.util.List,java.util.List,java.util.List)#java/util/List/size()
org/apache/commons/math/genetics/RandomKey/decodeGeneric(java.util.List,java.util.List,java.util.List)#java/util/List/add(java.lang.Object)
org/apache/commons/math/genetics/RandomKey/decodeGeneric(java.util.List,java.util.List,java.util.List)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/apache/commons/math/genetics/RandomKey/decodeGeneric(java.util.List,java.util.List,java.util.List)#java/util/List/set(int,java.lang.Object)
org/apache/commons/math/genetics/RandomKey/decodeGeneric(java.util.List,java.util.List,java.util.List)#java/util/List/indexOf(java.lang.Object)
org/apache/commons/math/genetics/RandomKey/decodeGeneric(java.util.List,java.util.List,java.util.List)#java/lang/Integer/valueOf(int)
org/apache/commons/math/genetics/RandomKey/decodeGeneric(java.util.List,java.util.List,java.util.List)#java/util/List/get(int)
org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator/setEquations(org.apache.commons.math.ode.FirstOrderDifferentialEquations)
org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator/acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator,double[],double[],double)
org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#java/util/Iterator/hasNext()
org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator/sanityChecks(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])
org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator/requiresDenseOutput()
org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#java/util/Iterator/next()
org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator/copy()
org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator/setStateInitialized(boolean)
org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator/computeDerivatives(double,double[],double[])
org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator/resetEvaluations()
org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#java/util/Collection/iterator()
org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#java/lang/System/arraycopy(java.lang.Object,int,java.lang.Object,int,int)
org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator/resetEvaluations()
org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator/sanityChecks(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])
org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator/getMaxStep()
org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator/filterStep(double,boolean,boolean)
org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator/resetInternalState()
org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator/setEquations(org.apache.commons.math.ode.FirstOrderDifferentialEquations)
org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator/acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator,double[],double[],double)
org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#java/util/Iterator/hasNext()
org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator/initializeStep(org.apache.commons.math.ode.FirstOrderDifferentialEquations,boolean,int,double[],double,double[],double[],double[],double[])
org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#java/util/Iterator/next()
org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator/requiresDenseOutput()
org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator/setStateInitialized(boolean)
org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#java/util/Collection/iterator()
org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#java/lang/System/arraycopy(java.lang.Object,int,java.lang.Object,int,int)
org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator/computeDerivatives(double,double[],double[])
org/apache/commons/math/genetics/BinaryMutation/mutate(org.apache.commons.math.genetics.Chromosome)#java/lang/Integer/intValue()
org/apache/commons/math/genetics/BinaryMutation/mutate(org.apache.commons.math.genetics.Chromosome)#java/util/ArrayList/ArrayList(java.util.Collection)
org/apache/commons/math/genetics/BinaryMutation/mutate(org.apache.commons.math.genetics.Chromosome)#org/apache/commons/math/genetics/BinaryChromosome/getLength()
org/apache/commons/math/genetics/BinaryMutation/mutate(org.apache.commons.math.genetics.Chromosome)#org/apache/commons/math/genetics/BinaryChromosome/getRepresentation()
org/apache/commons/math/genetics/BinaryMutation/mutate(org.apache.commons.math.genetics.Chromosome)#java/util/List/set(int,java.lang.Object)
org/apache/commons/math/genetics/BinaryMutation/mutate(org.apache.commons.math.genetics.Chromosome)#java/lang/Integer/valueOf(int)
org/apache/commons/math/genetics/BinaryMutation/mutate(org.apache.commons.math.genetics.Chromosome)#java/util/List/get(int)
org/apache/commons/math/genetics/BinaryMutation/mutate(org.apache.commons.math.genetics.Chromosome)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
org/apache/commons/math/genetics/BinaryMutation/mutate(org.apache.commons.math.genetics.Chromosome)#org/apache/commons/math/genetics/BinaryChromosome/newFixedLengthChromosome(java.util.List)
org/apache/commons/math/random/EmpiricalDistributionImpl/fillBinStats(java.lang.Object)#java/lang/Double/valueOf(double)
org/apache/commons/math/random/EmpiricalDistributionImpl/fillBinStats(java.lang.Object)#java/util/List/isEmpty()
org/apache/commons/math/random/EmpiricalDistributionImpl/fillBinStats(java.lang.Object)#org/apache/commons/math/random/EmpiricalDistributionImpl$DataAdapter/computeBinStats()
org/apache/commons/math/random/EmpiricalDistributionImpl/fillBinStats(java.lang.Object)#java/util/List/clear()
org/apache/commons/math/random/EmpiricalDistributionImpl/fillBinStats(java.lang.Object)#org/apache/commons/math/random/EmpiricalDistributionImpl$DataAdapterFactory/DataAdapterFactory(org.apache.commons.math.random.EmpiricalDistributionImpl,org.apache.commons.math.random.EmpiricalDistributionImpl$1)
org/apache/commons/math/random/EmpiricalDistributionImpl/fillBinStats(java.lang.Object)#java/util/List/get(int)
org/apache/commons/math/random/EmpiricalDistributionImpl/fillBinStats(java.lang.Object)#java/util/List/add(int,java.lang.Object)
org/apache/commons/math/random/EmpiricalDistributionImpl/fillBinStats(java.lang.Object)#org/apache/commons/math/random/EmpiricalDistributionImpl$DataAdapterFactory/getAdapter(java.lang.Object)
org/apache/commons/math/random/EmpiricalDistributionImpl/fillBinStats(java.lang.Object)#java/lang/Double/doubleValue()
org/apache/commons/math/stat/ranking/NaturalRanking/rank(double[])#org/apache/commons/math/stat/ranking/NaNStrategy/ordinal()
org/apache/commons/math/stat/ranking/NaturalRanking/rank(double[])#java/util/ArrayList/ArrayList()
org/apache/commons/math/stat/ranking/NaturalRanking/rank(double[])#org/apache/commons/math/stat/ranking/NaturalRanking$IntDoublePair/IntDoublePair(double,int)
org/apache/commons/math/stat/ranking/NaturalRanking/rank(double[])#java/util/List/size()
org/apache/commons/math/stat/ranking/NaturalRanking/rank(double[])#java/lang/Integer/valueOf(int)
org/apache/commons/math/stat/ranking/NaturalRanking/rank(double[])#java/lang/Double/compare(double,double)
org/apache/commons/math/stat/ranking/NaturalRanking/rank(double[])#java/util/List/add(java.lang.Object)
org/apache/commons/math/stat/ranking/NaturalRanking/rank(double[])#org/apache/commons/math/stat/ranking/NaturalRanking$IntDoublePair/getValue()
org/apache/commons/math/stat/ranking/NaturalRanking/rank(double[])#org/apache/commons/math/stat/ranking/NaturalRanking$IntDoublePair/getPosition()
org/apache/commons/math/stat/ranking/NaturalRanking/rank(double[])#java/util/Arrays/sort(java.lang.Object[])
org/apache/commons/math/linear/RealVectorFormat/parse(java.lang.String,java.text.ParsePosition)#java/util/ArrayList/ArrayList()
org/apache/commons/math/linear/RealVectorFormat/parse(java.lang.String,java.text.ParsePosition)#org/apache/commons/math/linear/RealVectorFormat/parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)
org/apache/commons/math/linear/RealVectorFormat/parse(java.lang.String,java.text.ParsePosition)#java/text/ParsePosition/setIndex(int)
org/apache/commons/math/linear/RealVectorFormat/parse(java.lang.String,java.text.ParsePosition)#java/lang/Number/doubleValue()
org/apache/commons/math/linear/RealVectorFormat/parse(java.lang.String,java.text.ParsePosition)#java/util/List/isEmpty()
org/apache/commons/math/linear/RealVectorFormat/parse(java.lang.String,java.text.ParsePosition)#java/util/List/get(int)
org/apache/commons/math/linear/RealVectorFormat/parse(java.lang.String,java.text.ParsePosition)#org/apache/commons/math/linear/RealVectorFormat/parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)
org/apache/commons/math/linear/RealVectorFormat/parse(java.lang.String,java.text.ParsePosition)#java/text/ParsePosition/getIndex()
org/apache/commons/math/linear/RealVectorFormat/parse(java.lang.String,java.text.ParsePosition)#org/apache/commons/math/linear/RealVectorFormat/parseNumber(java.lang.String,java.text.NumberFormat,java.text.ParsePosition)
org/apache/commons/math/linear/RealVectorFormat/parse(java.lang.String,java.text.ParsePosition)#java/util/List/size()
org/apache/commons/math/linear/RealVectorFormat/parse(java.lang.String,java.text.ParsePosition)#java/util/List/add(java.lang.Object)
org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/sampling/NordsieckStepInterpolator/storeTime(double)
org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/sampling/NordsieckStepInterpolator/setInterpolatedTime(double)
org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/sampling/NordsieckStepInterpolator/shift()
org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#java/util/Iterator/hasNext()
org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator/updateHighOrderDerivativesPhase2(double[],double[],org.apache.commons.math.linear.Array2DRowRealMatrix)
org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator/setEquations(org.apache.commons.math.ode.FirstOrderDifferentialEquations)
org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/sampling/NordsieckStepInterpolator/getInterpolatedState()
org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator/filterStep(double,boolean,boolean)
org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#java/util/Iterator/next()
org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator/sanityChecks(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])
org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator/setStateInitialized(boolean)
org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator/computeDerivatives(double,double[],double[])
org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator/start(double,double[],double)
org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator/acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator,double[],double[],double)
org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator/computeStepGrowShrinkFactor(double)
org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator/updateHighOrderDerivativesPhase1(org.apache.commons.math.linear.Array2DRowRealMatrix)
org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/linear/Array2DRowRealMatrix/walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)
org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator/resetEvaluations()
org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#java/util/Collection/iterator()
org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#java/lang/System/arraycopy(java.lang.Object,int,java.lang.Object,int,int)
org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator$Corrector/Corrector(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator,double[],double[],double[])
org/apache/commons/math/util/CompositeFormat/parseNumber(java.lang.String,double,java.text.ParsePosition)#java/text/ParsePosition/setIndex(int)
org/apache/commons/math/util/CompositeFormat/parseNumber(java.lang.String,double,java.text.ParsePosition)#java/lang/Double/valueOf(double)
org/apache/commons/math/util/CompositeFormat/parseNumber(java.lang.String,double,java.text.ParsePosition)#java/lang/String/compareTo(java.lang.String)
org/apache/commons/math/util/CompositeFormat/parseNumber(java.lang.String,double,java.text.ParsePosition)#java/lang/String/length()
org/apache/commons/math/util/CompositeFormat/parseNumber(java.lang.String,double,java.text.ParsePosition)#java/lang/String/substring(int,int)
org/apache/commons/math/util/CompositeFormat/parseNumber(java.lang.String,double,java.text.ParsePosition)#java/lang/StringBuilder/StringBuilder()
org/apache/commons/math/util/CompositeFormat/parseNumber(java.lang.String,double,java.text.ParsePosition)#java/lang/StringBuilder/append(char)
org/apache/commons/math/util/CompositeFormat/parseNumber(java.lang.String,double,java.text.ParsePosition)#java/lang/StringBuilder/length()
org/apache/commons/math/util/CompositeFormat/parseNumber(java.lang.String,double,java.text.ParsePosition)#java/lang/StringBuilder/append(double)
org/apache/commons/math/util/CompositeFormat/parseNumber(java.lang.String,double,java.text.ParsePosition)#java/text/ParsePosition/getIndex()
org/apache/commons/math/util/CompositeFormat/parseNumber(java.lang.String,double,java.text.ParsePosition)#java/lang/StringBuilder/toString()
org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction/value(double[])#org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction$MicrosphereSurfaceElement/illumination()
org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction/value(double[])#java/util/Iterator/hasNext()
org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction/value(double[])#java/util/Map$Entry/getKey()
org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction/value(double[])#org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction$MicrosphereSurfaceElement/reset()
org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction/value(double[])#org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction$MicrosphereSurfaceElement/store(double,java.util.Map$Entry)
org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction/value(double[])#java/util/Map$Entry/getValue()
org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction/value(double[])#java/util/Map/entrySet()
org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction/value(double[])#org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction$MicrosphereSurfaceElement/sample()
org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction/value(double[])#java/util/Iterator/next()
org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction/value(double[])#java/lang/Double/doubleValue()
org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction/value(double[])#java/util/Set/iterator()
org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction/value(double[])#java/util/List/iterator()
org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction/value(double[])#org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction$MicrosphereSurfaceElement/normal()
org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#java/util/Iterator/hasNext()
org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator/filterStep(double,boolean,boolean)
org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator/setEquations(org.apache.commons.math.ode.FirstOrderDifferentialEquations)
org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#java/util/Iterator/next()
org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator/computeDerivatives(double,double[],double[])
org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator/initializeStep(org.apache.commons.math.ode.FirstOrderDifferentialEquations,boolean,int,double[],double,double[],double[],double[],double[])
org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator/acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator,double[],double[],double)
org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator/copy()
org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator/setStateInitialized(boolean)
org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator/resetInternalState()
org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator/sanityChecks(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])
org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator/resetEvaluations()
org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator/requiresDenseOutput()
org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#java/util/Collection/iterator()
org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator/integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])#java/lang/System/arraycopy(java.lang.Object,int,java.lang.Object,int,int)
org/apache/commons/math/fraction/FractionFormat/parse(java.lang.String,java.text.ParsePosition)#org/apache/commons/math/fraction/FractionFormat/parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)
org/apache/commons/math/fraction/FractionFormat/parse(java.lang.String,java.text.ParsePosition)#java/text/ParsePosition/setIndex(int)
org/apache/commons/math/fraction/FractionFormat/parse(java.lang.String,java.text.ParsePosition)#java/text/NumberFormat/parse(java.lang.String,java.text.ParsePosition)
org/apache/commons/math/fraction/FractionFormat/parse(java.lang.String,java.text.ParsePosition)#org/apache/commons/math/fraction/FractionFormat/getDenominatorFormat()
org/apache/commons/math/fraction/FractionFormat/parse(java.lang.String,java.text.ParsePosition)#java/text/ParsePosition/getIndex()
org/apache/commons/math/fraction/FractionFormat/parse(java.lang.String,java.text.ParsePosition)#java/lang/Number/intValue()
org/apache/commons/math/fraction/FractionFormat/parse(java.lang.String,java.text.ParsePosition)#org/apache/commons/math/fraction/FractionFormat/parseNextCharacter(java.lang.String,java.text.ParsePosition)
org/apache/commons/math/fraction/FractionFormat/parse(java.lang.String,java.text.ParsePosition)#java/text/ParsePosition/setErrorIndex(int)
org/apache/commons/math/fraction/FractionFormat/parse(java.lang.String,java.text.ParsePosition)#org/apache/commons/math/fraction/FractionFormat/getNumeratorFormat()
org/apache/commons/math/dfp/DfpDec/nextAfter(org.apache.commons.math.dfp.Dfp)#org/apache/commons/math/dfp/DfpDec/subtract(org.apache.commons.math.dfp.Dfp)
org/apache/commons/math/dfp/DfpDec/nextAfter(org.apache.commons.math.dfp.Dfp)#org/apache/commons/math/dfp/DfpDec/power10K(int)
org/apache/commons/math/dfp/DfpDec/nextAfter(org.apache.commons.math.dfp.Dfp)#org/apache/commons/math/dfp/DfpDec/power10(int)
org/apache/commons/math/dfp/DfpDec/nextAfter(org.apache.commons.math.dfp.Dfp)#org/apache/commons/math/dfp/DfpDec/copysign(org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)
org/apache/commons/math/dfp/DfpDec/nextAfter(org.apache.commons.math.dfp.Dfp)#org/apache/commons/math/dfp/DfpDec/add(org.apache.commons.math.dfp.Dfp)
org/apache/commons/math/dfp/DfpDec/nextAfter(org.apache.commons.math.dfp.Dfp)#org/apache/commons/math/dfp/DfpDec/equals(java.lang.Object)
org/apache/commons/math/dfp/DfpDec/nextAfter(org.apache.commons.math.dfp.Dfp)#org/apache/commons/math/dfp/DfpDec/lessThan(org.apache.commons.math.dfp.Dfp)
org/apache/commons/math/dfp/DfpDec/nextAfter(org.apache.commons.math.dfp.Dfp)#org/apache/commons/math/dfp/DfpDec/getZero()
org/apache/commons/math/dfp/DfpDec/nextAfter(org.apache.commons.math.dfp.Dfp)#org/apache/commons/math/dfp/DfpDec/log10()
org/apache/commons/math/dfp/DfpDec/nextAfter(org.apache.commons.math.dfp.Dfp)#org/apache/commons/math/dfp/DfpDec/classify()
org/apache/commons/math/dfp/DfpDec/nextAfter(org.apache.commons.math.dfp.Dfp)#org/apache/commons/math/dfp/DfpDec/getField()
org/apache/commons/math/dfp/DfpDec/nextAfter(org.apache.commons.math.dfp.Dfp)#org/apache/commons/math/dfp/DfpDec/dotrap(int,java.lang.String,org.apache.commons.math.dfp.Dfp,org.apache.commons.math.dfp.Dfp)
